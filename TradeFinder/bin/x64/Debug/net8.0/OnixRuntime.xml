<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OnixRuntime</name>
    </assembly>
    <members>
        <member name="T:OnixRuntime.Api.Audio.AudioPlayerStatus">
            <summary>
            Represents the status of the audio player.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Audio.AudioPlayerStatus.NoSource">
            <summary>
            No audio source is loaded.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Audio.AudioPlayerStatus.Stopped">
            <summary>
            Audio playback is stopped.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Audio.AudioPlayerStatus.Playing">
            <summary>
            Audio playback is currently active.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Audio.AudioPlayerStatus.Paused">
            <summary>
            Audio playback is paused.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Audio.AudioPlayerStatus.Opening">
            <summary>
            Audio playback is opening the source.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Audio.AudioPlayerStatus.Buffering">
            <summary>
            Audio playback is buffering.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Audio.AudioPlayer">
            <summary>
            A class to play audio content.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Audio.AudioPlayer"/> class.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Volume">
            <summary>
            The volume of the audio player between 0.0f to 1.0f.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Speed">
            <summary>
            How quickly the sound is playing.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Pitch">
            <summary>
            The pitch (frequency) of the sound wave. May have no effect.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.IsPlaying">
            <summary>
            Gets or sets whether the audio is currently playing.
            Setting to true will play, setting to false will stop.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.IsFinished">
            <summary>
            Gets whether the audio has finished playing.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.IsPaused">
            <summary>
            Gets or sets whether the audio is paused.
            Setting to true resumes, setting to false pauses.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.IsStopped">
            <summary>
            Gets whether the audio is stopped.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.IsLooping">
            <summary>
            Gets or sets whether the audio should loop when finished.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Muted">
            <summary>
            Gets or sets whether the audio is muted.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Duration">
            <summary>
            Gets the duration of the audio in milliseconds.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Status">
            <summary>
            Gets the current status of the audio player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Audio.AudioPlayer.Position">
            <summary>
            Gets or sets the current playback position in milliseconds.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.Stop">
            <summary>
            Stops audio playback.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.Pause">
            <summary>
            Pauses audio playback.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.Resume">
            <summary>
            Resumes audio playback if paused.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.Restart">
            <summary>
            Restarts audio playback from the beginning.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.Play">
            <summary>
            Plays the current audio source.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.AudioPlayer.Play(System.String)">
            <summary>
            Plays the audio from the specified file path or URL.
            </summary>
            <param name="pathOrUrl">The file path or URL of the audio to play.</param>
        </member>
        <member name="T:OnixRuntime.Api.Audio.GameAudioEngine">
            <summary>
            Represents the audio engine of the game, used to play or stop playing game sounds.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Audio.GameAudioEngine.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Audio.GameAudioEngine"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the audio engine instance.</param>
        </member>
        <member name="M:OnixRuntime.Api.Audio.GameAudioEngine.PlayInWorld(System.String,OnixRuntime.Api.Maths.Vec3,System.Single,System.Single)">
            <summary>
            Plays a sound at a specific position in the game world.
            </summary>
            <param name="soundName">The name of the sound to play.</param>
            <param name="position">The 3D position in the world where the sound should be played.</param>
            <param name="volume">The volume of the sound (default is 1.0f).</param>
            <param name="pitch">The pitch of the sound (default is 1.0f).</param>
        </member>
        <member name="M:OnixRuntime.Api.Audio.GameAudioEngine.PlayUi(System.String,System.Single,System.Single)">
            <summary>
            Plays a UI sound, typically used for menus or interface feedback.
            </summary>
            <param name="soundName">The name of the sound to play.</param>
            <param name="volume">The volume of the sound (default is 1.0f).</param>
            <param name="pitch">The pitch of the sound (default is 1.0f).</param>
        </member>
        <member name="M:OnixRuntime.Api.Audio.GameAudioEngine.StopSound(System.String)">
            <summary>
            Stops a specific sound that is currently playing.
            </summary>
            <param name="soundName">The name of the sound to stop.</param>
        </member>
        <member name="M:OnixRuntime.Api.Audio.GameAudioEngine.StopAllSounds">
            <summary>
            Stops all currently playing sounds.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Connection.ConnectionInfo">
            <summary>Represents network connection information for the current runtime session.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.ConnectedIp">
            <summary>The IP address the client is currently connected to.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.JoinedIp">
            <summary>The IP address the client originally joined.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.Port">
            <summary>The port used for the current connection.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.CurrentPing">
            <summary>The current ping (in milliseconds) to the connected server.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.AveragePing">
            <summary>The average ping (in milliseconds) over time to the connected server.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.IsLocal">
            <summary>Whether the connection is local (e.g. singleplayer or LAN).</summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.ConnectionInfo.Realm">
            <summary>The realm or dimension the player is currently in, if applicable.</summary>
        </member>
        <member name="T:OnixRuntime.Api.Connection.LocalGameServer">
            <summary>
            Represents a running instance of a local game server in the Onix runtime.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.LocalGameServer.World">
            <summary>
            The world object managed by this server instance.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.LocalGameServer.LocalPlayer">
            <summary>
            The local player on the server, if one exists.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Connection.LocalGameServer.BroadcastTextMessage(System.String,OnixRuntime.Api.UI.ChatMessageType,System.String)">
            <summary>
            Broadcasts a message to all players on the server.
            </summary>
            <param name="message">The text content of the message.</param>
            <param name="type">The type of message to send. Defaults to <see cref="F:OnixRuntime.Api.UI.ChatMessageType.Raw"/>.</param>
            <param name="username">The name associated with the message sender, if applicable.</param>
        </member>
        <member name="P:OnixRuntime.Api.Connection.LocalGameServer.SimulationTickRate">
            <summary>
            Gets or sets the simulation tick rate for the server.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.LocalGameServer.PackManager">
            <summary>
            The server's pack manager, primarily used for managing behavior packs.
            There is a decent chance you want <see cref="P:OnixRuntime.Api.OnixGame.PackManager"/> instead.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Connection.RealmWorld">
            <summary>
            Provides access to a Minecraft Realm world and its metadata.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.RealmWorld.RealmId">
            <summary>
            Gets the unique identifier of the realm.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.RealmWorld.Name">
            <summary>
            Gets the name of the realm.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.RealmWorld.Description">
            <summary>
            Gets the description of the realm.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.RealmWorld.OwnerXuid">
            <summary>
            Gets the XUID of the realm owner.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Connection.RealmWorld.ClubId">
            <summary>
            Gets the Club ID associated with the realm.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.EntityCategory">
            <summary>
            Specifies the category or categories that an entity can belong to.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.Entity">
            <summary>
            Represents an entity in the world. Entity methods and properties are only available from a game logic thread.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Categories">
            <summary>
            Gets the categories this entity belongs to.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.IsClientSide">
            <summary>
            Gets whether this entity is client-side only.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.HasCategory(OnixRuntime.Api.Entities.EntityCategory)">
            <summary>
            Checks if the entity has the specified category.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.GetFlag(OnixRuntime.Api.Entities.EntityFlag)">
            <summary>
            Checks if the entity has the specified flag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.SetFlag(OnixRuntime.Api.Entities.EntityFlag,System.Boolean)">
            <summary>
            Checks if the entity has the specified flag.
            You should only use this from the server side.
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">When running on the client.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.IsTargetable">
            <summary>
            Gets whether the entity can be targeted.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Nametag">
            <summary>
            Gets or sets the nametag of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.RawPosition">
            <summary>
            Gets the raw position and previous position of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Position">
            <summary>
            Gets or sets the position of the entity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.ForwardPosition(System.Single)">
            <summary>
            Gets the position in front of the entity at the specified distance.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.BlockPosition">
            <summary>
            Gets the block position of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.ChunkPosition">
            <summary>
            Gets the chunk position of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Velocity">
            <summary>
            Gets the velocity of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Rotation">
            <summary>
            Gets the rotation angles of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.TypeName">
            <summary>
            Gets the type name of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.TypeNamespace">
            <summary>
            Gets the type namespace of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.TypeNameFull">
            <summary>
            Gets the full type name of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.UniqueId">
            <summary>
            Gets the unique identifier of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.RuntimeId">
            <summary>
            Gets the runtime identifier of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.ScoreboardIdentity">
            <summary>
            Gets the scoreboard identity of the entity, if available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.HeightOffset">
            <summary>
            Gets the height offset of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.StepHeight">
            <summary>
            Gets the step height of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.AliveDuration">
            <summary>
            Gets the duration the entity has been alive as a TimeSpan.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.AliveTicks">
            <summary>
            Gets the number of game ticks the entity has been alive.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Attributes">
            <summary>
            Gets the attributes of the entity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.GetAttribute(OnixRuntime.Api.Entities.EntityAttributeId)">
            <summary>
            Gets the attribute with the specified ID.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.GetAttribute(System.String)">
            <summary>
            Gets the attribute with the specified name, if it exists.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.UpdateAttribute(OnixRuntime.Api.Entities.EntityAttribute)">
            <summary>
            Updates the specified attribute instance.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.UpdateAttribute(OnixRuntime.Api.Entities.EntityAttributeId,System.Action{OnixRuntime.Api.Entities.MutableEntityAttribute})">
            <summary>
            Updates the specified attribute by ID using a callback to modify it.
            If the attribute cannot be found it will not call the callback.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.Kill">
            <summary>
            Kills the entity by setting its health to zero.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Effects">
            <summary>
            Gets the list of mob effect instances applied to the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.BoundingBox">
            <summary>
            Gets the bounding box of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.BoundingBoxRaw">
            <summary>
            Gets the raw bounding box of the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.BoundingBoxSize">
            <summary>
            Gets the size of the entity's bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.SimpleMolangVariables">
            <summary>
            Gets the simple Molang variables for the entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Dimension">
            <summary>
            Gets the dimension the entity is in.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Region">
            <summary>
            Gets the Region of world blocks the entity is in.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.World">
            <summary>
            Gets the runtime world the entity is in.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.Riding">
            <summary>
            Gets the entity this entity is riding, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.RiddenBy">
            <summary>
            Gets the entity riding this entity, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.MainHandItem">
            <summary>
            Gets or sets the item in the entity's main hand.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.OffhandItem">
            <summary>
            Gets or sets the item in the entity's offhand.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.HelmetItem">
            <summary>
            Gets or sets the item in the entity's helmet slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.ChestplateItem">
            <summary>
            Gets or sets the item in the entity's chestplate slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.LeggingsItem">
            <summary>
            Gets or sets the item in the entity's leggings slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.BootsItem">
            <summary>
            Gets or sets the item in the entity's boots slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Entity.ArmorItems">
            <summary>
            Gets or sets all armor items of the entity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Entity.ToString">
            <summary>
            Returns a string representation of the entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.ItemEntity">
            <summary>
            An item entity.
            For dropped items.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ItemEntity.Item">
            <summary>
            Gets the item stack of the item entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.EntityAttributeId">
            <summary>
            Identifiers for entity attributes.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Hunger">
            <summary>
            The hunger. Remember, you're not yourself when you're hungry.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Saturation">
            <summary>
            The saturation. Basically hunger but invisible.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Exhaustion">
            <summary>
            The exhaustion. Not too sure what this one does, feel free to inform me so I can update this documentation.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Level">
            <summary>
            The current level of the player.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Experience">
            <summary>
            The current experience points of the player for that level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Health">
            <summary>
            The current health of the player.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.FollowRange">
            <summary>
            The follow range. How far will the entity follow its target?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.KnockbackResistance">
            <summary>
            The knockback resistance. How resistant is the entity to knockback?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.MovementSpeed">
            <summary>
            The movement speed. How fast can the entity move?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.UnderwaterMovementSpeed">
            <summary>
            The underwater movement speed. How fast can the entity move underwater?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.LavaMovementSpeed">
            <summary>
            The lava movement speed. How fast can the entity move in lava?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.AttackDamage">
            <summary>
            The attack damage. How much damage can the entity deal?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Absorption">
            <summary>
            This is the yellow hearts the <see cref="F:OnixRuntime.Api.Entities.MobEffectId.Absorption"/> effect grants.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.Luck">
            <summary>
            99% of gamblers quit before hitting it big.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.EntityAttributeId.JumpStrength">
            <summary>
            The jump strength. I think this is only ever used for horses, but maybe not.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.EntityAttribute">
            <summary>
            Represents an immutable entity attribute, including its value and limits.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.Name">
            <summary>
            Gets the name of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.Id">
            <summary>
            Gets the attribute's identifier.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.Value">
            <summary>
            Gets the current value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.MinValue">
            <summary>
            Gets the minimum value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.MaxValue">
            <summary>
            Gets the maximum value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.DefaultValue">
            <summary>
            Gets the default value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.DefaultMinValue">
            <summary>
            Gets the default minimum value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.EntityAttribute.DefaultMaxValue">
            <summary>
            Gets the default maximum value of the attribute.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.EntityAttribute.#ctor">
            <summary>
            Protected constructor for EntityAttribute, used for derived classes.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.MutableEntityAttribute">
            <summary>
            Represents a mutable entity attribute, allowing modification of its value and limits.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MutableEntityAttribute.Value">
            <summary>
            Gets or sets the current value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MutableEntityAttribute.MinValue">
            <summary>
            Gets or sets the minimum value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MutableEntityAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MutableEntityAttribute.DefaultValue">
            <summary>
            Gets or sets the default value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MutableEntityAttribute.DefaultMinValue">
            <summary>
            Gets or sets the default minimum value of the attribute.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MutableEntityAttribute.DefaultMaxValue">
            <summary>
            Gets or sets the default maximum value of the attribute.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.EntityFlag">
            <summary>
            Flags representing various states and properties that an entity can have.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.LocalPlayer">
            <summary>
            Represents the local player in the game.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.LocalPlayer.Raycast">
            <summary>The raycast result of the LocalPlayer.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.LocalPlayer.MovementInputs">
            <summary>The movement input state, tells you if the LocalPlayer is moving forward or jumping, etc.</summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.LocalPlayer.MainHandItem">
            <summary>
            Gets or sets the item in the main hand.
            Note that for the local player, this will select the item if it is in the hotbar. 
            Otherwise it will just set the item on the client which will require trust.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.AddRotation(OnixRuntime.Api.Maths.Angles)">
            <summary>Adds rotation to the player rotation (This also changes the camera)</summary>
            <param name="angles">The angles to add to the current rotation in degrees.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.AddRotation(System.Single,System.Single)">
            <summary>Adds rotation to the player rotation (This also changes the camera)</summary>
            <param name="yaw">The yaw to add to the current rotation in degrees.</param>
            <param name="pitch">The pitch to add to the current rotation in degrees.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.SetRotation(OnixRuntime.Api.Maths.Angles)">
            <summary>Sets the rotation of the player. (This also changes the camera)</summary>
            <param name="angles">The angles to set as the current rotation in degrees.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.SetRotation(System.Single,System.Single)">
            <summary>Sets the rotation of the player. (This also changes the camera)</summary>
            <param name="yaw">The yaw to set as the current rotation in degrees.</param>
            <param name="pitch">The pitch to set as the current rotation in degrees.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.SetFacingXYZ(OnixRuntime.Api.Maths.Vec3,System.Boolean)">
            <summary>Sets the rotation of the player to be facing that world position. (This also changes the camera)</summary>
            <param name="worldPosition">The point in 3d space to look at.</param>
            <param name="changeY">If the player's view should also change on the up/down axis.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.SetFacingXYZ(OnixRuntime.Api.Maths.BlockPos,System.Boolean)">
            <summary>Sets the rotation of the player to be facing that world position. (This also changes the camera)</summary>
            <param name="worldPosition">The point in 3d space to look at. (The center will be chosen)</param>
            <param name="changeY">If the player's view should also change on the up/down axis.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.SetFacingXYZ(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace,System.Boolean)">
            <summary>Sets the rotation of the player to be facing that world position. (This also changes the camera)</summary>
            <param name="worldPosition">The block in 3d space to look at.</param>
            <param name="face">The face of the block look at.</param>
            <param name="changeY">If the player's view should also change on the up/down axis.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BuildBlock(System.Int32,System.Int32,System.Int32,OnixRuntime.Api.World.BlockFace)">
            <summary>Builds a new block at the specified coordinates.</summary>
            <param name="x">The X position of the block to be placed.</param>
            <param name="y">The Y position of the block to be placed.</param>
            <param name="z">The Z position of the block to be placed.</param>
            <param name="face">The face of the base block (determines which side of the base block the new one gets placed.)</param>
            <returns>True if the block was built.</returns>
            <remarks>
            This function requires trust or creative mode.
            If you build block on a chest without sneaking it will open the chest.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BuildBlock(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace)">
            <summary>Builds a new block on face of position.</summary>
            <param name="position">The position of the block being used as a base to place the new block.</param>
            <param name="face">The face of the base block (determines which side of the base block the new one gets placed.)</param>
            <returns>True if the block was built.</returns>
            <remarks>
            This function requires trust or creative mode.
            If you build block on a chest without sneaking it will open the chest.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BuildBlock(OnixRuntime.Api.World.RaycastResult)">
            <summary>Builds a new block at the position specified by the raycast result.</summary>
            <param name="raycast">The raycast result containing the position to place the block.</param>
            <returns>True if the block was built.</returns>
            <remarks>
            This function requires trust or creative mode.
            If you build block on a chest without sneaking it will open the chest.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BuildBlock">
            <summary>Builds a new block from the current Raycast.</summary>
            <returns>True if the block was built.</returns>
            <remarks>
            This function requires trust or creative mode.
            If you build block on a chest without sneaking it will open the chest.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BreakBlock(System.Int32,System.Int32,System.Int32,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec3)">
            <summary>Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one.</summary>
            <param name="x">The X position of the block to be broken.</param>
            <param name="y">The Y position of the block to be broken.</param>
            <param name="z">The Z position of the block to be broken.</param>
            <param name="face">The face of the block being broken.</param>
            <param name="raycastHitPosition">Where the raycast would have hit the block in world coordinates.</param>
            <returns>True if the block was destroyed.</returns>
            <remarks>
            You should call this function on the same block often since if you are in survival it will take time.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown when you call this twice in the same tick without having broken the block last time.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BreakBlock(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec3)">
            <summary>Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one.</summary>
            <param name="position">The position of the block to be broken.</param>
            <param name="face">The face of the block being broken.</param>
            <param name="raycastHitPosition">Where the raycast would have hit the block in world coordinates.</param>
            <returns>True if the block was destroyed.</returns>
            <remarks>
            You should call this function on the same block often since if you are in survival it will take time.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown when you call this twice in the same tick without having broken the block last time.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BreakBlock(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace)">
            <summary>Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one.</summary>
            <param name="position">The position of the block to be broken.</param>
            <param name="face">The face of the block being broken.</param>
            <returns>True if the block was destroyed.</returns>
            <remarks>
            You should call this function on the same block often since if you are in survival it will take time.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown when you call this twice in the same tick without having broken the block last time.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BreakBlock(System.Int32,System.Int32,System.Int32,OnixRuntime.Api.World.BlockFace)">
            <summary>Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one.</summary>
            <param name="x">The X position of the block to be broken.</param>
            <param name="y">The Y position of the block to be broken.</param>
            <param name="z">The Z position of the block to be broken.</param>
            <param name="face">The face of the block being broken.</param>
            <returns>True if the block was destroyed.</returns>
            <remarks>
            You should call this function on the same block often since if you are in survival it will take time.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown when you call this twice in the same tick without having broken the block last time.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BreakBlock(OnixRuntime.Api.World.RaycastResult)">
            <summary>Tries to break a block. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one.</summary>
            <param name="raycast">The raycast to extract the information from.</param>
            <returns>True if the block was destroyed.</returns>
            <remarks>
            You should call this function on the same block often since if you are in survival it will take time.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown when you call this twice in the same tick without having broken the block last time.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.BreakBlock">
            <summary>Tries to break a block using the current Raycast. If this fails you will need to wait for the next tick before you can try another or continue destroying the same one.</summary>
            <returns>True if the block was destroyed.</returns>
            <remarks>
            You should call this function on the same block often since if you are in survival it will take time.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown when you call this twice in the same tick without having broken the block last time.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.StopBreakBlock(OnixRuntime.Api.Maths.BlockPos)">
            <summary>Tries to stop breaking the block at the position provided. You should probably use the one with no parameters.</summary>
            <param name="position">The position to stop breaking the block at.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.StopBreakBlock(System.Int32,System.Int32,System.Int32)">
            <summary>Tries to stop breaking the block at the position provided. You should probably use the one with no parameters.</summary>
            <param name="x">The x position of the block to stop breaking.</param>
            <param name="y">The y position of the block to stop breaking.</param>
            <param name="z">The z position of the block to stop breaking.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.StopBreakBlock(OnixRuntime.Api.World.RaycastResult)">
            <summary>Tries to stop breaking the block at the raycast's block hit position. You should probably use the one with no parameters.</summary>
            <param name="raycast">The position to stop breaking the block at.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.StopBreakBlock">
            <summary>Tries to stop breaking the block at the last position it tried/started.</summary>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.Attack(OnixRuntime.Api.Entities.Entity)">
            <summary>Makes the player attack an entity.</summary>
            <param name="entity">The entity to attack.</param>
            <returns>True if the entity was attacked.</returns>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.Interact(OnixRuntime.Api.Entities.Entity,OnixRuntime.Api.Maths.Vec3)">
            <summary>Makes the player interact with an entity.</summary>
            <param name="entity">The entity to interact with.</param>
            <param name="hitPosition">The world position where the player hit the entity's hitbox.</param>
            <returns>True if the entity was interacted with.</returns>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.Interact(OnixRuntime.Api.Entities.Entity)">
            <summary>Makes the player interact with an entity.</summary>
            <param name="entity">The entity to interact with.</param>
            <returns>True if the entity was interacted with.</returns>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.UseItem">
            <summary>
            Makes the player use the item in their main hand.
            You can shoot a bow/cancel eating by calling <see cref="M:OnixRuntime.Api.Entities.LocalPlayer.StopUsingItem"/>
            </summary>
            <returns>True if the item was successfully used.</returns>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.UseItemOn(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Makes the player use the item in their main hand on a block.
            </summary>
            <param name="position">The position of the block the item is used on.</param>
            <param name="face">The face of the block the item is used on.</param>
            <param name="raycastHitPosition">The position the raycast hit.</param>
            <returns>True if the item was used on successfully.</returns>
            <remarks>
            This function might do nothing and only be used by others internally, it is available nonetheless.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.UseItemOn(System.Int32,System.Int32,System.Int32,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Makes the player use the item in their main hand on a block.
            </summary>
            <param name="x">The x position of the block the item is used on.</param>
            <param name="y">The y position of the block the item is used on.</param>
            <param name="z">The z position of the block the item is used on.</param>
            <param name="face">The face of the block the item is used on.</param>
            <param name="raycastHitPosition">The position the raycast hit.</param>
            <returns>True if the item was used on successfully.</returns>
            <remarks>
            This function might do nothing and only be used by others internally, it is available nonetheless.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.UseItemOn(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace)">
            <summary>
            Makes the player use the item in their main hand on a block.
            </summary>
            <param name="position">The position of the block the item is used on.</param>
            <param name="face">The face of the block the item is used on.</param>
            <returns>True if the item was used on successfully.</returns>
            <remarks>
            This function might do nothing and only be used by others internally, it is available nonetheless.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.UseItemOn(System.Int32,System.Int32,System.Int32,OnixRuntime.Api.World.BlockFace)">
            <summary>
            Makes the player use the item in their main hand on a block.
            </summary>
            <param name="x">The x position of the block the item is used on.</param>
            <param name="y">The y position of the block the item is used on.</param>
            <param name="z">The z position of the block the item is used on.</param>
            <param name="face">The face of the block the item is used on.</param>
            <returns>True if the item was used on successfully.</returns>
            <remarks>
            This function might do nothing and only be used by others internally, it is available nonetheless.
            This function requires trust or creative mode.
            </remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.LocalPlayer.StopUsingItem">
            <summary>Stops using the item in the player's hand (will shoot the arrow out of a bow or cancel eating).</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="T:OnixRuntime.Api.Entities.Mob">
            <summary>
            Represents a mob entity, providing access to mob-specific properties and inventory handling.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.RawBodyRot">
            <summary>
            Gets the raw body rotation of the mob.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.RawBodyRotOld">
            <summary>
            Gets the previous raw body rotation of the mob.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.RawHeadRot">
            <summary>
            Gets the raw head rotation of the mob.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.RawHeadRotOld">
            <summary>
            Gets the previous raw head rotation of the mob.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.HurtTime">
            <summary>
            Gets the number of ticks since the mob was last hurt.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.FallTime">
            <summary>
            Gets the time the mob has been falling.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.CardinalHeadRotation">
            <summary>
            Gets the cardinal head rotation of the mob.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Mob.SendInventory(System.Boolean)">
            <summary>
            Sends the mob's inventory to the client, optionally opening it.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.MainHandItem">
            <summary>
            Gets or sets the item in the mob's main hand. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.OffhandItem">
            <summary>
            Gets or sets the item in the mob's offhand. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.HelmetItem">
            <summary>
            Gets or sets the item in the mob's helmet slot. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.ChestplateItem">
            <summary>
            Gets or sets the item in the mob's chestplate slot. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.LeggingsItem">
            <summary>
            Gets or sets the item in the mob's leggings slot. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.BootsItem">
            <summary>
            Gets or sets the item in the mob's boots slot. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Mob.ArmorItems">
            <summary>
            Gets or sets all armor items of the mob. Sends inventory update if changed server-side.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.MobEffectId">
            <summary>
            Identifiers for all possible mob effects.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.MobEffectIdExtensions">
            <summary>
            Extension methods for MobEffectId, including conversion and icon retrieval.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.MobEffectIdExtensions.FromInt(System.Int32)">
            <summary>
            Converts an integer to a MobEffectId, returning None if out of range.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.MobEffectIdExtensions.ToIdentifier(OnixRuntime.Api.Entities.MobEffectId)">
            <summary>
            Gets the string identifier for a MobEffectId.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.MobEffectIdExtensions.GetIcon(OnixRuntime.Api.Entities.MobEffectId)">
            <summary>
            Gets the icon texture path for the given MobEffectId.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.MobEffectInstance">
            <summary>
            Represents an instance of a mob effect applied to an entity, including its properties and duration.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.Id">
            <summary>
            Gets the effect ID.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.Duration">
            <summary>
            The TimeSpan ticks do not represent Minecraft ticks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.Amplifier">
            <summary>
            The amplifier is 0 based, so 0 means it will show I in the UI and 1 would be II.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.DisplayOnScreenAnimation">
            <summary>
            Gets whether the effect displays an on-screen animation.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.Ambient">
            <summary>
            Gets whether the effect is ambient.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.NoCounter">
            <summary>
            Gets whether the effect has no counter.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.Visible">
            <summary>
            Gets whether the effect is visible.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.IsActive">
            <summary>
            Gets whether the effect is active (duration is not zero).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.MobEffectInstance.Icon">
            <summary>
            Gets the icon texture for this effect.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.GameMode">
            <summary>
            Represents the game mode of a player.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameMode.Survival">
            <summary>
            The survival gamemode.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameMode.Creative">
            <summary>
            The creative gamemode.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameMode.Adventure">
            <summary>
            The adventure gamemode.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameMode.Default">
            <summary>
            The default gamemode of the world. You can find it at <see cref="P:OnixRuntime.Api.World.RuntimeWorld.DefaultGameMode"/>.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameMode.Spectator">
            <summary>
            The spectator gamemode.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.CommandPermissionLevel">
            <summary>
            Represents the command permission level of a player.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.CommandPermissionLevel.Any">
            <summary>
            Grants access to pretty much no commands. Mainly /me, /say, /help, /tell
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.CommandPermissionLevel.GameDirectors">
            <summary>
            This I'm not too sure what it's used for.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.CommandPermissionLevel.Admin">
            <summary>
            this is what op with commands grants you.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.CommandPermissionLevel.Host">
            <summary>
            This gives you a few additional commands for your world, like /kick.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.CommandPermissionLevel.Owner">
            <summary>
            Not too sure what this gives you extra, might be things like /allowlist, /stop.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.CommandPermissionLevel.Internal">
            <summary>
            I'm guessing this might be for the console.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.PlayerPermissionLevel">
            <summary>
            Represents the player permission level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerPermissionLevel.Visitor">
            <summary>
            you can't do anything, you can't break blocks, interact with things, punch anything. You can type in chat and look around.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerPermissionLevel.Member">
            <summary>
            The normal permissions, no commands.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerPermissionLevel.Operator">
            <summary>
            You can run commands, change some world related options.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerPermissionLevel.Custom">
            <summary>
            You can be anything the person setting your permissions want. You are at their mercy regarding what they will decide to do with you.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.Player">
            <summary>
            Represents a player entity, providing access to player-specific properties and inventory handling.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.CommandPermissionLevel">
            <summary>
            Gets the command permission level of the player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.PermissionLevel">
            <summary>
            Gets the player permission level.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.Username">
            <summary>
            Gets the username of the player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.Skin">
            <summary>
            Gets or sets the player's skin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.ServerConnectedPlayerEntry">
            <summary>
            Gets the server connected player entry, if available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.Inventory">
            <summary>
            Gets the player's inventory container.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Player.SetInventoryItem(OnixRuntime.Api.Items.ItemStack,System.Int32)">
            <summary>
            Sets an item in the player's inventory at the specified slot. Sends inventory update if changed server-side.
            </summary>
            <remarks>This function requires trust on the client side.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.UIContainer">
            <summary>
            Gets the player's UI container. Avoid writing items to this container directly.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.MainHandItem">
            <summary>
            Gets or sets the item in the player's main hand.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.RemainingItemUseDurationTicks">
            <summary>
            Gets the remaining item use duration in game ticks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.RemainingItemUseDuration">
            <summary>
            Gets the remaining item use duration as a TimeSpan.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.SelectedSlot">
            <summary>
            Gets or sets the selected hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.GameMode">
            <summary>
            Gets the player's current game type.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.GameModeOrDefault">
            <summary>
            This one can return GameMode.Default
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.IsDestroyingBlock">
            <summary>
            Gets whether the player is currently destroying a block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.DestroyBlockProgress">
            <summary>
            Gets the progress of block destruction.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.AuthenticatedUsername">
            <summary>
            Gets the authenticated username of the player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.Xuid">
            <summary>
            Gets the XUID of the player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.Uuid">
            <summary>
            Gets the UUID of the player.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.Player.SetSkin(OnixRuntime.Api.Entities.PlayerSkin,System.Boolean)">
            <summary>
            Sets the player's skin, optionally only affecting the client.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.Cooldowns">
            <summary>
            Gives you the list of all the cooldown types. These may or may not match the item name.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.Player.CooldownTicks">
            <summary>
            Gives you the list of all the cooldown types as ticks. These may or may not match the item name.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.PlayerMovementInputs">
            <summary>
            Represents the player's current input state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Forward">
            <summary>
            If the LocalPlayer is moving forward.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Backward">
            <summary>
            If the LocalPlayer is moving backward.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Left">
            <summary>
            If the LocalPlayer is moving left.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Right">
            <summary>
            If the LocalPlayer is moving right.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Sprint">
            <summary>
            If the LocalPlayer is sprinting.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Sneak">
            <summary>
            If the LocalPlayer is sneaking.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.Jump">
            <summary>
            If the LocalPlayer is jumping.
            Get can be accessed from any logic callback on the client.
            Set MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerMovementInputs.MoveVector">
            <summary>
            Both values range from -1 to 1 with 0 being no movement.
            The Y is forward and backward movement (1 = forward and -1 = backwards).
            The X is left and right movement (1 = left and -1 = right).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerMovementInputs.Reset">
            <summary>
            Stops all movement.
            MUST be called from the Input.OnPlayerInputTick event with a sufficient trust level
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">Thrown when you set it outside its event.</exception>
        </member>
        <member name="T:OnixRuntime.Api.Entities.PlayerSkinTrust">
            <summary>
            Indicates the trust level of a player skin.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkinTrust.Unknown">
            <summary>
            Those who know...
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkinTrust.Untrusted">
            <summary>
            Not trusted.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkinTrust.Trusted">
            <summary>
            The skin is trusted.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.PlayerSkin">
            <summary>
            Represents a Minecraft player skin, including geometry, images, and metadata.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType">
            <summary>
            Specifies the arm size type for a player skin.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType.Slim">
            <summary>
            Slim or Alex arm.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType.Wide">
            <summary>
            Wide or Steve arm.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType.Count">
            <summary>
            The amount of arm size types.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.PlayerSkin.ArmSizeType.Unknown">
            <summary>
            Those who know...
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.#ctor">
            <summary>
            Default constructor for PlayerSkin.
            This will not do much as is. You should probably use Clone() on the player's skin if you aren't trying to change everything.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.FullId">
            <summary>
            Gets or sets the full ID of the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.Id">
            <summary>
            Gets or sets the skin ID.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.PlayFabId">
            <summary>
            Gets or sets the PlayFab ID associated with the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.GeometryName">
            <summary>
            Gets or sets the geometry name for the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.ResourcePatch">
            <summary>
            Gets or sets the resource patch for the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.DefaultGeometryName">
            <summary>
            Gets or sets the default geometry name for the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.ArmSize">
            <summary>
            Gets or sets the arm size type for the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.Geometry">
            <summary>
            Gets or sets the geometry data for the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.GeometryOrDefault">
            <summary>
            Since 1.21.70 the player's geometry is null for the default geometries.
            The client and server are all fine with this but if you need the geometry data, this function will return the default geometry data.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.SkinImage">
            <summary>
            Gets or sets the skin image data.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.CapeId">
            <summary>
            Gets or sets the cape ID for the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.CapeImage">
            <summary>
            Gets or sets the cape image data.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.IsPremium">
            <summary>
            Gets or sets a value indicating whether the skin is premium.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.IgnoreCape">
            <summary>
            Gets or sets a value indicating whether to ignore the cape.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.IsPersona">
            <summary>
            Gets or sets a value indicating whether the skin is a persona skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.PlayerSkin.Trust">
            <summary>
            Gets or sets the trust level of the skin.
            </summary>
            <remarks>Throws if the object is not owned.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when the object is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.GenerateNewIds(System.Boolean)">
            <summary>
            Generates new IDs for the skin and optionally for the cape.
            </summary>
            <param name="capeId">If true, generates a new ID for the cape.</param>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.GenerateNewIds">
            <summary>
            Generates new IDs for the skin and optionally for the cape.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.ChangeCape(OnixRuntime.Api.Utils.RawImageData,System.String)">
            <summary>
            Changes the cape image and optionally the cape ID.
            </summary>
            <param name="image">The new cape image.</param>
            <param name="capeId">The new cape ID. If null, a new ID is generated.</param>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.RemoveCape">
            <summary>
            Removes the cape.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.ChangeSkin(OnixRuntime.Api.Utils.RawImageData,System.String,System.String)">
            <summary>
            Changes the skin image and optionally the skin ID and full ID.
            </summary>
            <param name="image">The new skin image.</param>
            <param name="skinId">The new skin ID. If null, a new ID is generated.</param>
            <param name="fullId">The new full ID. If null, the skin ID is used.</param>
        </member>
        <member name="M:OnixRuntime.Api.Entities.PlayerSkin.Clone">
            <summary>
            Clones the player skin.
            </summary>
            <returns>A new instance of <see cref="T:OnixRuntime.Api.Entities.PlayerSkin"/> that is a copy of the current instance.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Entities.GameBuildPlatform">
            <summary>
            Represents the build platform of a connected game client.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Android">
            <summary>
            Android build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.iOS">
            <summary>
            iOS build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.MacOS">
            <summary>
            macOS build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Amazon">
            <summary>
            Amazon build platform (Fire devices).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.GearVR">
            <summary>
            Gear VR build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.UWP">
            <summary>
            Universal Windows Platform (UWP).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Win32">
            <summary>
            Windows build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.DedicatedServer">
            <summary>
            Dedicated server build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Playstation">
            <summary>
            PlayStation build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Switch">
            <summary>
            Nintendo Switch build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Xbox">
            <summary>
            Xbox build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.WindowsPhone">
            <summary>
            Windows Phone build platform.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Entities.GameBuildPlatform.Unknown">
            <summary>
            Unknown or unsupported build platform.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Entities.ServerConnectedPlayer">
            <summary>
            Represents a player connected to the server, including platform, identity, and skin information.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.ClientPlayer">
            <summary>Tries to get the client player entity from the player entry. Won't work if the entity is not loaded.</summary>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.ServerPlayer">
            <summary>
            Gets the server player instance associated with this connected player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.UniqueEntityId">
            <summary>
            Gets the unique entity ID for this player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.Username">
            <summary>
            Gets the username of the player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.Xuid">
            <summary>
            Gets the XUID of the player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.Platform">
            <summary>
            Gets the platform the player is connected from.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Entities.ServerConnectedPlayer.Skin">
            <summary>
            Gets or sets the player's skin.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.ServerConnectedPlayer.SetSkin(OnixRuntime.Api.Entities.PlayerSkin,System.Boolean)">
            <summary>
            Sets the player's skin, optionally only affecting the client.
            </summary>
            <param name="skin">The new player skin.</param>
            <param name="onlyAffectsClient">If true, only affects the client.</param>
        </member>
        <member name="T:OnixRuntime.Api.Entities.ServerPlayer">
            <summary>
            Represents a server-side player entity, providing server-specific player functionality.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Entities.ServerPlayer.SendChatMessage(System.String,OnixRuntime.Api.UI.ChatMessageType,System.String)">
            <summary>
            Sends a chat message to the player.
            </summary>
            <param name="message">The message to send.</param>
            <param name="type">The type of chat message.</param>
            <param name="authorName">Optional author name for the message.</param>
        </member>
        <member name="T:OnixRuntime.Api.Errors.OnixRuntimeErrorCode">
            <summary>
            Error codes used by the Onix Runtime to indicate specific runtime errors.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler">
            <summary>
            Handles error reporting and exception throwing for the Onix Runtime.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.RaiseError(System.String)">
            <summary>
            Raises an error with the specified message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.LogError(OnixRuntime.Api.Logger.Level,System.String)">
            <summary>
            Logs an error with the specified message and severity level, then raises the error.
            </summary>
            <param name="level">The severity level of the error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.RaiseException(System.Exception)">
            <summary>
            Raises an error for an unhandled exception.
            </summary>
            <param name="e">The exception to report.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.LogException(OnixRuntime.Api.Logger.Level,System.Exception)">
            <summary>
            Logs an error for an unhandled exception with a severity level, then raises the error.
            </summary>
            <param name="level">The severity level of the error.</param>
            <param name="e">The exception to report.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.RaiseException(System.Exception,OnixRuntime.Plugin.OnixPluginInstance)">
            <summary>
            Raises an error for an unhandled exception in a specific plugin instance.
            </summary>
            <param name="e">The exception to report.</param>
            <param name="plugin">The plugin instance.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.LogException(OnixRuntime.Api.Logger.Level,System.Exception,OnixRuntime.Plugin.OnixPluginInstance)">
            <summary>
            Logs an error for an unhandled exception in a specific plugin instance with a severity level, then raises the error.
            </summary>
            <param name="level">The severity level of the error.</param>
            <param name="e">The exception to report.</param>
            <param name="plugin">The plugin instance.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.RaiseException(System.Exception,OnixRuntime.Plugin.OnixPluginBase)">
            <summary>
            Raises an error for an unhandled exception in a specific plugin base.
            </summary>
            <param name="e">The exception to report.</param>
            <param name="plugin">The plugin base.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.LogException(OnixRuntime.Api.Logger.Level,System.Exception,OnixRuntime.Plugin.OnixPluginBase)">
            <summary>
            Logs an error for an unhandled exception in a specific plugin base with a severity level, then raises the error.
            </summary>
            <param name="level">The severity level of the error.</param>
            <param name="e">The exception to report.</param>
            <param name="plugin">The plugin base.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.RaiseException(System.Exception,System.Delegate)">
            <summary>
            Raises an error for an unhandled exception in a delegate context.
            </summary>
            <param name="e">The exception to report.</param>
            <param name="d">The delegate context.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.LogException(OnixRuntime.Api.Logger.Level,System.Exception,System.Delegate)">
            <summary>
            Logs an error for an unhandled exception in a delegate context with a severity level, then raises the error.
            </summary>
            <param name="level">The severity level of the error.</param>
            <param name="e">The exception to report.</param>
            <param name="d">The delegate context.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.RaiseError(System.String,System.String)">
            <summary>
            Raises an error with a short and long message.
            </summary>
            <param name="shortMessage">The short error message.</param>
            <param name="longMessage">The detailed error message.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.LogError(OnixRuntime.Api.Logger.Level,System.String,System.String)">
            <summary>
            Logs an error with a short and long message and severity level, then raises the error.
            </summary>
            <param name="level">The severity level of the error.</param>
            <param name="shortMessage">The short error message.</param>
            <param name="longMessage">The detailed error message.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.GetLastErrorCode">
            <summary>
            Gets the last error code from the runtime.
            </summary>
            <returns>The last <see cref="T:OnixRuntime.Api.Errors.OnixRuntimeErrorCode"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.SetCurrentTrustContext(System.Boolean)">
            <summary>
            Sets the current trust context for the runtime.
            </summary>
            <param name="trusted">True to set as trusted, false otherwise.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.Init(System.Collections.Generic.SortedDictionary{System.String,System.IntPtr})">
            <summary>
            Initializes the error handler with function pointers from the runtime.
            </summary>
            <param name="functions">A dictionary of function names to pointers.</param>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.Throw(OnixRuntime.Api.Errors.OnixRuntimeErrorCode)">
            <summary>
            Throws the corresponding exception for the given error code.
            </summary>
            <param name="code">The error code.</param>
            <remarks>Throws an exception if the code is not <see cref="F:OnixRuntime.Api.Errors.OnixRuntimeErrorCode.None"/>.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown for various Onix runtime errors.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeErrorHandler.ThrowLast">
            <summary>
            Throws the last error as an exception.
            </summary>
            <remarks>Throws an exception if the last error code is not <see cref="F:OnixRuntime.Api.Errors.OnixRuntimeErrorCode.None"/>.</remarks>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">Thrown for various Onix runtime errors.</exception>
        </member>
        <member name="T:OnixRuntime.Api.Errors.OnixRuntimeException">
            <summary>
            Base exception for Onix Runtime errors.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OnixRuntimeException.#ctor(System.String)">
            <summary>
            Base exception for Onix Runtime errors.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.ThreadTypeMismatchException">
            <summary>
            Thrown when an operation is performed on the wrong thread type.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.ThreadTypeMismatchException.#ctor">
            <summary>
            Thrown when an operation is performed on the wrong thread type.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.OperatorPrivilegeRequiredException">
            <summary>
            Thrown when operator privileges are required for an operation.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OperatorPrivilegeRequiredException.#ctor">
            <summary>
            Thrown when operator privileges are required for an operation.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.CheatsModeRequiredException">
            <summary>
            Thrown when cheats mode is required for an operation.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.CheatsModeRequiredException.#ctor">
            <summary>
            Thrown when cheats mode is required for an operation.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.OperatorOrCheatsModeRequiredException">
            <summary>
            Thrown when operator or cheats mode is required for an operation.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.OperatorOrCheatsModeRequiredException.#ctor">
            <summary>
            Thrown when operator or cheats mode is required for an operation.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.RequiresGameLogicThreadException">
            <summary>
            Thrown when an operation requires the game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.RequiresGameLogicThreadException.#ctor">
            <summary>
            Thrown when an operation requires the game logic thread.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.RequiresRenderThreadAndEventException">
            <summary>
            Thrown when an operation requires the render thread and event.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.RequiresRenderThreadAndEventException.#ctor">
            <summary>
            Thrown when an operation requires the render thread and event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.RequiresWorldRenderThreadAndEventException">
            <summary>
            Thrown when an operation requires the world render thread and event.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.RequiresWorldRenderThreadAndEventException.#ctor">
            <summary>
            Thrown when an operation requires the world render thread and event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.ServerOnlyObjectException">
            <summary>
            Thrown when a server-only object is used from the client thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.ServerOnlyObjectException.#ctor">
            <summary>
            Thrown when a server-only object is used from the client thread.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.ClientOnlyObjectException">
            <summary>
            Thrown when a client-only object is used from the server thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.ClientOnlyObjectException.#ctor">
            <summary>
            Thrown when a client-only object is used from the server thread.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.NotInRuntimeWorldException">
            <summary>
            Thrown when an operation is performed outside of a runtime world.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.NotInRuntimeWorldException.#ctor">
            <summary>
            Thrown when an operation is performed outside of a runtime world.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.RequiresDirect2DEventException">
            <summary>
            Thrown when an operation requires a Direct2D event.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.RequiresDirect2DEventException.#ctor">
            <summary>
            Thrown when an operation requires a Direct2D event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.NotClientGameTickEventException">
            <summary>
            Thrown when an operation requires a client game tick event.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.NotClientGameTickEventException.#ctor">
            <summary>
            Thrown when an operation requires a client game tick event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.NotServerGameTickEventException">
            <summary>
            Thrown when an operation requires a server game tick event.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.NotServerGameTickEventException.#ctor">
            <summary>
            Thrown when an operation requires a server game tick event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.NotServerThreadException">
            <summary>
            Thrown when an operation requires the server thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.NotServerThreadException.#ctor">
            <summary>
            Thrown when an operation requires the server thread.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.NotClientThreadException">
            <summary>
            Thrown when an operation requires the client logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.NotClientThreadException.#ctor">
            <summary>
            Thrown when an operation requires the client logic thread.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.InsufficientTrustException">
            <summary>
            Thrown when the trust level is insufficient for the operation.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.InsufficientTrustException.#ctor">
            <summary>
            Thrown when the trust level is insufficient for the operation.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.NotGameMovementTickCallbackException">
            <summary>
            Thrown when an operation requires a game movement tick callback.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.NotGameMovementTickCallbackException.#ctor">
            <summary>
            Thrown when an operation requires a game movement tick callback.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Errors.InvalidJsonDataProvidedException">
            <summary>
            Thrown when invalid JSON data is provided.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Errors.InvalidJsonDataProvidedException.#ctor">
            <summary>
            Thrown when invalid JSON data is provided.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerNative">
            <summary>
            Native event handler class for local server events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer">
            <summary>
            Provides events for local server tick and player chat events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer.OnTickDelegate">
            <summary>
            Delegate for handling local server tick events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer.Tick">
            <summary>
            Occurs every tick on the local server.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer.OnPlayerChat">
            <summary>
            Delegate for handling player chat events on the local server.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer.PlayerChatEvent">
            <summary>
            Occurs when a player sends a chat message on the local server.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer.Player">
            <summary>
            Provides access to player-related local server events.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServer.World">
            <summary>
            Provides access to world-related local server events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer">
            <summary>
            Provides events for local server player actions such as breaking, building, using items, and interacting with entities.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerStartBreakBlockDelegate">
            <summary>
            Delegate for handling when a player starts breaking a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.StartBreakBlock">
            <summary>
            Occurs when a player starts breaking a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerBreakBlockDelegate">
            <summary>
            Delegate for handling when a player breaks a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.BreakBlock">
            <summary>
            Occurs when a player breaks a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerBuildBlockDelegate">
            <summary>
            Delegate for handling when a player builds a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.BuildBlock">
            <summary>
            Occurs when a player builds a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemDelegate">
            <summary>
            Delegate for handling when a player uses an item.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.UseItem">
            <summary>
            Occurs when a player uses an item.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerUseItemOnDelegate">
            <summary>
            Delegate for handling when a player uses an item on a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.UseItemOn">
            <summary>
            Occurs when a player uses an item on a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerInteractDelegate">
            <summary>
            Delegate for handling when a player interacts with an entity.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.Interact">
            <summary>
            Occurs when a player interacts with an entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerAttackDelegate">
            <summary>
            Delegate for handling when a player attacks an entity.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.Attack">
            <summary>
            Occurs when a player attacks an entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.OnLocalServerPlayerStopUsingItemDelegate">
            <summary>
            Delegate for handling when a player stops using an item.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.LocalServer.OnixEventLocalServerPlayer.StopUsingItem">
            <summary>
            Occurs when a player stops using an item.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventLocalServerWorldNative">
            <summary>
            Native event handler class for generic game events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventLocalServerWorld">
            <summary>
            The class hosting the local server events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventLocalServerWorld.OnBlockChangedDelegate">
            <summary>
            Delegate that is invoked whenever a block in the world changes. 
            Provides context about the region, position, old and new blocks, 
            as well as how the change should be propagated and rendered.
            </summary>
            <param name="region">The <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> that did the change./// </param>
            <param name="position">The <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> of the block that was modified.</param>
            <param name="oldBlock">The <see cref="T:OnixRuntime.Api.World.Block"/> instance that previously occupied the position.</param>
            <param name="newBlock">The <see cref="T:OnixRuntime.Api.World.Block"/> instance that replaced the old block.</param>
            <param name="layer">The layer, there are two layers. 0 is the main layer, 1 is generally used for waterlogging and things snow layers merging with some plants.</param>
            <param name="updateType">A <see cref="T:OnixRuntime.Api.World.WorldBlocks.BlockUpdateType"/> flag that specifies how the update should be handled, such as updating neighbors, notifying the network, skipping graphics updates, or forcing priority updates.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventLocalServerWorld.BlockChanged">
            <summary>
            This is called when a block on the client side has been changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventLocalServerWorld.OnAreaChangedDelegate">
            <summary>
            Delegate that is invoked whenever an area in the world changes.
            </summary>
            <param name="region">The <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> that is responsible.</param>
            <param name="beginPos">The first position of the area that changed.</param>
            <param name="endPos">The end position of the area that changed.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventLocalServerWorld.AreaChanged">
            <summary>
            This is called when an area in the world has been changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventAudioNative">
            <summary>
            Native event handler class for GUI events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventAudio">
            <summary>
            Provides events for client audio related things.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventAudio.OnSoundPlayedInWorldDelegate">
            <summary>
            Called when a sound is played in the world.
            </summary>
            <param name="sound">The name of the sound that was played.</param>
            <param name="position">The position in the world where the sound was played.</param>
            <param name="volume">The volume of the sound.</param>
            <param name="pitch">The pitch of the sound.</param>
            <returns>True when you want the sound to be canceled.</returns>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventAudio.SoundPlayedInWorld">
            <summary>
            Called when a sound is played in the world.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventAudio.OnSoundPlayedInUiDelegate">
            <summary>
            Called when a sound is played in the UI.
            </summary>
            <param name="sound">The name of the sound that was played.</param>
            <param name="volume">The volume of the sound.</param>
            <param name="pitch">The pitch of the sound.</param>
            <returns>True when you want the sound to be canceled.</returns>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventAudio.SoundPlayedInUi">
            <summary>
            Called when a sound is played in the UI.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventCommon">
            <summary>
            Provides common event hooks for tick, rendering, input, and chat message events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.Tick">
            <summary>
            Occurs every game tick.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.HudRender">
            <summary>
            Occurs when the HUD is rendered on the user's preferred renderer.
            This may or may not be a logic callback so don't access game state, entities, etc.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.HudRenderGame">
            <summary>
            Occurs when the HUD is rendered by the game.
            This will be a logic callback so you can access game state, entities, etc.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.WorldRender">
            <summary>
            Occurs when the world is rendered.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.HudRenderDirect2D">
            <summary>
            Occurs when the HUD is rendered using Direct2D.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.HudInput">
            <summary>
            Occurs when HUD input is received.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventCommon.ChatMessage">
            <summary>
            Occurs when a chat message is received.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGameNative">
            <summary>
            Native event handler class for generic game events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGame">
            <summary>
            Provides game-related events (URI invocations, etc.).
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGame.OnUriInvokedRawDelegate">
            <summary>
            The raw uri that was invoked e.g. "minecraft://openServersTab"
            When implementing your own uri handlers you should use <see cref="E:OnixRuntime.Api.Events.OnixEventGame.UriInvoked"/>.
            </summary>
            <param name="rawUri"></param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGame.UriInvokedRaw">
            <summary>
            The raw uri that was invoked e.g. "minecraft://openServersTab"
            When implementing your own uri handlers you should use <see cref="E:OnixRuntime.Api.Events.OnixEventGame.UriInvoked"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGame.OnUriInvokedDelegate">
            <summary>
            Called when a URI is invoked. specific to plugins. Not logic safe.
            The plugin uri that was invoked, the format goes as follows.
            minecraft://plugin.onixclient.com/{verb}?{key}={value}&amp;{myKey}={myValue}
            You should use this whenever possible to make it clear it's for plugins and avoid conflicts if you're implementing custom ones.
            </summary>
            <param name="verb">The verb that was invoked. what goes after minecraft://verb/</param>
            <param name="parameters">The key-value parameters that were passed to the URI.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGame.UriInvoked">
            <summary>
            Called when a URI is invoked. specific to plugins. Not logic safe.
            The plugin uri that was invoked, the format goes as follows.
            minecraft://plugin.onixclient.com/{verb}?{key}={value}&amp;{myKey}={myValue}
            You should use this whenever possible to make it clear it's for plugins and avoid conflicts if you're implementing custom ones.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGuiNative">
            <summary>
            Native event handler class for GUI events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGuiNative.AddClientCommandToListDelegate">
            <summary>
            Delegate for adding a client command to the chat screen command list.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGui">
            <summary>
            Provides events for GUI screens such as container screens and chat screens.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGui.OnContainerScreenTickDelegate">
            <summary>
            Delegate for handling container screen tick events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGui.ContainerScreenTick">
            <summary>
            Occurs every tick while a container screen is open.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGui.OnChatScreenTickDelegate">
            <summary>
            Delegate for handling chat screen tick events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGui.ChatScreenTick">
            <summary>
            Occurs every tick while the chat screen is open.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGui.OnChatScreenTabCompleteDelegate">
            <summary>
            Delegate for handling chat screen tab completion events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGui.ChatScreenTabComplete">
            <summary>
            Occurs when the user requests tab completion in the chat screen.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGui.OnChatScreenGetClientCommandsDelegate">
            <summary>
            Delegate for handling requests to get client chat commands.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGui.ChatScreenGetClientCommands">
            <summary>
            Occurs when the chat screen requests the list of available client commands.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventGui.OnContainerScreenHoverTextRequestedDelegate">
            <summary>
            Represents a method that is called to retrieve the hover text for a container screen when an item is hovered
            over. You can change or replace the text however you want, return the text that will be shown to the user.
            If you have no changes to make, you should return <paramref name="text"/>
            DO NOT USE <see cref="M:OnixRuntime.Api.Items.ItemStack.GetHoverText(OnixRuntime.Api.World.RuntimeWorld,System.Boolean,System.Boolean)"/> or <see cref="M:OnixRuntime.Api.Items.ItemStack.GetHoverText(System.Boolean,System.Boolean)"/> unless you set vanilla to true. Otherwise, you will get infinite recursion.
            </summary>
            <param name="item">The <see cref="T:OnixRuntime.Api.Items.ItemStack"/> representing the item being hovered over. This parameter cannot be <see
            langword="null"/>.</param>
            <param name="text">The current text of the item, changed by the ones who got it before you.</param>
            <returns>A <see cref="T:System.String"/> that will be put as is in the hover text. If you don't wish to modify the text, return <paramref name="text"/></returns>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventGui.ContainerScreenHoverTextRequested">
            <summary>
            Occurs when the user hovers over an item in a container screen and the game requests the hover text to show.
            Technically it could happen at any time if a plugin or the client requests it in a different context but oh well, that's not an issue.
            DO NOT USE <see cref="M:OnixRuntime.Api.Items.ItemStack.GetHoverText(OnixRuntime.Api.World.RuntimeWorld,System.Boolean,System.Boolean)"/> or <see cref="M:OnixRuntime.Api.Items.ItemStack.GetHoverText(System.Boolean,System.Boolean)"/> unless you set vanilla to true. Otherwise, you will get infinite recursion.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputsNative">
            <summary>
            Native event handler class for input events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputsNative.OnInputEventCallbackDelegate">
            <summary>
            Delegate for handling input event callbacks.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputsNative.OnShouldCancelAnalogMovementEventCallbackDelegate">
            <summary>
            Delegate for handling analog movement cancellation event callbacks.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputsNative.OnPlayerInputTickEventCallbackDelegate">
            <summary>
            Delegate for handling player input tick event callbacks.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputsNative.OnTextCharEventCallbackDelegate">
            <summary>
            Delegate for handling text character event callbacks.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputsNative.OnInputResetEventCallbackDelegate">
            <summary>
            Delegate for handling input reset event callbacks.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs">
            <summary>
            Provides events for input actions, analog movement, player input ticks, text input, and input reset.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs.OnInputDelegate">
            <summary>
            Delegate for handling input events (keyboard, mouse, etc.).
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.Input">
            <summary>
            Occurs when an input event is received.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.InputHud">
            <summary>
            Occurs when a HUD input event is received.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs.OnShouldCancelAnalogMovementDelegate">
            <summary>
            Delegate for handling analog movement cancellation events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.ShouldCancelAnalogMovement">
            <summary>
            Occurs when analog movement should be cancelled.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs.OnPlayerInputTickDelegate">
            <summary>
            Delegate for handling player input tick events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.PlayerInputTick">
            <summary>
            Occurs every tick with the player's movement inputs.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs.OnTextCharDelegate">
            <summary>
            Delegate for handling text character input events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.TextChar">
            <summary>
            Occurs when a text character is input.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs.OnRawTextCharDelegate">
            <summary>
            Delegate for handling raw text character input events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.RawTextChar">
            <summary>
            Occurs when a raw text character input event is received.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventInputs.OnInputResetDelegate">
            <summary>
            Delegate for handling input reset events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventInputs.InputReset">
            <summary>
            Occurs when input is reset.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer">
            <summary>
            Provides events for local player actions such as breaking, building, using items, and interacting with entities.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerStartBreakBlockDelegate">
            <summary>
            Delegate for handling when a player starts breaking a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.StartBreakBlock">
            <summary>
            Occurs when a player starts breaking a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerBreakBlockDelegate">
            <summary>
            Delegate for handling when a player breaks a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.BreakBlock">
            <summary>
            Occurs when a player breaks a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerBuildBlockDelegate">
            <summary>
            Delegate for handling when a player builds a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.BuildBlock">
            <summary>
            Occurs when a player builds a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerUseItemDelegate">
            <summary>
            Delegate for handling when a player uses an item.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.UseItem">
            <summary>
            Occurs when a player uses an item.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerUseItemOnDelegate">
            <summary>
            Delegate for handling when a player uses an item on a block.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.UseItemOn">
            <summary>
            Occurs when a player uses an item on a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerInteractDelegate">
            <summary>
            Delegate for handling when a player interacts with an entity.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.Interact">
            <summary>
            Occurs when a player interacts with an entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerAttackDelegate">
            <summary>
            Delegate for handling when a player attacks an entity.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.Attack">
            <summary>
            Occurs when a player attacks an entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventPlayer.OnLocalServerPlayerStopUsingItemDelegate">
            <summary>
            Delegate for handling when a player stops using an item.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventPlayer.StopUsingItem">
            <summary>
            Occurs when a player stops using an item.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRenderingNative">
            <summary>
            Native event handler class for rendering events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering">
            <summary>
            Provides rendering-related events (world, HUD, screen rendering, 2D/Direct2D hooks).
            Subscribe to the events to receive renderer objects and timing deltas.
            Handlers are invoked with an appropriate renderer instance depending on the current rendering backend.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnWorldRenderDelegate">
            <summary>
            Called when the world (3D) should be rendered. Logic-safe: game state and entities are available.
            </summary>
            <param name="gfx">The 3D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.WorldRender">
            <summary>
            Occurs when the world (3D) should be rendered. Handlers receive a RendererWorld and the frame delta.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnWorldRender(System.Single)">
            <summary>
            Raises the WorldRender event. Internal; called by native interop.
            Ensures renderer state is properly reset before and after invoking handlers.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnHudRenderDelegate">
            <summary>
            Called when HUD should be rendered via the game's renderer. Logic-safe: game state and entities are available.
            </summary>
            <param name="gfx">The 3D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnHudRender2DDelegate">
            <summary>
            This event is called when on hud, hide hud is false and there is no client UI screen opened.
            This will be called from the user's preferred 2D renderer.
            This may or may not be a logic callback so don't access game state, entities, etc.
            </summary>
            <param name="gfx">The 2D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.HudRenderGame">
            <summary>
            Called when HUD should be rendered via the game's renderer. Logic-safe: game state and entities are available.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.HudRender">
            <summary>
            This event is called when on hud, hide hud is false and there is no client UI screen opened.
            This will be called from the user's preferred 2D renderer.
            This may or may not be a logic callback so don't access game state, entities, etc.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnHudRender(System.Single)">
            <summary>
            Internal: raises HUD render events and forwards to 2D HUD rendering when appropriate.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnHud2DRender(OnixRuntime.Api.Rendering.RendererCommon2D,System.Single)">
            <summary>
            Internal: raises 2D HUD render callbacks with the provided common 2D renderer.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreenDelegate">
            <summary>
            This event is called all the time. (always logic-safe)
            This is a logic callback so you can access game state, entities, etc.
            </summary>
            <param name="gfx">The 2D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
            <param name="screenName">The name of the screen being rendered.</param>
            <param name="isHudHidden">Whether the HUD is hidden.</param>
            <param name="isClientUI">Whether the UI is for the client.</param>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreen2DDelegate">
            <summary>
            This event is called all the time.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.HudRender"/> gives you what you need.
            This will be called from the user's preferred 2D renderer.
            This may or may not be a logic callback so don't access game state, entities, etc.
            There is no PreRenderScreen2D event, because depending on the renderer, pre means different things.
            You can handle this case manually by checking the different pre events and <see cref="P:OnixRuntime.Api.Rendering.RenderContexes.MainRenderer"/>.
            </summary>
            <param name="gfx">The 2D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
            <param name="screenName">The name of the screen being rendered.</param>
            <param name="isHudHidden">Whether the HUD is hidden.</param>
            <param name="isClientUI">Whether the UI is for the client.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.RenderScreenGame">
            <summary>
            This event is called all the time. (always logic-safe)
            This is a logic callback so you can access game state, entities, etc.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.RenderScreen">
            <summary>
            This event is called all the time.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.HudRender"/> gives you what you need.
            This will be called from the user's preferred 2D renderer.
            This may or may not be a logic callback so don't access game state, entities, etc.
            There is no PreRenderScreen2D event, because depending on the renderer, pre means different things.
            You can handle this case manually by checking the different pre events and <see cref="P:OnixRuntime.Api.Rendering.RenderContexes.MainRenderer"/>.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnRenderScreen(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Internal: called by native interop to raise screen render events. Also triggers HUD rendering if appropriate.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnRenderScreen2D(OnixRuntime.Api.Rendering.RendererCommon2D,System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Internal: raises 2D render callbacks for a screen.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnPreRenderScreenDelegate">
            <summary>
            Delegate for the game's rendering callbacks (always logic-safe).
            </summary>
            <param name="gfx">The Game renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
            <param name="screenName">The name of the screen being rendered.</param>
            <param name="isHudHidden">Whether the HUD is hidden.</param>
            <param name="isClientUI">Whether the UI is for the client.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.PreRenderScreenGame">
            <summary>
            This event is called all the time. The Pre is before the client AND game's screens are rendered.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.HudRenderGame"/> gives you what you need.
            debug_screen should always be there if you want to pick that one, otherwise you can ignore debug_screen and toast_screen to have just the main screen.
            This is a logic callback so you can access game state, entities, etc.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnPreRenderScreen(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Internal: raises pre-render screen events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnRenderHudDirect2DDelegate">
            <summary>
            This event is called when on hud, hide hud is false and there is no client UI screen opened.
            This will be called from the user's preferred 2D renderer.
            This will never be a logic callback so don't access game state, entities, etc.
            </summary>
            <param name="gfx">The Direct2D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.RenderHudDirect2D">
            <summary>
            This event is called when on hud, hide hud is false and there is no client UI screen opened.
            This will be called from the user's preferred 2D renderer.
            This will never be a logic callback so don't access game state, entities, etc.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnRenderHudDirect2D(System.Single)">
            <summary>
            Internal: raises Direct2D HUD render callbacks.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnRenderScreenDirect2DDelegate">
            <summary>
            This event is called all the time.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.RenderHudDirect2D"/> gives you what you need.
            This will never be a logic callback so don't access game state, entities, etc.
            </summary>
            <param name="gfx">The Direct2D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
            <param name="screenName">The name of the screen being rendered.</param>
            <param name="isHudHidden">Whether the HUD is hidden.</param>
            <param name="isClientUI">Whether the UI is for the client.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.RenderScreenDirect2D">
            <summary>
            This event is called all the time.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.RenderHudDirect2D"/> gives you what you need.
            This will never be a logic callback so don't access game state, entities, etc.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnRenderScreenDirect2D(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Internal: raises Direct2D per-screen events and forwards to 2D screen rendering when appropriate.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.OnPreRenderScreenDirect2DDelegate">
            <summary>
            This event is called all the time. The Pre is before the client's screens are rendered, not the game's.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.RenderHudDirect2D"/> gives you what you need.
            debug_screen should always be there if you want to pick that one, otherwise you can ignore debug_screen and toast_screen to have just the main screen.
            This will never be a logic callback so don't access game state, entities, etc.
            </summary>
            <param name="gfx">The Direct2D renderer instance.</param>
            <param name="delta">The time delta since the last frame.</param>
            <param name="screenName">The name of the screen being rendered.</param>
            <param name="isHudHidden">Whether the HUD is hidden.</param>
            <param name="isClientUI">Whether the UI is for the client.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.PreRenderScreenDirect2D">
            <summary>
            This event is called all the time. The Pre is before the client's screens are rendered, not the game's.
            You should avoid this if <see cref="E:OnixRuntime.Api.Events.OnixEventRendering.RenderHudDirect2D"/> gives you what you need.
            debug_screen should always be there if you want to pick that one, otherwise you can ignore debug_screen and toast_screen to have just the main screen.
            This will never be a logic callback so don't access game state, entities, etc.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseOnPreRenderScreenDirect2D(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Internal: raises Direct2D pre-render callbacks and possibly HUD 2D rendering.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventRendering.ShouldHideScreenDelegate">
            <summary>
            This is only for game screens, returning true will prevent that screen from rendering.
            Delegate used to determine whether a given game screen should be hidden.
            Return true to prevent rendering of that screen.
            </summary>
            <param name="screenName">The name of the screen that just want to render itself.</param>
            <returns>True if the screen should be hidden, false otherwise.</returns>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventRendering.ShouldHideScreen">
            <summary>
            This is only for game screens, returning true will prevent that screen from rendering.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.OnixEventRendering.RaiseShouldNotRenderScreen(System.String)">
            <summary>
            Internal: queries ShouldHideScreen handlers and returns true if any handler requested hiding the screen.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEvents">
            <summary>
            Root container for all Onix event groups. Provides typed access to
            each domain of events (session, rendering, input, GUI, game, etc.).
            Instantiate once and subscribe to the specific event group(s) you need.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Session">
            <summary>
            Events related to the current session, like joining, leaving and many more.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.LocalServer">
            <summary>
            Similar to this for events originating from the local server.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Rendering">
            <summary>
            Rendering related events.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Input">
            <summary>
            Input events (keyboard, mouse, controller, moving around)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Gui">
            <summary>
            GUI related events.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Game">
            <summary>
            Generic game related events.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Audio">
            <summary>
            Audio events, like sounds being played.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Common">
            <summary>
            Commonly used events.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.Player">
            <summary>
            Player-specific events, specifically the local player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEvents.World">
            <summary>
            World and environment events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventsSession">
            <summary>
            Provides events for session tick, join, leave, and game pause/resume.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEventsSession.Title">
            <summary>
            Provides events for handling title changes in a session.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEventsSession.ModalForm">
            <summary>
            Provides events for handling modal forms in a session.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.OnixEventsSession.Chat">
            <summary>
            Provides events for handling chat messages in a session.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventsSession.OnTickDelegate">
            <summary>
            Delegate for handling game tick events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventsSession.Tick">
            <summary>
            Occurs every game tick.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventsSession.OnSessionLeftDelegate">
            <summary>
            Delegate for handling leave events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventsSession.SessionLeft">
            <summary>
            Occurs when the session leaves a world.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventsSession.OnDimensionChangedDelegate">
            <summary>
            Delegate for handling dimension change events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventsSession.DimensionChanged">
            <summary>
            Occurs when the dimension changes.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventsSession.OnSessionJoinedDelegate">
            <summary>
            Delegate for handling join events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventsSession.SessionJoined">
            <summary>
            Note: This event will be called after you start listening to it or when you get enabled even if the world was not just joined.
            That means you can rely on it to know when the player is in a world.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventWorldNative">
            <summary>
            Native event handler class for generic game events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventWorld">
            <summary>
            Provides events for handling world-related actions.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventWorld.OnBlockChangedDelegate">
            <summary>
            Delegate that is invoked whenever a block in the world changes. 
            Provides context about the region, position, old and new blocks, 
            as well as how the change should be propagated and rendered.
            </summary>
            <param name="region">The <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> that did the change./// </param>
            <param name="position">The <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> of the block that was modified.</param>
            <param name="oldBlock">The <see cref="T:OnixRuntime.Api.World.Block"/> instance that previously occupied the position.</param>
            <param name="newBlock">The <see cref="T:OnixRuntime.Api.World.Block"/> instance that replaced the old block.</param>
            <param name="layer">The layer, there are two layers. 0 is the main layer, 1 is generally used for waterlogging and things snow layers merging with some plants.</param>
            <param name="updateType">A <see cref="T:OnixRuntime.Api.World.WorldBlocks.BlockUpdateType"/> flag that specifies how the update should be handled, such as updating neighbors, notifying the network, skipping graphics updates, or forcing priority updates.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventWorld.BlockChanged">
            <summary>
            This is called when a block on the client side has been changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.OnixEventWorld.OnAreaChangedDelegate">
            <summary>
            Delegate that is invoked whenever an area in the world changes.
            </summary>
            <param name="region">The <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> that is responsible.</param>
            <param name="beginPos">The first position of the area that changed.</param>
            <param name="endPos">The end position of the area that changed.</param>
        </member>
        <member name="E:OnixRuntime.Api.Events.OnixEventWorld.AreaChanged">
            <summary>
            This is called when an area in the world has been changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionChatNative">
            <summary>
            Native event handler class for session chat events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionChat">
            <summary>
            Provides events for chat message receiving, sending, and command sending in a session.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnReceiveDelegate">
            <summary>
            Delegate for handling chat message receive events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionChat.Receive">
            <summary>
            Occurs when a chat message is received.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.Session.OnixEventSessionChat.RaiseOnReceive(System.String,System.String,System.String,OnixRuntime.Api.UI.ChatMessageType)">
            <summary>
            Raises the Receive event for chat messages.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnChatScreenMessageAboutToBeSentDelegate">
            <summary>
            Delegate for handling chat message about to be sent events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionChat.ChatScreenMessageAboutToBeSent">
            <summary>
            return the message to sent (return what you're given essentially) or "" to cancel sending the message.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnSendMessageDelegate">
            <summary>
            Delegate for handling chat message send events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionChat.Send">
            <summary>
            Occurs when a chat message is sent.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.Session.OnixEventSessionChat.RaiseOnSendMessage(System.String)">
            <summary>
            Raises the Send event for chat messages.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionChat.OnSendCommandDelegate">
            <summary>
            Delegate for handling chat command send events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionChat.SendCommand">
            <summary>
            Occurs when a chat command is sent.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.Session.OnixEventSessionChat.RaiseOnSendCommand(System.String)">
            <summary>
            Raises the SendCommand event for chat commands.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionModalFormsNative">
            <summary>
            Native event handler class for modal form events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.IModalFormReplyer">
            <summary>
            Represents a replyer for modal form events, providing form ID, response JSON, and reply status.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.IModalFormReplyer.FormId">
            <summary>
            Gets the form ID associated with the modal form.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.IModalFormReplyer.ResponseJson">
            <summary>
            Gets the response JSON for the modal form.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.IModalFormReplyer.HasBeenRepliedAlready">
            <summary>
            Gets whether the form has already been replied to.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.ModalFormReplyer">
            <summary>
            Implements IModalFormReplyer for modal form requests.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.ModalFormReplyer.FormId">
            <inheritdoc/>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.ModalFormReplyer.ResponseJson">
            <inheritdoc/>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.ModalFormReplyer.HasBeenRepliedAlready">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.RawModalFormReplyer">
            <summary>
            Implements IModalFormReplyer for modal form responses.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.RawModalFormReplyer.FormId">
            <inheritdoc/>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.RawModalFormReplyer.ResponseJson">
            <inheritdoc/>
        </member>
        <member name="P:OnixRuntime.Api.Events.Session.RawModalFormReplyer.HasBeenRepliedAlready">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms">
            <summary>
            Provides events for modal form requests and responses in a session.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.OnRawModalFormRequestDelegate">
            <summary>
            Delegate for handling raw modal form request events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.RawModalFormRequest">
            <summary>
            Occurs when a raw modal form request is received.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.RaiseOnRawModalFormRequest(System.UInt32,System.String)">
            <summary>
            Raises the RawModalFormRequest event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.OnRawModalFormResponseDelegate">
            <summary>
            Delegate for handling raw modal form response events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.RawModalFormResponse">
            <summary>
            Occurs when a raw modal form response is received.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.Session.OnixEventSessionModalForms.RaiseOnRawModalFormResponse(System.UInt32,System.String)">
            <summary>
            Raises the RawModalFormResponse event.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitleNative">
            <summary>
            Native event handler class for title events. Handles interop callbacks from the native runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.GameTitleType">
            <summary>
            Types of game titles that can be displayed to the player.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Events.Session.GameTitleType.Clear">
            <summary>
            Clears the title.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Events.Session.GameTitleType.Reset">
            <summary>
            Resets the title.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Events.Session.GameTitleType.Title">
            <summary>
            The main title of the game.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Events.Session.GameTitleType.Subtitle">
            <summary>
            The subtitle of the game.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Events.Session.GameTitleType.Actionbar">
            <summary>
            The action bar title of the game.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Events.Session.GameTitleType.Times">
            <summary>
            The timing information for the title.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle">
            <summary>
            Provides events for handling title, subtitle, actionbar, and timing changes in a session.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnAnyTitleChangedDelegate">
            <summary>
            Delegate for handling any title change event.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.AnyTitleChanged">
            <summary>
            Occurs when any title, subtitle, or actionbar is changed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.RaiseOnAnyTitleChanged(OnixRuntime.Api.Events.Session.GameTitleType,System.String)">
            <summary>
            Raises the AnyTitleChanged event and dispatches to specific title events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTitleChangedDelegate">
            <summary>
            Delegate for handling title change events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.Title">
            <summary>
            Occurs when the main title is changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnSubtitleChangedDelegate">
            <summary>
            Delegate for handling subtitle change events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.Subtitle">
            <summary>
            Occurs when the subtitle is changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnActionBarChangedDelegate">
            <summary>
            Delegate for handling actionbar change events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.ActionBar">
            <summary>
            Occurs when the actionbar is changed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnClearedDelegate">
            <summary>
            Delegate for handling title clear events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.Cleared">
            <summary>
            Occurs when the title is cleared.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnResetDelegate">
            <summary>
            Delegate for handling title reset events.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.Reset">
            <summary>
            Occurs when the title is reset.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTimesTickChangedDelegate">
            <summary>
            Delegate for handling raw title timing change events (in ticks).
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.TimesTickChanged">
            <summary>
            Occurs when the title timing is changed (in ticks).
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.OnTimesChangedDelegate">
            <summary>
            Delegate for handling title timing change events (as TimeSpan).
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.Events.Session.OnixEventSessionTitle.TimesChanged">
            <summary>
            Occurs when the title timing is changed (as TimeSpan).
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.InputMode">
            <summary>
            The different input modes of the game.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.GameInputHandler">
            <summary>
            Handles game input state, including key and controller mappings, and provides methods to query input status.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.GameInputHandler.IsFlying">
            <summary>
            Gets whether the player is currently flying.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.GameInputHandler.CurrentGameplay">
            <summary>
            Gets the current gameplay mode as a string.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.GameInputHandler.KeyboardMapping">
            <summary>
            Gets the current keyboard mapping layout.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.GameInputHandler.ControllerMapping">
            <summary>
            Gets the current controller mapping layout.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.GameInputHandler.IsDown(OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Checks if the specified key is currently pressed down.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.GameInputHandler.IsAnyDown(OnixRuntime.Api.Inputs.InputKey[])">
            <summary>
            Checks if any of the specified keys are currently pressed down.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.GameInputHandler.CurrentInputMode">
            <summary>
            Gets the last known input method of the player, such as mouse, touch, gamepad, or motion controller.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.GameInputHandler.IsAllDown(OnixRuntime.Api.Inputs.InputKey[])">
            <summary>
            Checks if all of the specified keys are currently pressed down.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.InputKey">
            <summary>
            Represents an input key, including keyboard, mouse, and gamepad keys, and provides utility methods for key type conversion and comparison.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.None">
            <summary>
            Represents no input key.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.InputKey.Type">
            <summary>
            Enumerates all possible input key types, including keyboard, mouse, and gamepad keys.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.InputKey.GamepadInputType">
            <summary>
            Enumerates all possible gamepad input types.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.InputKey.ClickType">
            <summary>
            Enumerates all possible mouse click types.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.None">
            <summary>
            No clicks.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.Left">
            <summary>
            Left click button.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.Right">
            <summary>
            Right click button.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.Middle">
            <summary>
            Scroll wheel click.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.Scroll">
            <summary>
            Scroll up or down.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.Back">
            <summary>
            Mouse button 5 in game, back button on the side.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.InputKey.ClickType.Forward">
            <summary>
            Mouse button 6 in game, front button on the side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputKey.Value">
            <summary>
            Gets the key type value for this input key.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputKey.GamepadInput">
            <summary>
            Gets the gamepad input type for this key, if applicable.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputKey.ClickInput">
            <summary>
            Gets the mouse click type for this key, if applicable.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputKey.IsMouse">
            <summary>
            Gets whether this key is a mouse button.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputKey.IsGamepad">
            <summary>
            Gets whether this key is a gamepad button.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.#ctor(OnixRuntime.Api.Inputs.InputKey.GamepadInputType)">
            <summary>
            Initializes a new InputKey from a gamepad input type.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.#ctor(OnixRuntime.Api.Inputs.InputKey.Type)">
            <summary>
            Initializes a new InputKey from a key type.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.#ctor(OnixRuntime.Api.Inputs.InputKey.ClickType)">
            <summary>
            Initializes a new InputKey from a click type.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Implicit(OnixRuntime.Api.Inputs.InputKey.GamepadInputType)~OnixRuntime.Api.Inputs.InputKey">
            <summary>
            Implicitly converts a GamepadInputType to an InputKey.
            </summary>
            <param name="input">The gamepad input type to convert.</param>
            <returns>An InputKey representing the specified gamepad input.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Implicit(OnixRuntime.Api.Inputs.InputKey.Type)~OnixRuntime.Api.Inputs.InputKey">
            <summary>
            Implicitly converts a key Type to an InputKey.
            </summary>
            <param name="input">The key type to convert.</param>
            <returns>An InputKey representing the specified key type.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Implicit(OnixRuntime.Api.Inputs.InputKey.ClickType)~OnixRuntime.Api.Inputs.InputKey">
            <summary>
            Implicitly converts a ClickType to an InputKey.
            </summary>
            <param name="input">The click type to convert.</param>
            <returns>An InputKey representing the specified click type.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Implicit(OnixRuntime.Api.Inputs.InputKey)~OnixRuntime.Api.Inputs.InputKey.GamepadInputType">
            <summary>
            Implicitly converts an InputKey to a GamepadInputType.
            </summary>
            <param name="input">The InputKey to convert.</param>
            <returns>The corresponding GamepadInputType, or None if not a gamepad key.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Implicit(OnixRuntime.Api.Inputs.InputKey)~OnixRuntime.Api.Inputs.InputKey.Type">
            <summary>
            Implicitly converts an InputKey to its key Type.
            </summary>
            <param name="input">The InputKey to convert.</param>
            <returns>The underlying key Type value.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Implicit(OnixRuntime.Api.Inputs.InputKey)~OnixRuntime.Api.Inputs.InputKey.ClickType">
            <summary>
            Implicitly converts an InputKey to a ClickType.
            </summary>
            <param name="input">The InputKey to convert.</param>
            <returns>The corresponding ClickType, or None if not a mouse click.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Equality(OnixRuntime.Api.Inputs.InputKey,OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Compares two InputKey instances for equality.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Inequality(OnixRuntime.Api.Inputs.InputKey,OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Compares two InputKey instances for inequality.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Equality(OnixRuntime.Api.Inputs.InputKey,OnixRuntime.Api.Inputs.InputKey.Type)">
            <summary>
            Compares an InputKey to a key type for equality, with support for modifier key aliases.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Inequality(OnixRuntime.Api.Inputs.InputKey,OnixRuntime.Api.Inputs.InputKey.Type)">
            <summary>
            Compares an InputKey to a key type for inequality.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Equality(OnixRuntime.Api.Inputs.InputKey,OnixRuntime.Api.Inputs.InputKey.GamepadInputType)">
            <summary>
            Compares an InputKey to a gamepad input type for equality.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.op_Inequality(OnixRuntime.Api.Inputs.InputKey,OnixRuntime.Api.Inputs.InputKey.GamepadInputType)">
            <summary>
            Compares an InputKey to a gamepad input type for inequality.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.Equals(System.Object)">
            <summary>
            Determines whether this InputKey is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.GetHashCode">
            <summary>
            Gets the hash code for this InputKey.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputKey.ToString">
            <summary>
            Returns a string representation of this InputKey.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.InputMappingLayout">
            <summary>
            Represents a mapping layout for input actions to keys, supporting both keyboard and controller mappings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Current">
            <summary>
            Gets the current mapping of actions to input keys.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Default">
            <summary>
            Gets the default mapping of actions to input keys.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.IsController">
            <summary>
            Indicates whether this layout is for controller input since in some cases, they have to be handled differently.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.GetKeys(System.String)">
            <summary>
            Gets the input keys currently assigned to the specified action.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.SetKeys(System.String,OnixRuntime.Api.Inputs.InputKey[])">
            <summary>
            Sets the key bindings for a specific input action.
            </summary>
            <param name="action">The name of the input action to rebind (e.g., "jump", "move_forward").</param>
            <param name="keys">The keys to assign to the action. Multiple keys can be provided.</param>
            <returns>If it found the action and replaced the keys. It would only return false if action doesn't exist.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.GetDefaultKeys(System.String)">
            <summary>
            Gets the default input keys assigned to the specified action.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.HasKey(System.String,OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Checks if the specified key is assigned to the given action in the current mapping.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.HasDefaultKey(System.String,OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Checks if the specified key is assigned to the given action in the default mapping.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.IsKeyAssigned(OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Checks if the specified key is assigned to any action in the current mapping.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.IsDefaultKeyAssigned(OnixRuntime.Api.Inputs.InputKey)">
            <summary>
            Checks if the specified key is assigned to any action in the default mapping.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Forward">
            <summary>
            Gets the input keys for the forward action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Back">
            <summary>
            Gets the input keys for the back action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Left">
            <summary>
            Gets the input keys for the left action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Right">
            <summary>
            Gets the input keys for the right action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Jump">
            <summary>
            Gets the input keys for the jump action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Sneak">
            <summary>
            Gets the input keys for the sneak action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Sprint">
            <summary>
            Gets the input keys for the sprint action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Inventory">
            <summary>
            Gets the input keys for the inventory action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Drop">
            <summary>
            Gets the input keys for the drop action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Use">
            <summary>
            Gets the input keys for the use action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Attack">
            <summary>
            Gets the input keys for the attack action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.PickBlock">
            <summary>
            Gets the input keys for the pick block action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Chat">
            <summary>
            Gets the input keys for the chat action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar1">
            <summary>
            Gets the input keys for the first hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar2">
            <summary>
            Gets the input keys for the second hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar3">
            <summary>
            Gets the input keys for the third hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar4">
            <summary>
            Gets the input keys for the fourth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar5">
            <summary>
            Gets the input keys for the fifth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar6">
            <summary>
            Gets the input keys for the sixth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar7">
            <summary>
            Gets the input keys for the seventh hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar8">
            <summary>
            Gets the input keys for the eighth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar9">
            <summary>
            Gets the input keys for the ninth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Hotbar">
            <summary>
            Gets the input keys for all hotbar slots.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.GetHotbar(System.Int32)">
            <summary>
            Gets the input keys for the specified hotbar slot.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.SetHotbar(System.Int32,OnixRuntime.Api.Inputs.InputKey[])">
            <summary>
            Gets the input keys for the specified hotbar slot.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.InputMappingLayout.GetDefaultHotbar(System.Int32)">
            <summary>
            Gets the default input keys for the specified hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.TogglePerspective">
            <summary>
            Gets the input keys for toggling perspective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.MobEffects">
            <summary>
            Gets the input keys for mob effects.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Command">
            <summary>
            Gets the input keys for the command action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.CopyCoordinates">
            <summary>
            Gets the input keys for copying coordinates.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.CopyFacingCoordinates">
            <summary>
            Gets the input keys for copying facing coordinates.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Emote">
            <summary>
            Gets the input keys for the emote action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Screenshot">
            <summary>
            Gets the input keys for taking a screenshot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.MenuTabLeft">
            <summary>
            Gets the input keys for moving the menu tab left.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.MenuTabRight">
            <summary>
            Gets the input keys for moving the menu tab right.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.MenuCancel">
            <summary>
            Gets the input keys for cancelling the menu.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.Pause">
            <summary>
            Gets the input keys for pausing the game.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.CycleItemLeft">
            <summary>
            Controller only
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.CycleItemRight">
            <summary>
            Controller only
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultForward">
            <summary>
            Gets the default input keys for the forward action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultBack">
            <summary>
            Gets the default input keys for the back action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultLeft">
            <summary>
            Gets the default input keys for the left action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultRight">
            <summary>
            Gets the default input keys for the right action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultJump">
            <summary>
            Gets the default input keys for the jump action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultSneak">
            <summary>
            Gets the default input keys for the sneak action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultSprint">
            <summary>
            Gets the default input keys for the sprint action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultInventory">
            <summary>
            Gets the default input keys for the inventory action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultDrop">
            <summary>
            Gets the default input keys for the drop action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultUse">
            <summary>
            Gets the default input keys for the use action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultAttack">
            <summary>
            Gets the default input keys for the attack action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultPickBlock">
            <summary>
            Gets the default input keys for the pick block action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultChat">
            <summary>
            Gets the default input keys for the chat action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar1">
            <summary>
            Gets the default input keys for the first hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar2">
            <summary>
            Gets the default input keys for the second hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar3">
            <summary>
            Gets the default input keys for the third hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar4">
            <summary>
            Gets the default input keys for the fourth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar5">
            <summary>
            Gets the default input keys for the fifth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar6">
            <summary>
            Gets the default input keys for the sixth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar7">
            <summary>
            Gets the default input keys for the seventh hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar8">
            <summary>
            Gets the default input keys for the eighth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar9">
            <summary>
            Gets the default input keys for the ninth hotbar slot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultHotbar">
            <summary>
            Gets the default input keys for all hotbar slots.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultTogglePerspective">
            <summary>
            Gets the default input keys for toggling perspective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultMobEffects">
            <summary>
            Gets the default input keys for mob effects.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultCommand">
            <summary>
            Gets the default input keys for the command action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultCopyCoordinates">
            <summary>
            Gets the default input keys for copying coordinates.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultCopyFacingCoordinates">
            <summary>
            Gets the default input keys for copying facing coordinates.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultEmote">
            <summary>
            Gets the default input keys for the emote action.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultScreenshot">
            <summary>
            Gets the default input keys for taking a screenshot.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultMenuTabLeft">
            <summary>
            Gets the default input keys for moving the menu tab left.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultMenuTabRight">
            <summary>
            Gets the default input keys for moving the menu tab right.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultMenuCancel">
            <summary>
            Gets the default input keys for cancelling the menu.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultPause">
            <summary>
            Gets the default input keys for pausing the game.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultCycleItemLeft">
            <summary>
            Controller only
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.InputMappingLayout.DefaultCycleItemRight">
            <summary>
            Controller only
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.ControllerMappingLayout">
            <summary>
            Represents the input mapping layout for controller input.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.ControllerMappingLayout.IsController">
            <summary>
            Indicates whether this layout is for controller input.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.KeyboardMappingLayout">
            <summary>
            Represents the input mapping layout for keyboard input.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.KeyboardMappingLayout.IsController">
            <summary>
            Indicates whether this layout is for controller input.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.OnixTextbox">
            <summary>
            Convenience class to have the basic functionality of a textbox without doing the hard work that comes with it.
            You're welcome.
            Set IsFocused to true to allow the user to start typing in it.
            don't forget that the user won't be able to use their keyboard until IsFocused is false!
            Use the Render function to render the textbox.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.OnixTextbox.TextSelection">
            <summary>
            Class to represent a selection of text in an OnixTextbox.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.TextSelection.Begin">
            <summary>
            The beginning index of the selection.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.TextSelection.End">
            <summary>
            The end index of the selection.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.OnixTextbox.TextSelection.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new text selection.
            </summary>
            <param name="begin">The beginning index of the new selection.</param>
            <param name="end">The end index of the new selection.</param>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.OnixTextbox.TextValidity">
            <summary>
            Enum to represent the validity of the text inside an OnixTextbox.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.TextValidity.None">
            <summary>
            The program has not checked the current text for validity.
            The outline will appear white.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.TextValidity.Invalid">
            <summary>
            The program has checked the current text is an invalid input.
            This puts a red outline around the textbox.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.TextValidity.Valid">
            <summary>
            The program has checked the current text is a valid input.
            This puts a green outline around the textbox.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility">
            <summary>
            Specifies the visibility state of the textbox cursor.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility.BlinkingWhenFocused">
            <summary>
            The cursor is visible and blinking when the textbox is focused.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility.Normal">
            <summary>
            The cursor is visible and blinking when the textbox is focused.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility.Static">
            <summary>
            The cursor is visible but not blinking.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility.Hidden">
            <summary>
            The cursor is not visible.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.OnixTextbox.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new OnixTextbox.
            </summary>
            <param name="maxLength"></param>
            <param name="text"></param>
            <param name="placeholder"></param>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.Text">
            <summary>
            The raw text inside the textbox.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.PlaceholderText">
            <summary>
            The placeholder text that will show in light gray when the textbox is empty.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.DisplayText">
            <summary>
            The text that should be displayed, this is mainly used for password mode.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.AsNumberInt">
            <summary>
            Gets the text as an integer, use this instead of int.Parse() because it takes care of the AllowHex and anything else that might not exist yet.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.AsNumberLong">
            <summary>
            Gets the text as an long, use this instead of long.Parse() because it takes care of the AllowHex and anything else that might not exist yet.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.AsNumberDouble">
            <summary>
            Gets the text as a double, use this instead of double.Parse() because it takes care of the AllowHex and anything else that might not exist yet.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.AsNumberFloat">
            <summary>
            Gets the text as a float, use this instead of float.Parse() because it takes care of the AllowHex and anything else that might not exist yet.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.AllowDecimal">
            <summary>
            Property to allow or disallow decimal numbers e.g. 6.9
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.IsNumericOnly">
            <summary>
            Property to make the textbox only accept numeric values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.AllowHex">
            <summary>
            Property to make the numeric textbox hexadecimal e.g. DEADBEEF
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.IsPassword">
            <summary>
            Property to make the textbox a password field.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.MaxLength">
            <summary>
            Property for the maximum amount of characters in the textbox.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.CursorIndex">
            <summary>
            The index of the cursor in the textbox.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.IsFocused">
            <summary>
            If the textbox is focused or not. If this is true the user will be able to type in it with no extra setup needed.
            don't FORGET TO SET IT BACK TO FALSE OTHERWISE THE USER WON'T BE ABLE TO USE THEIR KEYBOARD!
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.IsEmpty">
            <summary>
            If the textbox is empty or not.
            Setting this to true will clear the textbox, false does nothing.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.HasNewText">
            <summary>
            Will return true if the text is different from the last time this property was checked.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.HasConfirmedText">
            <summary>
            Will return true once after the user has pressed enter.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.Validity">
            <summary>
            The validity of the text inside the textbox.
            Setting it to Valid will make the outline green, setting it to Invalid will make the outline red.
            Having it to None will have the normal outline color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Inputs.OnixTextbox.Selection">
            <summary>
            The selection of text in the textbox or null.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.OnixTextbox.Clear">
            <summary>
            Clears the textbox text/selection.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.OnixTextbox.Render(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility)">
            <summary>
            Renders the textbox in the specified position using the onix theme.
            </summary>
            <param name="position">The position of the textbox.</param>
            <param name="cursorVisibility">The visibility of the cursor.</param>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.OnixTextbox.Render(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Inputs.OnixTextbox.CursorVisibility)">
            <summary>
            Renders the textbox in the specified position using your own colors.
            </summary>
            <param name="position">The position of the textbox.</param>
            <param name="backgroundColor">The color of the background.</param>
            <param name="textColor">The color of the text.</param>
            <param name="outlineColor">The color of the outline.</param>
            <param name="cursorVisibility">The visibility of the cursor.</param>
        </member>
        <member name="M:OnixRuntime.Api.Inputs.OnixTextbox.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.Internal.MemoryAddressContainer">
            <summary>
            Represents a container for a memory address.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MemoryAddressContainer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Internal.MemoryAddressContainer"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The current memory address.</param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MemoryAddressContainer.SetMemoryAddress(System.IntPtr)">
            <summary>
            Sets the memory address.
            </summary>
            <param name="currentMemoryAddress">The current memory address.</param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MemoryAddressContainer.op_Equality(OnixRuntime.Api.Internal.MemoryAddressContainer,OnixRuntime.Api.Internal.MemoryAddressContainer)">
            <summary>
            Compares two instances of the <see cref="T:OnixRuntime.Api.Internal.MemoryAddressContainer"/> class for equality.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MemoryAddressContainer.op_Inequality(OnixRuntime.Api.Internal.MemoryAddressContainer,OnixRuntime.Api.Internal.MemoryAddressContainer)">
            <summary>
            Compares two instances of the <see cref="T:OnixRuntime.Api.Internal.MemoryAddressContainer"/> class for inequality.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MemoryAddressContainer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MemoryAddressContainer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer">
            <summary>
            Represents a memory address container that may own the memory it points to.
            It has a destructor that lets it decide which one it is. This is for single ownership.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.HasMemoryOwnership">
            <summary>
            Indicates whether this instance has ownership of the memory it points to.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer"/> class.
            </summary>
            <param name="currentMemoryAddress">The current memory address.</param>
            <param name="destructor">The destructor function address.</param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.SetMemoryAddressValues(System.IntPtr,System.IntPtr)">
            <summary>
            Sets the memory address and destructor function address.
            </summary>
            <param name="currentMemoryAddress">The current memory address.</param>
            <param name="destructor">The destructor function address.</param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.Finalize">
            <summary>
            Finalizer for the <see cref="T:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer"/> class.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.op_Equality(OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer,OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.op_Inequality(OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer,OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.MightOwnMemoryAddressContainer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer">
            <summary>
            Contains a shared memory address pointer for passing and owning shared memory with an unmanaged context.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerType">
            <summary>
            Represents a shared memory address pointer for passing and owning shared memory with an unmanaged context.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerType.Shared">
            <summary>
            A shared pointer reference. You share real ownership with others, or maybe you're the last thing keeping it alive.
            This object will not disappear until all references are released.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerType.Weak">
            <summary>
            A weak reference to the object. This object might disappear leaving you lost and confused.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerType.Raw">
            <summary>
            Just a raw pointer, YOLO!
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerType.Unique">
            <summary>
            You own that object, it's all yours. You own it. Once you're done with it it's joever for it.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerType.Disposed">
            <summary>
            The object has been disposed. You can no longer use it.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer">
            <summary>
            Represents a container for a memory address pointer, a shared control block, a destructor to release the memory when you have ownership of any kind and a type letting you know what kind of pointer you got.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.#ctor">
            <summary>
            The default constructor, gets you a disposed null pointer.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.Get">
            <summary>
            Gets the memory address of the shared memory container.
            </summary>
            <returns>The memory address of the shared memory container.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.MemoryAddress">
            <summary>
            Gets the memory address of the shared memory container.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.HasMemoryOwnership">
            <summary>
            Tells you if you have memory ownership.
            If you do it means that you either made this object or can rely on this object to never disappear before your very eyes.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.IsDisposed">
            <summary>
            Tells you if the object has already been disposed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.SetMemoryAddressValues(OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer)">
            <summary>
            Replaces the current memory address values with the values from the provided pointer container.
            This will not dispose the old one, if that's something you need to happen, call <see cref="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.Dispose"/> first.
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.#ctor(OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer"/> class with a pointer.
            </summary>
            <param name="ptr">The pointer container to assign.</param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.#ctor(OnixRuntime.Api.Internal.SharedMemoryAddressContainer.PointerContainer@)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer"/> class with a pointer.
            </summary>
            <param name="ptr">The pointer container to assign.</param>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.Finalize">
            <summary>
            Finalizer for the <see cref="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer"/> class.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.op_Equality(OnixRuntime.Api.Internal.SharedMemoryAddressContainer,OnixRuntime.Api.Internal.SharedMemoryAddressContainer)">
            <summary>
            Compares two instances of the <see cref="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer"/> class for equality.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.op_Inequality(OnixRuntime.Api.Internal.SharedMemoryAddressContainer,OnixRuntime.Api.Internal.SharedMemoryAddressContainer)">
            <summary>
            Compares two instances of the <see cref="T:OnixRuntime.Api.Internal.SharedMemoryAddressContainer"/> class for inequality.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Internal.SharedMemoryAddressContainer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Items.EnchantType">
            <summary>
            Represents an enchantment type for items, such as Protection, Sharpness, or Mending.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Items.EnchantmentTypesExtensions">
            <summary>
            Extension methods for EnchantType, providing identifier and translation key utilities.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentTypesExtensions.ToNameIdentifier(OnixRuntime.Api.Items.EnchantType)">
            <summary>
            Gets the string name identifier for the enchantment type.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentTypesExtensions.ToNameTranslationKey(OnixRuntime.Api.Items.EnchantType)">
            <summary>
            Gets the translation key for the enchantment type.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentTypesExtensions.DisplayName(OnixRuntime.Api.Items.EnchantType)">
            <summary>
            Gets the display name for the specified enchantment type. e.g. "Protection" or "Frost Walker".
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentTypesExtensions.DisplayName(OnixRuntime.Api.Items.EnchantType,System.Int32)">
            <summary>
            Gets the display name for the specified enchantment type with a level. e.g. "Protection IV" or "Frost Walker II".
            </summary>
            <param name="ench">The enchant type.</param>
            <param name="level">The level of the enchantment.</param>
            <returns></returns>
        </member>
        <member name="T:OnixRuntime.Api.Items.EnchantmentInstanceBoxed">
            <summary>
            Boxed struct for holding an enchantment type and level, used internally.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Items.EnchantmentInstance">
            <summary>
            Represents an enchantment instance with a type and level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Items.EnchantmentInstance.Type">
            <summary>
            The type of enchantment.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Items.EnchantmentInstance.Level">
            <summary>
            The level of the enchantment.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentInstance.#ctor(OnixRuntime.Api.Items.EnchantType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Items.EnchantmentInstance"/> class with the specified type and level.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Items.EnchantmentInstance"/> class with default values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.EnchantmentInstance.#ctor(OnixRuntime.Api.Items.EnchantmentInstanceBoxed)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Items.EnchantmentInstance"/> class from a boxed struct.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Items.Item">
            <summary>
            Represents the information about an item.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.Id">
            <summary>
            This id might not be reliable across versions/servers.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.MaxStackSize">
            <summary>
            What is the max size of a stack of this item.
            Note that this is not accurate for all items.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.MaxDamage">
            <summary>
            How much damage does that item need to take before it breaks.
            Zero means that it does not have durability.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.MaxUseDurationTicks">
            <summary>
            How long does it take to use the item in game ticks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.MaxUseDuration">
            <summary>
            How long does it take to use the item.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.CreativeCategory">
            <summary>
            Which part of the creative menu this item belongs to.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.HasEnchantedOverlay">
            <summary>
            If this item has the enchanted overlay without being enchanted (like enchanted golden apples.)
            You likely want to use <see cref="P:OnixRuntime.Api.Items.ItemStack.HasEnchantOverlay"/> instead of this, since this is only for the item itself, not the stack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.IsHandEquipped">
            <summary>
            If this item can be equipped from right-clicking it in your hand.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.IsStackedByData">
            <summary>
            If the item is stacked by data (like different colored wool.)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.CanExplode">
            <summary>
            If this item can be destroyed by explosions.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.IsFireResistant">
            <summary>
            If this item cannot be destroyed by fire.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.AllowsOffhand">
            <summary>
            If this item can be placed in the offhand.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.DescriptionIdentifier">
            <summary>
            Gets the description identifier of the item, this would be like "item.muttonCooked"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.Name">
            <summary>
            The name of the item like "diamond_sword"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.Namespace">
            <summary>
            The namespace this item is in like "minecraft"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.NameFull">
            <summary>
            The full name of the item like "minecraft:diamond_sword"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.Item.DefaultBlock">
            <summary>
            If this item is a block this will be its default Block State
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.Item.IsValidAuxValue(System.Int32)">
            <summary>
            If this item finds the aux value valid.
            </summary>
            <param name="value">The value to check</param>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.Items.Item.ToString">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Items.ItemContainer">
            <summary>
            Represents a container for item stacks, providing access to items and slots.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemContainer.Size">
            <summary>
            Gets the number of slots in the container.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemContainer.GetItem(System.Int32)">
            <summary>
            Gets the item stack at the specified index.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Items.ItemStack"/> at the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of range.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemContainer.SetItem(System.Int32,OnixRuntime.Api.Items.ItemStack)">
            <summary>
            Sets an item in a container.
            </summary>
            <param name="index">The index of the item to set.</param>
            <param name="item">The item to be set.</param>
            <remarks>This function requires trust or creative mode.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the index is out of range.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemContainer.Slots">
            <summary>
            Gets all item stacks in the container slots.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Items.ItemRegistry">
            <summary>
            Provides access to the item registry, allowing lookup and enumeration of items at runtime.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemRegistry.RuntimeItems">
            <summary>
            Gets all items currently registered at runtime.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemRegistry.GetItem(System.String)">
            <summary>
            Gets an item by its name, or null if not found.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The item if found, otherwise null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemRegistry.GetItemAtIndex(System.Int32)">
            <summary>
            Gets an item by its index in the registry.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemRegistry.ItemCount">
            <summary>
            Gets the total number of items in the registry.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Items.ItemStack">
            <summary>
            Represents a stack of items or blocks, including count, auxiliary value, NBT data, enchantments, and utility methods.
            Creation must be done in a game logic thread.
            The other functions are fine but avoid reading from random threads/places if you don't own it.
            If you get it from the source every time it should be safe to read.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Count">
            <summary>
            Gets or sets the number of items in the stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Aux">
            <summary>
            Gets or sets the auxiliary value (damage, variant, etc.) for the item stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.ShowPickup">
            <summary>
            Gets or sets whether the pickup animation should be shown for this stack.
            <remarks>You can edit this on any items, mainly useful for rendering</remarks>
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Item">
            <summary>
            Gets the item type for this stack, or null if empty.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.IsEmpty">
            <summary>
            Gets whether this stack is empty.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Block">
            <summary>
            Gets the block type for this stack, or null if not a block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Nbt">
            <summary>
            Gets or sets the NBT data for this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value is not an ObjectTag or null.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.#ctor">
            <summary>
            Creation must be done in a game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.#ctor(OnixRuntime.Api.Items.Item,System.Int32,System.Int32)">
            <summary>
            Creation must be done in a game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.#ctor(OnixRuntime.Api.World.Block,System.Int32)">
            <summary>
            Creation must be done in a game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creation must be done in a game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.#ctor(OnixRuntime.Api.NBT.ObjectTag)">
            <summary>
            Creation must be done in a game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.Clone">
            <summary>
            Creation/Cloning must be done in a game logic thread.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.SetEmpty">
            <summary>
            Sets this stack to empty.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.Reinit(OnixRuntime.Api.Items.Item,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creation/Initialization must be done in a game logic thread.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.Reinit(OnixRuntime.Api.World.Block,System.Int32,System.Boolean)">
            <summary>
            Creation/Initialization must be done in a game logic thread.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.Reinit(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creation/Initialization must be done in a game logic thread.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.SaveToNbt">
            <summary>
            Saves the current state of the ItemStack to an NBT tag.
            </summary>
            <returns>An ObjectTag representing the ItemStack's state.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.LoadFromNbt(OnixRuntime.Api.NBT.ObjectTag)">
            <summary>
            Creation/Initialization must be done in a game logic thread.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.DisplayName">
            <summary>
            Gets the display name for this stack. e.g. "Diamond Sword" or whatever the user named it in an anvil.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.CustomName">
            <summary>
            Gets or sets the custom name for this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Damage">
            <summary>
            Gets or sets the damage value for this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Durability">
            <summary>
            Gets or sets the current durability left on the item.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.CanBeDamaged">
            <summary>
            Gets a value indicating whether the item can be damaged.
            false means there is no durability, so it cannot be damaged.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.GetHoverText(System.Boolean,System.Boolean)">
            <summary>
            Retrieves the hover text for the item stack.
            The one when you put your mouse over the item in the inventory.
            DO NOT USE IN <see cref="E:OnixRuntime.Api.Events.OnixEventGui.ContainerScreenHoverTextRequested"/> unless you set vanilla to true. Otherwise, you will get infinite recursion.
            </summary>
            <param name="showCategory">A value indicating whether to include the item's category in the hover text.  <see langword="true"/> to
            include the category; otherwise, <see langword="false"/>.</param>
            <param name="vanilla">A value indicating whether to format the hover text using vanilla formatting rules.  <see langword="true"/>
            to use vanilla formatting; otherwise, <see langword="false"/>. Non-vanilla formatting means the client/a plugin can change it before you get the text.</param>
            <returns>A string containing the hover text for the item stack. The content of the text depends on the  specified
            parameters.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.GetHoverText(OnixRuntime.Api.World.RuntimeWorld,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the hover text for the item stack.
            The one when you put your mouse over the item in the inventory.
            DO NOT USE IN <see cref="E:OnixRuntime.Api.Events.OnixEventGui.ContainerScreenHoverTextRequested"/> unless you set vanilla to true. Otherwise, you will get infinite recursion.
            </summary>
            <param name="showCategory">A value indicating whether to include the item's category in the hover text.  <see langword="true"/> to
            include the category; otherwise, <see langword="false"/>.</param>
            <param name="world">The world in which you are getting the hover text, by default the client tries to guess so you can get away with not providing anything most of the time.</param>
            <param name="vanilla">A value indicating whether to format the hover text using vanilla formatting rules.  <see langword="true"/>
            to use vanilla formatting; otherwise, <see langword="false"/>. Non-vanilla formatting means the client/a plugin can change it before you get the text.</param>
            <returns>A string containing the hover text for the item stack. The content of the text depends on the  specified
            parameters.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Lore">
            <summary>
            Gets or sets the lore for this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.Enchants">
            <summary>
            Gets or sets the enchantments for this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.GetEnchant(OnixRuntime.Api.Items.EnchantType)">
            <summary>
            Retrieves the first enchantment of the specified type from the collection of enchantments.
            </summary>
            <param name="type">The type of enchantment to search for.</param>
            <returns>An <see cref="T:OnixRuntime.Api.Items.EnchantmentInstance"/> representing the first enchantment of the specified type,  or <see
            langword="null"/> if no matching enchantment is found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.AddEnchant(OnixRuntime.Api.Items.EnchantType,System.Int32)">
            <summary>
            Adds an enchantment to the current item stack with the specified type and level.
            </summary>
            <param name="enchant">The type of enchantment to add.</param>
            <param name="level">The enchantment level.</param>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.AddEnchant(OnixRuntime.Api.Items.EnchantmentInstance)">
            <summary>
            Adds an enchantment to this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.AddOrUpdateEnchant(OnixRuntime.Api.Items.EnchantType,System.Int32)">
            <summary>
            Adds a new enchantment or updates the level of an existing enchantment.
            </summary>
            <remarks>If the specified enchantment does not already exist, it will be added with the
            specified level. If it does exist, its level will be updated to the provided value.</remarks>
            <param name="enchant">The type of enchantment to add or update.</param>
            <param name="level">The level of the enchantment. Must be a positive integer.  If the enchantment already exists, its level will
            be updated to this value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.AddOrUpdateEnchant(OnixRuntime.Api.Items.EnchantmentInstance)">
            <summary>
            Adds or updates an enchantment on this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.RemoveEnchant(OnixRuntime.Api.Items.EnchantType)">
            <summary>
            Removes an enchantment from this stack.
            </summary>
            <exception cref="T:System.AccessViolationException">Thrown if the ItemStack is not owned.</exception>
        </member>
        <member name="P:OnixRuntime.Api.Items.ItemStack.HasEnchantOverlay">
            <summary>
            Tells you if this stack of items should have an enchantment overlay when rendered.
            This is useful because you save converting the whole NBT to read ench and it supports things like enchanted golden apples which don't have an ench tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.GetIcon(System.Int32,System.Boolean)">
            <summary>
            Retrieves the texture coordinates for the icon of the item stack.
            </summary>
            <param name="frame">The animation frame index to retrieve the icon for. Must be a non-negative integer, would recommend 0.</param>
            <param name="isInventoryPane">A value indicating whether the icon is being retrieved for display in the inventory pane. <see
            langword="true"/> if the icon is for the inventory pane; otherwise, <see langword="false"/>.</param>
            <returns>The texture coordinates of the icon as a <see cref="T:OnixRuntime.Api.Rendering.TextureUVCoordinates"/> object.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Items.ItemStack.ToString">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.Logger">
            <summary>
            Logs to a file or chat according to a log level.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Logger.Level">
            <summary>
            Represents the log level, how important is this message?.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Logger.Level.Trace">
            <summary>
            Basically used for Log debugging...
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Logger.Level.Debug">
            <summary>
            Used for debug only information.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Logger.Level.Info">
            <summary>
            If you have information to share.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Logger.Level.Warning">
            <summary>
            Anything that isn't necessarily bad but could be.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Logger.Level.Error">
            <summary>
            Something went wrong, good luck.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Logger.Level.None">
            <summary>
            Nothing, does not ever log anything.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Logger.Name">
            <summary>
            The name of the logger to know where the logs come from.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Logger.#ctor(System.String)">
            <summary>
            Creates a new logger with the desired name
            Put the name as your mod's name if possible.
            </summary>
            <param name="name">The name of the logger to know where the logs come from.</param>
        </member>
        <member name="M:OnixRuntime.Api.Logger.Log(OnixRuntime.Api.Logger.Level,System.String)">
            <summary>
            Logs text according tho the logging rules with the given message and level.
            </summary>
            <param name="logLevel">The level of importance.</param>
            <param name="message">The content of the log.</param>
        </member>
        <member name="M:OnixRuntime.Api.Logger.Trace(System.String)">
            <summary>
            Calls log with the specified text and the Trace level.
            </summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:OnixRuntime.Api.Logger.Debug(System.String)">
            <summary>
            Calls log with the specified text and the Debug level.
            </summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:OnixRuntime.Api.Logger.Info(System.String)">
            <summary>
            Calls log with the specified text and the Info level.
            </summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:OnixRuntime.Api.Logger.Warning(System.String)">
            <summary>
            Calls log with the specified text and the Warning level.
            </summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="M:OnixRuntime.Api.Logger.Error(System.String)">
            <summary>
            Calls log with the specified text and the Error level.
            </summary>
            <param name="text">The text to log.</param>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Angles">
            <summary>
            Represents a pair of angles (Yaw, Pitch) and provides vector-like operations and utilities for angle manipulation.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Angles.Yaw">
            <summary>
            The yaw component of the angles.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Angles.Pitch">
            <summary>
            The pitch component of the angles.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles.Length">
            <summary>
            Gets the Euclidean length of the angle vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles.Normalized">
            <summary>
            Gets a normalized version of this angle vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles.Magnitude">
            <summary>
            Gets the magnitude (length) of the angle vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles.MagnitudeSqr">
            <summary>
            Gets the squared magnitude of the angle vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Angles"/> struct with zero yaw and pitch.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Angles"/> struct with the specified yaw and pitch.
            </summary>
            <param name="yaw">The yaw component.</param>
            <param name="pitch">The pitch component.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.AnglesRandom">
            <summary>
            Returns a random Angles instance with yaw and pitch in [0, 1).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.SetMagnitude(System.Single)">
            <summary>
            Sets the magnitude (length) of this angle vector.
            </summary>
            <param name="magnitude">The new magnitude.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.SetDirection(System.Single)">
            <summary>
            Sets the direction of this angle vector, preserving its magnitude.
            </summary>
            <param name="angle">The angle in radians.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Distance(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Returns the Euclidean distance between this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Angle(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Returns the angle (in radians) between this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Dot(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Returns the dot product of this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Cross(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Returns the cross product of this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Lerp(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Linearly interpolates between this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
            <param name="t">The interpolation factor, clamped between 0 and 1.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Min(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Returns a new Angles vector with the minimum components of this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Max(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Returns a new Angles vector with the maximum components of this and another Angles vector.
            </summary>
            <param name="vec">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Min(System.Single)">
            <summary>
            Returns a new Angles vector with the minimum components of this and a scalar value.
            </summary>
            <param name="value">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Max(System.Single)">
            <summary>
            Returns a new Angles vector with the maximum components of this and a scalar value.
            </summary>
            <param name="value">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Clamp(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Clamps the components of this Angles vector between the corresponding components of two other Angles vectors.
            </summary>
            <param name="min">The minimum Angles vector.</param>
            <param name="max">The maximum Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Clamp(System.Single,System.Single)">
            <summary>
            Clamps the components of this Angles vector between two scalar values.
            </summary>
            <param name="min">The minimum scalar value.</param>
            <param name="max">The maximum scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Addition(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Adds two Angles vectors.
            </summary>
            <param name="a">The first Angles vector.</param>
            <param name="b">The second Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Addition(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Adds a scalar value to an Angles vector.
            </summary>
            <param name="a">The Angles vector.</param>
            <param name="b">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Subtraction(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Subtracts one Angles vector from another.
            </summary>
            <param name="a">The first Angles vector.</param>
            <param name="b">The second Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Subtraction(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Subtracts a scalar value from an Angles vector.
            </summary>
            <param name="a">The Angles vector.</param>
            <param name="b">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_UnaryNegation(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Negates an Angles vector.
            </summary>
            <param name="a">The Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Multiply(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Multiplies two Angles vectors component-wise.
            </summary>
            <param name="a">The first Angles vector.</param>
            <param name="b">The second Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Multiply(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Multiplies an Angles vector by a scalar value.
            </summary>
            <param name="a">The Angles vector.</param>
            <param name="b">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Multiply(System.Single,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Multiplies a scalar value by an Angles vector.
            </summary>
            <param name="a">The scalar value.</param>
            <param name="b">The Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Division(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Divides one Angles vector by another component-wise.
            </summary>
            <param name="a">The first Angles vector.</param>
            <param name="b">The second Angles vector.</param>
            <exception cref="T:System.DivideByZeroException">Thrown when any component of the second Angles vector is zero.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Division(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Divides an Angles vector by a scalar value.
            </summary>
            <param name="a">The Angles vector.</param>
            <param name="b">The scalar value.</param>
            <exception cref="T:System.DivideByZeroException">Thrown when the scalar value is zero.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Division(System.Single,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Divides a scalar value by an Angles vector component-wise.
            </summary>
            <param name="a">The scalar value.</param>
            <param name="b">The Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Equality(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Determines whether two Angles vectors are equal.
            </summary>
            <param name="a">The first Angles vector.</param>
            <param name="b">The second Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.op_Inequality(OnixRuntime.Api.Maths.Angles,OnixRuntime.Api.Maths.Angles)">
            <summary>
            Determines whether two Angles vectors are not equal.
            </summary>
            <param name="a">The first Angles vector.</param>
            <param name="b">The second Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Equals(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Determines whether this Angles vector is equal to another Angles vector.
            </summary>
            <param name="other">The other Angles vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.Equals(System.Object)">
            <summary>
            Determines whether this Angles vector is equal to another object.
            </summary>
            <param name="obj">The other object.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.GetHashCode">
            <summary>
            Returns the hash code for this Angles vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.ToString">
            <summary>
            Returns a string representation of this Angles vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles.ToString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a formatted string representation of this Angles vector.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Angles3">
            <summary>
            Represents a set of three angles (Yaw, Pitch, Roll) in 3D space, with various utility methods for manipulation and comparison.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Angles3.Yaw">
            <summary>
            The yaw angle component.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Angles3.Pitch">
            <summary>
            The pitch angle component.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Angles3.Roll">
            <summary>
            The roll angle component.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles3.Length">
            <summary>
            Gets the Euclidean length (magnitude) of the angle vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles3.Normalized">
            <summary>
            Gets a normalized version of this angle vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles3.Magnitude">
            <summary>
            Gets the magnitude (length) of the angle vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Angles3.MagnitudeSqr">
            <summary>
            Gets the squared magnitude of the angle vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with the specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">The yaw angle.</param>
            <param name="pitch">The pitch angle.</param>
            <param name="roll">The roll angle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.#ctor(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Initializes a new instance with the specified yaw, pitch, and roll.
            </summary>
            <param name="angles">The two-dimensional angles that will form this newly 3d angle.</param>
            <param name="roll">The roll if you care to set it.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.AnglesRandom">
            <summary>
            Generates a random <see cref="T:OnixRuntime.Api.Maths.Angles3"/> instance with each component in the range [0, 1).
            </summary>
            <returns>A random <see cref="T:OnixRuntime.Api.Maths.Angles3"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.SetMagnitude(System.Single)">
            <summary>
            Sets the magnitude (length) of this angle vector to the specified value, preserving direction.
            </summary>
            <param name="magnitude">The new magnitude.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Distance(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Calculates the Euclidean distance between this angle vector and another.
            </summary>
            <param name="vec">The other angle vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.DistanceSquared(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Calculates the squared Euclidean distance between this angle vector and another.
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Dot(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Calculates the dot product of this angle vector and another.
            </summary>
            <param name="vec">The other angle vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Lerp(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Linearly interpolates between this angle vector and another by a given factor.
            </summary>
            <param name="vec">The target angle vector.</param>
            <param name="t">Interpolation factor in [0, 1].</param>
            <returns>The interpolated angle vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Min(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Returns a new angle vector with the minimum components of this and another vector.
            </summary>
            <param name="vec">The other angle vector.</param>
            <returns>The component-wise minimum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Max(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Returns a new angle vector with the maximum components of this and another vector.
            </summary>
            <param name="vec">The other angle vector.</param>
            <returns>The component-wise maximum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Min(System.Single)">
            <summary>
            Returns a new angle vector with each component set to the minimum of itself and the specified value.
            </summary>
            <param name="value">The value to compare to each component.</param>
            <returns>The component-wise minimum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Max(System.Single)">
            <summary>
            Returns a new angle vector with each component set to the maximum of itself and the specified value.
            </summary>
            <param name="value">The value to compare to each component.</param>
            <returns>The component-wise maximum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Clamp(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Clamps each component of this angle vector between the corresponding components of the specified minimum and maximum vectors.
            </summary>
            <param name="min">The minimum vector.</param>
            <param name="max">The maximum vector.</param>
            <returns>The clamped angle vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Clamp(System.Single,System.Single)">
            <summary>
            Clamps each component of this angle vector between the specified minimum and maximum values.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped angle vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Addition(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Adds two <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vectors component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Addition(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Adds a scalar to each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Subtraction(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Subtracts one <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector from another component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Subtraction(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Subtracts a scalar from each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_UnaryNegation(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Negates each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Multiply(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Multiplies two <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vectors component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Multiply(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Multiplies each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector by a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Multiply(System.Single,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Multiplies each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector by a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Division(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Divides one <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector by another component-wise.
            </summary>
            <exception cref="T:System.DivideByZeroException">Thrown if any component of <paramref name="b"/> is zero.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Division(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Divides each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector by a scalar.
            </summary>
            <exception cref="T:System.DivideByZeroException">Thrown if <paramref name="b"/> is zero.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Division(System.Single,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Divides a scalar by each component of a <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Equality(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Determines whether two <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vectors are equal (within float.Epsilon).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.op_Inequality(OnixRuntime.Api.Maths.Angles3,OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Determines whether two <see cref="T:OnixRuntime.Api.Maths.Angles3"/> vectors are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Equals(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Determines whether this instance and another specified <see cref="T:OnixRuntime.Api.Maths.Angles3"/> object have the same value.
            </summary>
            <param name="other">The other <see cref="T:OnixRuntime.Api.Maths.Angles3"/> to compare.</param>
            <returns>True if equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.ToString">
            <summary>
            Returns a string representation of the angle vector in the format "Yaw Pitch Roll".
            </summary>
            <returns>A string representation of the angle vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Angles3.ToString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a formatted string representation of the angle vector, replacing %y, %p, and %r with Yaw, Pitch, and Roll respectively.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">An optional format provider.</param>
            <returns>A formatted string representation of the angle vector.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Maths.BlockPos">
            <summary>
            Represents a block position in 3D integer coordinates, with vector-like operations and utilities.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BlockPos.X">
            <summary>
            The X coordinate of the block position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BlockPos.Y">
            <summary>
            The Y coordinate of the block position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BlockPos.Z">
            <summary>
            The Z coordinate of the block position.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> struct with the specified coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.#ctor(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> struct from a <see cref="T:OnixRuntime.Api.Maths.Vec3"/> by flooring its components.
            </summary>
            <param name="vec">The vector to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.FromString(System.String,System.Boolean)">
            <summary>Parses a space- or comma-separated string into a <see cref="T:OnixRuntime.Api.Maths.BlockPos"/>.</summary>
            <param name="spacesSeparatedString">The input string containing three integer coordinates (X, Y, Z), separated by spaces and/or commas. Example: "10 64 -5" or "10,64,-5".</param>
            <param name="throwOnFailure">If true, the method throws an <see cref="T:System.ArgumentException"/> when parsing fails. If false, invalid or missing values are treated as zero.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> parsed from the provided string. If parsing fails and <paramref name="throwOnFailure"/> is false, returns <see cref="P:OnixRuntime.Api.Maths.BlockPos.Zero"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input string is invalid and <paramref name="throwOnFailure"/> is true.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.FromString(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>Parses a space- or comma-separated character span into a <see cref="T:OnixRuntime.Api.Maths.BlockPos"/>.</summary>
            <param name="spacesSeparatedString">The input character span containing three integer coordinates (X, Y, Z), separated by spaces and/or commas. Example: "10 64 -5" or "10,64,-5".</param>
            <param name="throwOnFailure">If true, the method throws an <see cref="T:System.ArgumentException"/> when parsing fails. If false, invalid or missing values are treated as zero.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> parsed from the provided character span. If parsing fails and <paramref name="throwOnFailure"/> is false, returns <see cref="P:OnixRuntime.Api.Maths.BlockPos.Zero"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input span is invalid and <paramref name="throwOnFailure"/> is true.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.WithX(System.Int32)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance with the specified X-coordinate,  while retaining the current
            Y and Z coordinates.
            </summary>
            <param name="x">The X-coordinate to use for the new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance with the specified X-coordinate.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.WithY(System.Int32)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance with the specified Y-coordinate,  while retaining the current
            X and Z coordinates.
            </summary>
            <param name="y">The Y-coordinate to use for the new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance with the specified Y-coordinate.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.WithZ(System.Int32)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance with the specified Z-coordinate,  while retaining the current
            X and Y coordinates.
            </summary>
            <param name="z">The Z-coordinate to use for the new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> instance with the specified Z-coordinate.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new BlockPos by adding the specified values to each coordinate.
            </summary>
            <param name="x">The X coordinate to add.</param>
            <param name="y">The Y coordinate to add.</param>
            <param name="z">The Z coordinate to add.</param>
            <returns>A new BlockPos with the added coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Add(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new BlockPos by adding another BlockPos.
            </summary>
            <param name="rhs">The BlockPos to add.</param>
            <returns>A new BlockPos with the added coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Addition(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Adds two BlockPos values.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>A new BlockPos with the added coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Sub(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new BlockPos by subtracting the specified values from each coordinate.
            </summary>
            <param name="x">The X coordinate to subtract.</param>
            <param name="y">The Y coordinate to subtract.</param>
            <param name="z">The Z coordinate to subtract.</param>
            <returns>A new BlockPos with the subtracted coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Sub(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new BlockPos by subtracting another BlockPos.
            </summary>
            <param name="rhs">The BlockPos to subtract.</param>
            <returns>A new BlockPos with the subtracted coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Subtraction(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Subtracts one BlockPos from another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>A new BlockPos with the subtracted coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Mul(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new BlockPos by multiplying the specified values with each coordinate.
            </summary>
            <param name="x">The X coordinate to multiply.</param>
            <param name="y">The Y coordinate to multiply.</param>
            <param name="z">The Z coordinate to multiply.</param>
            <returns>A new BlockPos with the multiplied coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Mul(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new BlockPos by multiplying another BlockPos.
            </summary>
            <param name="rhs">The BlockPos to multiply.</param>
            <returns>A new BlockPos with the multiplied coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Multiplies two BlockPos values.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>A new BlockPos with the multiplied coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Div(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new BlockPos by dividing the specified values from each coordinate.
            </summary>
            <param name="x">The X coordinate to divide.</param>
            <param name="y">The Y coordinate to divide.</param>
            <param name="z">The Z coordinate to divide.</param>
            <returns>A new BlockPos with the divided coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Div(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new BlockPos by dividing another BlockPos.
            </summary>
            <param name="rhs">The BlockPos to divide.</param>
            <returns>A new BlockPos with the divided coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Divides one BlockPos by another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>A new BlockPos with the divided coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Mod(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new BlockPos by taking the modulus of the specified values with each coordinate.
            </summary>
            <param name="x">The X coordinate to mod.</param>
            <param name="y">The Y coordinate to mod.</param>
            <param name="z">The Z coordinate to mod.</param>
            <returns>A new BlockPos with the modded coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Mod(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new BlockPos by taking the modulus of another BlockPos.
            </summary>
            <param name="rhs">The BlockPos to mod.</param>
            <returns>A new BlockPos with the modded coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Takes the modulus of one BlockPos with another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>A new BlockPos with the modded coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Equality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if two BlockPos values are equal.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>True if the coordinates are equal, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Inequality(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if two BlockPos values are not equal.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>True if the coordinates are not equal, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_GreaterThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if one BlockPos is greater than another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>True if the left-hand side is greater, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_LessThan(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if one BlockPos is less than another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>True if the left-hand side is less, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if one BlockPos is greater than or equal to another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>True if the left-hand side is greater than or equal, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_LessThanOrEqual(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if one BlockPos is less than or equal to another.
            </summary>
            <param name="lhs">The left-hand side BlockPos.</param>
            <param name="rhs">The right-hand side BlockPos.</param>
            <returns>True if the left-hand side is less than or equal, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_UnaryNegation(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Negates the coordinates of a BlockPos.
            </summary>
            <param name="rhs">The BlockPos to negate.</param>
            <returns>A new BlockPos with the negated coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_UnaryPlus(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns the same BlockPos.
            </summary>
            <param name="rhs">The BlockPos.</param>
            <returns>The same BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Increment(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Increments the coordinates of a BlockPos by 1.
            </summary>
            <param name="rhs">The BlockPos to increment.</param>
            <returns>A new BlockPos with the incremented coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Decrement(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Decrements the coordinates of a BlockPos by 1.
            </summary>
            <param name="rhs">The BlockPos to decrement.</param>
            <returns>A new BlockPos with the decremented coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Multiply(OnixRuntime.Api.Maths.BlockPos,System.Int32)">
            <summary>
            Multiplies the coordinates of a BlockPos by an integer.
            </summary>
            <param name="lhs">The BlockPos.</param>
            <param name="rhs">The integer to multiply.</param>
            <returns>A new BlockPos with the multiplied coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Multiply(System.Int32,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Multiplies an integer by the coordinates of a BlockPos.
            </summary>
            <param name="lhs">The integer to multiply.</param>
            <param name="rhs">The BlockPos.</param>
            <returns>A new BlockPos with the multiplied coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Division(OnixRuntime.Api.Maths.BlockPos,System.Int32)">
            <summary>
            Divides the coordinates of a BlockPos by an integer.
            </summary>
            <param name="lhs">The BlockPos.</param>
            <param name="rhs">The integer to divide.</param>
            <returns>A new BlockPos with the divided coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Division(System.Int32,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Divides an integer by the coordinates of a BlockPos.
            </summary>
            <param name="lhs">The integer to divide.</param>
            <param name="rhs">The BlockPos.</param>
            <returns>A new BlockPos with the divided coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Modulus(OnixRuntime.Api.Maths.BlockPos,System.Int32)">
            <summary>
            Takes the modulus of the coordinates of a BlockPos by an integer.
            </summary>
            <param name="lhs">The BlockPos.</param>
            <param name="rhs">The integer to mod.</param>
            <returns>A new BlockPos with the modded coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.op_Modulus(System.Int32,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Takes the modulus of an integer by the coordinates of a BlockPos.
            </summary>
            <param name="lhs">The integer to mod.</param>
            <param name="rhs">The BlockPos.</param>
            <returns>A new BlockPos with the modded coordinates.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.Zero">
            <summary>
            Gets a BlockPos with all coordinates set to zero.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.One">
            <summary>
            Gets a BlockPos with all coordinates set to one.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.Up">
            <summary>
            Gets a BlockPos that is one unit up from the current position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.Down">
            <summary>
            Gets a BlockPos that is one unit down from the current position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.North">
            <summary>
            Gets a BlockPos that is one unit north from the current position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.South">
            <summary>
            Gets a BlockPos that is one unit south from the current position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.East">
            <summary>
            Gets a BlockPos that is one unit east from the current position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.West">
            <summary>
            Gets a BlockPos that is one unit west from the current position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.BoundingBox">
            <summary>
            Gets the bounding box of the current BlockPos.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Next(OnixRuntime.Api.World.BlockFace,System.Int32)">
            <summary>
            Gives you the next block position in the given direction.
            </summary>
            <param name="face">The direction to get the position of.</param>
            <param name="count">How many blocks in that direction.</param>
            <returns></returns>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.Length">
            <summary>
            Gets the length of the BlockPos vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.Normalized">
            <summary>
            Gets the normalized vector of the BlockPos.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BlockPos.Center">
            <summary>
            Gets the center of the BlockPos.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Distance(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Calculates the distance to another BlockPos.
            </summary>
            <param name="other">The other BlockPos.</param>
            <returns>The distance to the other BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Lerp(OnixRuntime.Api.Maths.BlockPos,System.Single)">
            <summary>
            Linearly interpolates between this BlockPos and another BlockPos.
            </summary>
            <param name="other">The other BlockPos.</param>
            <param name="t">The interpolation factor.</param>
            <returns>The interpolated BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Min(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns the minimum of this BlockPos and another BlockPos.
            </summary>
            <param name="other">The other BlockPos.</param>
            <returns>The minimum BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Max(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns the maximum of this BlockPos and another BlockPos.
            </summary>
            <param name="other">The other BlockPos.</param>
            <returns>The maximum BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Clamp(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Clamps this BlockPos between two other BlockPos values.
            </summary>
            <param name="min">The minimum BlockPos.</param>
            <param name="max">The maximum BlockPos.</param>
            <returns>The clamped BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Min(System.Int32)">
            <summary>
            Returns the minimum of this BlockPos and an integer.
            </summary>
            <param name="other">The integer.</param>
            <returns>The minimum BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Max(System.Int32)">
            <summary>
            Returns the maximum of this BlockPos and an integer.
            </summary>
            <param name="other">The integer.</param>
            <returns>The maximum BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Clamp(System.Int32,System.Int32)">
            <summary>
            Clamps this BlockPos between two integer values.
            </summary>
            <param name="min">The minimum integer.</param>
            <param name="max">The maximum integer.</param>
            <returns>The clamped BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.ToString">
            <summary>
            Returns a string representation of the BlockPos.
            </summary>
            <returns>A string representation of the BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.ToString(System.String)">
            <summary>
            Returns a formatted string representation of the BlockPos.
            </summary>
            <param name="format">The format string.</param>
            <returns>A formatted string representation of the BlockPos.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Equals(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Checks if this BlockPos is equal to another BlockPos.
            </summary>
            <param name="other">The other BlockPos.</param>
            <returns>True if the BlockPos values are equal, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.Equals(System.Object)">
            <summary>
            Checks if this BlockPos is equal to another object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is a BlockPos and the values are equal, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BlockPos.GetHashCode">
            <summary>
            Returns the hash code for this BlockPos.
            </summary>
            <returns>The hash code for this BlockPos.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Maths.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box (AABB) in 3D space, with utility methods for containment, intersection, and manipulation.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BoundingBox.Minimum">
            <summary>
            The minimum (corner) point of the bounding box.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BoundingBox.Maximum">
            <summary>
            The maximum (corner) point of the bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.#ctor(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.BoundingBox"/> struct with the specified minimum and maximum points.
            </summary>
            <param name="min">The minimum point.</param>
            <param name="max">The maximum point.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.#ctor(OnixRuntime.Api.Maths.BoundingBoxI,System.Boolean)">
            <summary>
            Creates a floating-point bounding box from an integer bounding box.
            </summary>
            <param name="bbox">The integer bounding box to convert.</param>
            <param name="display">If you plan on rendering the region of the integer box using this, set this to true.</param>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.Size">
            <summary>
            Gets the size (width, height, depth) of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.Center">
            <summary>
            Gets the center point of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.Volume">
            <summary>
            Gets the volume of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.Empty">
            <summary>
            Gets whether the bounding box is empty (minimum equals maximum).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.FrontTopLeft">
            <summary>
            Gets the front top left corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.FrontTopRight">
            <summary>
            Gets the front top right corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.FrontBottomLeft">
            <summary>
            Gets the front bottom left corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.FrontBottomRight">
            <summary>
            Gets the front bottom right corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.BackTopLeft">
            <summary>
            Gets the back top left corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.BackTopRight">
            <summary>
            Gets the back top right corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.BackBottomLeft">
            <summary>
            Gets the back bottom left corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.BackBottomRight">
            <summary>
            Gets the back bottom right corner of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBox.BackBottomTop">
            <summary>
            Gets the back bottom top corner of the bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Contains(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether the bounding box contains the specified point.
            </summary>
            <param name="point">The point to check.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Contains(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Determines whether the bounding box completely contains another bounding box.
            </summary>
            <param name="box">The bounding box to check.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Intersects(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Determines whether the bounding box intersects with another bounding box.
            </summary>
            <param name="box">The bounding box to check for intersection.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Intersect(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Returns the intersection of this bounding box with another bounding box.
            </summary>
            <param name="box">The bounding box to intersect with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Union(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Returns the union of this bounding box with another bounding box.
            </summary>
            <param name="box">The bounding box to union with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Normalize(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Normalizes a point within the bounding box to a [0, 1] range.
            </summary>
            <param name="point">The point to normalize.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Lerp(OnixRuntime.Api.Maths.BoundingBox,System.Single)">
            <summary>
            Linearly interpolates between this bounding box and another bounding box.
            </summary>
            <param name="other">The other bounding box.</param>
            <param name="t">The interpolation factor.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Offset(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a new bounding box offset by the specified vector.
            </summary>
            <param name="offset">The offset vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Inflate(System.Single)">
            <summary>
            Returns a new bounding box inflated by the specified amount in all directions.
            </summary>
            <param name="amount">The amount to inflate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Inflate(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a new bounding box inflated by the specified vector amount in all directions.
            </summary>
            <param name="amount">The vector amount to inflate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Merge(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Returns a new bounding box that merges this bounding box with another.
            </summary>
            <param name="other">The other bounding box.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.GrowToInclude(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a new bounding box that grows to include the specified point.
            </summary>
            <param name="point">The point to include.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.ToString">
            <summary>
            Returns a string representation of the bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.op_Equality(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Determines whether two bounding boxes are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.op_Inequality(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Determines whether two bounding boxes are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Equals(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Determines whether this bounding box is equal to another bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether this bounding box is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.GetHashCode">
            <summary>
            Returns the hash code for this bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBox.ToInteger">
            <summary>
            Converts this floating-point bounding box to an integer bounding box using floor for minimum and ceiling for maximum.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Maths.BoundingBoxI">
            <summary>
            Represents an axis-aligned bounding box (AABB) in 3D space using integer coordinates, with utility methods for containment, intersection, and manipulation.
            This implementation is inclusive so Maximum will be included.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BoundingBoxI.Minimum">
            <summary>
            The minimum (corner) point of the bounding box.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.BoundingBoxI.Maximum">
            <summary>
            The maximum (corner) point of the bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.#ctor(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.BoundingBoxI"/> struct with the specified minimum and maximum points.
            </summary>
            <param name="min">The minimum point.</param>
            <param name="max">The maximum point.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.FromInclusive(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Creates a bounding box adjusted so its maximum is decreased by 1 on each axis.
            This converts an inclusive max representation to an exclusive-style max (useful for iterating ranges).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.FromInclusive(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Overload that accepts an existing BoundingBoxI and returns an adjusted copy.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.#ctor(OnixRuntime.Api.Maths.BoundingBox)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.BoundingBoxI"/> struct from a <see cref="T:OnixRuntime.Api.Maths.BoundingBox"/> struct.
            </summary>
            <param name="box">The bounding box to convert.</param>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBoxI.Size">
            <summary>
            Gets the size (width, height, depth) of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBoxI.Center">
            <summary>
            Gets the center point of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBoxI.Volume">
            <summary>
            Gets the volume of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBoxI.VolumeI">
            <summary>
            Gets the volume of the bounding box.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.BoundingBoxI.Empty">
            <summary>
            Gets whether the bounding box is empty (minimum equals maximum).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Contains(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Determines whether the bounding box contains the specified point.
            </summary>
            <param name="point">The point to check.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Contains(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Determines whether the bounding box completely contains another bounding box.
            </summary>
            <param name="box">The bounding box to check.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Intersects(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Determines whether the bounding box intersects with another bounding box.
            </summary>
            <param name="box">The bounding box to check for intersection.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Intersect(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Returns the intersection of this bounding box with another bounding box.
            </summary>
            <param name="box">The bounding box to intersect with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Union(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Returns the union of this bounding box with another bounding box.
            </summary>
            <param name="box">The bounding box to union with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Offset(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new bounding box offset by the specified vector.
            </summary>
            <param name="offset">The offset vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Inflate(System.Int32)">
            <summary>
            Returns a new bounding box inflated by the specified amount in all directions.
            </summary>
            <param name="amount">The amount to inflate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Inflate(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new bounding box inflated by the specified vector amount in all directions.
            </summary>
            <param name="amount">The vector amount to inflate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Merge(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Returns a new bounding box that merges this bounding box with another.
            </summary>
            <param name="other">The other bounding box.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.GrowToInclude(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Returns a new bounding box that grows to include the specified point.
            </summary>
            <param name="point">The point to include.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.ForEach(System.Action{OnixRuntime.Api.Maths.BlockPos})">
            <summary>
            Executes the specified action for each position in the bounding box.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.ToFloat(System.Boolean)">
            <summary>
            Converts this integer bounding box to a floating-point bounding box.
            </summary>
            /// <param name="display">If you plan on rendering the region of the integer box using this, set this to true.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.ToString">
            <summary>
            Returns a string representation of the bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.op_Equality(OnixRuntime.Api.Maths.BoundingBoxI,OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Determines whether two bounding boxes are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.op_Inequality(OnixRuntime.Api.Maths.BoundingBoxI,OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Determines whether two bounding boxes are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Equals(OnixRuntime.Api.Maths.BoundingBoxI)">
            <summary>
            Determines whether this bounding box is equal to another bounding box.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through all positions in the bounding box.
            </summary>
            <returns>An enumerator for the bounding box.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.Equals(System.Object)">
            <summary>
            Determines whether this bounding box is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.BoundingBoxI.GetHashCode">
            <summary>
            Returns the hash code for this bounding box.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Maths.ChunkPos">
            <summary>
            Represents a chunk position in 2D integer coordinates (X, Y), with utilities for conversion from world/block positions and chunk-relative calculations.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.ChunkPos.X">
            <summary>
            The X coordinate of the chunk position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.ChunkPos.Y">
            <summary>
            The Y coordinate of the chunk position.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/> struct with the specified chunk coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.#ctor(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/> struct from a <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> by converting world coordinates to chunk coordinates.
            </summary>
            <param name="pos">The block position to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.FromWorld(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Converts a <see cref="T:OnixRuntime.Api.Maths.BlockPos"/> to a <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/>.
            </summary>
            <param name="pos">The block position.</param>
            <returns>The corresponding chunk position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.FromWorld(System.Int32,System.Int32)">
            <summary>
            Converts world X and Z coordinates to a <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/>.
            </summary>
            <param name="worldX">The world X coordinate.</param>
            <param name="worldZ">The world Z coordinate.</param>
            <returns>The corresponding chunk position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.GetInChunkBlockPos(System.Int32,System.Int32)">
            <summary>
            Gets the block position within a chunk for the given world coordinates.
            </summary>
            <param name="worldX">The world X coordinate.</param>
            <param name="worldZ">The world Z coordinate.</param>
            <returns>The chunk-relative block position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.op_Equality(OnixRuntime.Api.Maths.ChunkPos,OnixRuntime.Api.Maths.ChunkPos)">
            <summary>
            Checks if two <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/> values are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.op_Inequality(OnixRuntime.Api.Maths.ChunkPos,OnixRuntime.Api.Maths.ChunkPos)">
            <summary>
            Checks if two <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/> values are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/> is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.Equals(OnixRuntime.Api.Maths.ChunkPos)">
            <summary>
            Determines whether this <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/> is equal to another <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/>.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:OnixRuntime.Api.Maths.ChunkPos"/>.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ChunkPos.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.Maths.ColorF">
            <summary>
            Represents a color with floating-point RGBA components and provides utility methods for color manipulation and conversion.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.ColorF.R">
            <summary>
            The red component of the color (0.0 to 1.0).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.ColorF.G">
            <summary>
            The green component of the color (0.0 to 1.0).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.ColorF.B">
            <summary>
            The blue component of the color (0.0 to 1.0).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.ColorF.A">
            <summary>
            The alpha (opacity) component of the color (0.0 to 1.0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.ColorF"/> struct with the specified RGBA components (0.0 to 1.0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.ColorF"/> struct as white (1,1,1,1).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.ColorF"/> struct from integer RGBA values (0-255).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.Random(System.Random,System.Boolean)">
            <summary>
            Generates a random color with optional opacity.
            </summary>
            <param name="random">The random to use, otherwise <see cref="P:System.Random.Shared"/></param>
            <param name="opacity">Whether opacity should be included</param>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.ColorF"/> struct from a hex color code (with or without alpha).
            </summary>
            <param name="hexCode">A 6- or 8-character hex code, optionally prefixed with '#'.</param>
            <exception cref="T:System.ArgumentException">Thrown if the hex code is invalid.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.Opacity(System.Single)">
            <summary>
            Returns a white color with the specified opacity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.Opacity(OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Returns a copy of the given color with the specified opacity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.WithOpacity(System.Single)">
            <summary>
            Returns a copy of this color with the specified opacity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.MultiplyOpacity(System.Single)">
            <summary>
            Returns a copy of this color with its opacity multiplied by the given value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Opaque">
            <summary>
            Returns a copy of this color with full opacity (alpha = 1.0).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Inverted">
            <summary>
            Returns the inverted color (1.0 - R, 1.0 - G, 1.0 - B, A).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.HexColor">
            <summary>
            Gets the hex string representation of this color (including alpha).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.HexColorNoAlpha">
            <summary>
            Gets the hex string representation of this color (without alpha).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.Lerp(OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Linearly interpolates between this color and a target color.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.Lerp(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Linearly interpolates between two colors.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.ToHSL">
            <summary>
            Converts this color to HSL (Hue, Saturation, Lightness).à
            </summary>
            <returns>Returns a tuple (hue [0-360], saturation [0-1], lightness [0-1]).</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.ToHSV">
            <summary>
            Converts this color to HSV (Hue, Saturation, Value).
            </summary>
            <returns>Returns a tuple (hue [0-360], saturation [0-1], value [0-1]).</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.FromHSL(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a ColorF from HSL (Hue [0-360], Saturation [0-1], Lightness [0-1]).
            </summary>
            <param name="h">The hue in range 0 to 360.</param>
            <param name="s">The saturation in range 0 to 1.</param>
            <param name="l">The lightness in range 0 to 1.</param>
            <param name="a">The alpha (opacity) in range 0 to 1.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.FromHSV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a ColorF from HSV (Hue [0-360], Saturation [0-1], Value [0-1]).
            </summary>
            <param name="h">The hue in range 0 to 360.</param>
            <param name="s">The saturation in range 0 to 1.</param>
            <param name="v">The value in range 0 to 1.</param>
            <param name="a">The alpha (opacity) in range 0 to 1.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.FromHSL(System.ValueTuple{System.Single,System.Single,System.Single},System.Single)">
            <summary>
            Creates a ColorF from an HSL tuple (Hue [0-360], Saturation [0-1], Lightness [0-1]).
            </summary>
            <returns>The RGBA Color from the HSL values</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.FromHSV(System.ValueTuple{System.Single,System.Single,System.Single},System.Single)">
            <summary>
            Creates a ColorF from an HSV tuple (Hue [0-360], Saturation [0-1], Value [0-1]).
            </summary>
            <returns>The RGBA Color from the HSV values</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.ShiftHue(System.Single)">
            <summary>
            Returns a new ColorF with the hue shifted by the specified degrees (0-360).
            </summary>
            <param name="degrees">How many degrees to shift by. (Positive or negative.)</param>
            <returns>The new color that had its hut shifted.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.ToString">
            <summary>
            Returns a string representation of this color.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Addition(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds two colors component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Subtraction(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Subtracts two colors component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Multiply(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Multiplies two colors component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Division(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Divides two colors component-wise.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Multiply(OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Multiplies a color by a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Division(OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Divides a color by a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Multiply(System.Single,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Multiplies a scalar by a color.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Division(System.Single,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Divides a scalar by a color.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Implicit(OnixRuntime.Api.Maths.ColorF)~System.Drawing.Color">
            <summary>
            Converts a ColorF to a System.Drawing.Color.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Implicit(System.Drawing.Color)~OnixRuntime.Api.Maths.ColorF">
            <summary>
            Converts a System.Drawing.Color to a ColorF.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Equality(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Checks if two colors are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.op_Inequality(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Checks if two colors are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.Equals(System.Object)">
            <summary>
            Determines whether this color is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.GetHashCode">
            <summary>
            Returns the hash code for this color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Red">
            <summary>
            Gets a predefined red color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Green">
            <summary>
            Gets a predefined green color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Blue">
            <summary>
            Gets a predefined blue color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Yellow">
            <summary>
            Gets a predefined yellow color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Cyan">
            <summary>
            Gets a predefined cyan color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Magenta">
            <summary>
            Gets a predefined magenta color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.White">
            <summary>
            Gets a predefined white color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Black">
            <summary>
            Gets a predefined black color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Gray">
            <summary>
            Gets a predefined gray color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Grey">
            <summary>
            Gets a predefined grey color (alias for gray).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Transparent">
            <summary>
            Gets a predefined transparent color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Orange">
            <summary>
            Gets a predefined orange color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Purple">
            <summary>
            Gets a predefined purple color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Pink">
            <summary>
            Gets a predefined pink color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Brown">
            <summary>
            Gets a predefined brown color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Maroon">
            <summary>
            Gets a predefined maroon color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Navy">
            <summary>
            Gets a predefined navy color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Teal">
            <summary>
            Gets a predefined teal color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Olive">
            <summary>
            Gets a predefined olive color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Lime">
            <summary>
            Gets a predefined lime color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Aqua">
            <summary>
            Gets a predefined aqua color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Sky">
            <summary>
            Gets a predefined sky color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Indigo">
            <summary>
            Gets a predefined indigo color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Violet">
            <summary>
            Gets a predefined violet color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Rose">
            <summary>
            Gets a predefined rose color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Gold">
            <summary>
            Gets a predefined gold color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Silver">
            <summary>
            Gets a predefined silver color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.ColorF.Bronze">
            <summary>
            Gets a predefined bronze color.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.ToRGBA">
            <summary>
            Converts this color to a 32-bit RGBA integer.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.ColorF.FromRGBA(System.UInt32)">
            <summary>
            Creates a ColorF from a 32-bit RGBA integer.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Quaternion">
            <summary>
            Represents a quaternion for 3D rotations.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Quaternion.X">
            <summary>X component.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Quaternion.Y">
            <summary>Y component.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Quaternion.Z">
            <summary>Z component.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Quaternion.W">
            <summary>W component.</summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion from components.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor">
            <summary>
            Constructs the identity quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch, Roll).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (degrees).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (degrees).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.#ctor(OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Constructs a quaternion from a transformation matrix.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Identity">
            <summary>
            The identity quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Zero">
            <summary>
            The zero quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromAxisAngle(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (degrees).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromAxisAngle(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (degrees).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromEuler(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch, Roll).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromEuler(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromEuler(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch, Roll).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromAxisAngle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (degrees).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromEulerRadians(OnixRuntime.Api.Maths.Angles3)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch, Roll) in radians.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromEulerRadians(OnixRuntime.Api.Maths.Angles)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch) in radians.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromEulerRadians(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion from Euler angles (Yaw, Pitch, Roll) in radians.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromAxisAngleRadians(OnixRuntime.Api.Maths.Angles3,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (radians).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromAxisAngleRadians(OnixRuntime.Api.Maths.Angles,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (radians).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromAxisAngleRadians(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion from an axis and angle (radians).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.FromMatrix(OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Constructs a quaternion from a transformation matrix.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Normalized">
            <summary>
            Returns a normalized copy of this quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Conjugated">
            <summary>
            Returns the conjugate of this quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Inversed">
            <summary>
            Returns the inverse of this quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Euler">
            <summary>
            Returns the Euler angles (degrees) representation of this quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.EulerRadians">
            <summary>
            Returns the Euler angles (radians) representation of this quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Matrix">
            <summary>
            Returns the transformation matrix representation of this quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.Slerp(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.Quaternion,System.Single)">
            <summary>
            Spherical linear interpolation between two quaternions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.Multiply(OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Multiplies this quaternion by another quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.Multiply(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Rotates a vector by this quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.Multiply(OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Multiplies this quaternion by a transformation matrix.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.Length">
            <summary>
            The length (magnitude) of the quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.LengthSquared">
            <summary>
            The squared length (magnitude) of the quaternion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Quaternion.IsIdentity">
            <summary>
            Returns true if this is the identity quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.Dot(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.op_Equality(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Checks if two quaternions are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.op_Inequality(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Checks if two quaternions are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.op_Multiply(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.op_Multiply(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Rotates a vector by a quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.op_Multiply(OnixRuntime.Api.Maths.Quaternion,OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Multiplies a quaternion by a transformation matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.Equals(System.Object)">
            <summary>
            Checks if this quaternion is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this quaternion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Quaternion.ToString">
            <summary>
            Returns a string representation of this quaternion.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Rect">
            <summary>
            Represents a rectangle in 2D space with floating-point coordinates, providing utility methods for geometry, containment, and manipulation.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Rect.X">
            <summary>
            The X coordinate of the top-left corner.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Rect.Y">
            <summary>
            The Y coordinate of the top-left corner.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Rect.Z">
            <summary>
            The X coordinate of the bottom-right corner.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Rect.W">
            <summary>
            The Y coordinate of the bottom-right corner.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.Size">
            <summary>
            Gets the size of the rectangle as a Vec2.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.CenterX">
            <summary>
            Gets the center X coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.CenterY">
            <summary>
            Gets the center Y coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.TopLeft">
            <summary>
            Gets the top-left corner as a Vec2.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.TopRight">
            <summary>
            Gets the top-right corner as a Vec2.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.BottomLeft">
            <summary>
            Gets the bottom-left corner as a Vec2.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.BottomRight">
            <summary>
            Gets the bottom-right corner as a Vec2.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.AspectRatio">
            <summary>
            Gets the aspect ratio (width divided by height).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.IsEmpty">
            <summary>
            Gets whether the rectangle is empty (zero or negative width/height).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.FullUV">
            <summary>
            A rectangle representing the full size of normalized coordinates (0,0 to 1,1).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Rect.Zero">
            <summary>
            A rectangle representing the zero area (0,0 to 0,0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Rect"/> struct with all coordinates set to zero.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Rect"/> struct with specified top-left and bottom-right coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.#ctor(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Rect"/> struct from two Vec2 points.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.#ctor(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Rect"/> struct from a top-left coordinate and a Vec2 bottom-right.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.#ctor(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Rect"/> struct from a Vec2 top-left and bottom-right coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromSize(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Creates a rectangle from a top-left point and a size.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromSize(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single)">
            <summary>
            Creates a rectangle from a top-left point and width/height.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromSize(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Creates a rectangle from a top-left X/Y and a size Vec2.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromSize(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rectangle from a top-left X/Y and width/height.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromCenter(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Creates a rectangle centered at a point with a given size.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromCenter(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Creates a rectangle centered at a point with a given size.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromCenter(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single)">
            <summary>
            Creates a rectangle centered at a point with a given width and height.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.FromCenter(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rectangle centered at a point with a given width and height.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithX(System.Single)">
            <summary>
            Returns a copy of this rectangle with the X coordinate replaced by the specified value.
            </summary>
            <param name="x">The new X coordinate for the top-left corner.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified X value and the other coordinates unchanged.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithY(System.Single)">
            <summary>
            Returns a copy of this rectangle with the Y coordinate replaced by the specified value.
            </summary>
            <param name="y">The new Y coordinate for the top-left corner.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified Y value and the other coordinates unchanged.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithZ(System.Single)">
            <summary>
            Returns a copy of this rectangle with the Z coordinate replaced by the specified value.
            </summary>
            <param name="z">The new Z coordinate for the bottom-right corner (X value).</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified Z value and the other coordinates unchanged.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithW(System.Single)">
            <summary>
            Returns a copy of this rectangle with the W coordinate replaced by the specified value.
            </summary>
            <param name="w">The new W coordinate for the bottom-right corner (Y value).</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified W value and the other coordinates unchanged.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithSize(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a copy of this rectangle with the specified size, keeping the top-left corner unchanged.
            </summary>
            <param name="size">The new size as a <see cref="T:OnixRuntime.Api.Maths.Vec2"/> (width, height).</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified size and the same top-left corner.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithSize(System.Single,System.Single)">
            <summary>
            Returns a copy of this rectangle with the specified width and height, keeping the top-left corner unchanged.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified width and height and the same top-left corner.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithWidth(System.Single)">
            <summary>
            Returns a copy of this rectangle with the specified width, keeping the top-left corner and height unchanged.
            </summary>
            <param name="width">The new width.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified width and the same top-left corner and height.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.WithHeight(System.Single)">
            <summary>
            Returns a copy of this rectangle with the specified height, keeping the top-left corner and width unchanged.
            </summary>
            <param name="height">The new height.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Rect"/> with the specified height and the same top-left corner and width.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Contains(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Determines whether the rectangle contains the specified point.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Contains(System.Single,System.Single)">
            <summary>
            Determines whether the rectangle contains the specified coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.CenterInside(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Returns a rectangle of the given size centered inside this rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.CenterInside(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a rectangle of the given size centered inside this rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.NormalizeWith(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Normalizes the rectangle to a given size. This useful for UV coordinates, since you can put pixel coordinates then NormalizeWith the size of the texture.
            </summary>
            <param name="size">The size to normalize with.</param>
            <returns>A rectangle normalized within that size.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.NormalizeWith(System.Single)">
            <summary>
            Normalizes the rectangle to a given size. This useful for UV coordinates, since you can put pixel coordinates then NormalizeWith the size of the texture.
            </summary>
            <param name="size">The size to normalize with.</param>
            <returns>A rectangle normalized within that size.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.NormalizeWith(System.Single,System.Single)">
            <summary>
            Normalizes the rectangle to a given size. This useful for UV coordinates, since you can put pixel coordinates then NormalizeWith the size of the texture.
            </summary>
            <param name="sizeX">The horizontal size to normalize with.</param>
            <param name="sizeY">The vertical size to normalize with.</param>
            <returns>A rectangle normalized within that size.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Overlaps(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Determines whether this rectangle overlaps with another rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Intersection(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Returns the intersection of this rectangle with another rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.United(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Returns the union of this rectangle with another rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.ClampedWithin(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Returns a rectangle clamped within the bounds of another rectangle.
            </summary>
            <param name="toClamp">The rectangle to get its size restricted</param>
            <returns>The rectangle that will not go past this one.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Expand(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a rectangle expanded by the given vector in all directions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Expand(System.Single)">
            <summary>
            Returns a rectangle expanded by the given amount in all directions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Expand(System.Single,System.Single)">
            <summary>
            Returns a rectangle expanded by the given X and Y amounts in all directions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Shrink(System.Single)">
            <summary>
            Returns a rectangle shrunk by the given amount in all directions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Shrink(System.Single,System.Single)">
            <summary>
            Returns a rectangle shrunk by the given X and Y amounts in all directions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Shrink(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a rectangle shrunk by the given vector in all directions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Relative(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns the position of a point relative to the top-left of the rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Relative(System.Single,System.Single)">
            <summary>
            Returns the position of a point relative to the top-left of the rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Absolute(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns the absolute position of a point relative to the rectangle's top-left.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Absolute(System.Single,System.Single)">
            <summary>
            Returns the absolute position of a point relative to the rectangle's top-left.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveBy(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a rectangle moved by the given vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveBy(System.Single,System.Single)">
            <summary>
            Returns a rectangle moved by the given X and Y amounts.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveLeft(System.Single)">
            <summary>
            Returns a rectangle moved left by the given amount.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveRight(System.Single)">
            <summary>
            Returns a rectangle moved right by the given amount.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveUp(System.Single)">
            <summary>
            Returns a rectangle moved up by the given amount.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveDown(System.Single)">
            <summary>
            Returns a rectangle moved down by the given amount.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.MoveTo(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a rectangle moved to the specified position.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.ResizeKeepingAspectRatio(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a new size for this rectangle, keeping the aspect ratio.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Implicit(OnixRuntime.Api.Maths.Rect)~System.Drawing.Rectangle">
            <summary>
            Converts this rectangle to a System.Drawing.Rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Implicit(System.Drawing.Rectangle)~OnixRuntime.Api.Maths.Rect">
            <summary>
            Converts a System.Drawing.Rectangle to a Rect.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Implicit(OnixRuntime.Api.Maths.Rect)~System.Drawing.RectangleF">
            <summary>
            Converts this rectangle to a System.Drawing.RectangleF.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Implicit(System.Drawing.RectangleF)~OnixRuntime.Api.Maths.Rect">
            <summary>
            Converts a System.Drawing.RectangleF to a Rect.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Equality(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Checks if two rectangles are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Inequality(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Checks if two rectangles are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Addition(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds a vector to the rectangle, effectively moving it by that vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.op_Subtraction(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Removes a vector from the rectangle, effectively moving it in the opposite direction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Equals(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Determines whether this rectangle is equal to another rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.Equals(System.Object)">
            <summary>
            Determines whether this rectangle is equal to another object.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.GetHashCode">
            <summary>
            Returns the hash code for this rectangle.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Rect.ToString">
            <summary>
            Returns a string representation of this rectangle.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Maths.TransformationMatrix">
            <summary>
            Represents a 4x4 transformation matrix for 2D/3D graphics, supporting translation, scaling, rotation, and matrix multiplication.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.#ctor">
            <summary>
            Represents a 4x4 transformation matrix for 2D/3D graphics, supporting translation, scaling, rotation, and matrix multiplication.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_1">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_2">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_3">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_4">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_5">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_6">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_7">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_8">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_9">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_10">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_11">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_12">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_13">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_14">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_15">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.Glm4x4_16">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.D2d3x2_1">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.D2d3x2_2">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.D2d3x2_3">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.D2d3x2_4">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.D2d3x2_5">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.TransformationMatrix.D2d3x2_6">
            <summary>Don't use this unless you know what you're doing</summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Identity">
            <summary>
            Returns the identity transformation matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Translate(System.Single,System.Single,System.Single)">
            <summary>
            
            Returns a translation matrix for the given x, y, z values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a translation matrix for the given x, y, z values in the world.
            this function adds the inverted origin so you don't have to do it manually.
            Doing the subtraction before multiplying the matrix fixes the precision error that appear scarily quickly otherwise.
            To use this you would do all your normal matrix math at the origin as normal and position it by multiplying the result by this matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Translate(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Returns a translation matrix for the given 2D position and optional z value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Translate(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a translation matrix for the given 3D position.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(System.Single,System.Single,System.Single)">
            <summary>
            Returns a translation matrix for the given x, y, z values in the world.
            this function adds the inverted origin so you don't have to do it manually.
            Doing the subtraction before multiplying the matrix fixes the precision error that appear scarily quickly otherwise.
            To use this you would do all your normal matrix math at the origin as normal and position it by multiplying the result by this matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Returns a scaling matrix for the given x, y, z values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Scale(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Returns a scaling matrix for the given 2D scale and optional z value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Scale(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a scaling matrix for the given 3D scale.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Scale(System.Single)">
            <summary>
            Returns a uniform scaling matrix for the given scale value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Rotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a rotation matrix for the given angleInDegrees (degrees) and axis.
            </summary>
            <param name="angleInDegrees">Angle in degrees.</param>
            <param name="axisX">X component of the axis.</param>
            <param name="axisY">Y component of the axis.</param>
            <param name="axisZ">Z component of the axis.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Rotate(System.Single,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a rotation matrix for the given angleInDegrees (degrees) and axis vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Rotate(System.Single)">
            <summary>
            Returns a rotation matrix for the given angleInDegrees (degrees) around the Z axis.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.RotateX(System.Single)">
            <summary>
            Returns a rotation matrix for the given angleInDegrees (degrees) around the X axis.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.RotateY(System.Single)">
            <summary>
            Returns a rotation matrix for the given angleInDegrees (degrees) around the Y axis.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.RotateZ(System.Single)">
            <summary>
            Returns a rotation matrix for the given angleInDegrees (degrees) around the Z axis.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Transform(System.Single,System.Single,System.Single)">
            <summary>
            Transforms a 3D point by this matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Transform(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Transforms a 3D vector by this matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Transform(System.Single,System.Single)">
            <summary>
            Transforms a 2D point by this matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Transform(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Transforms a 2D vector by this matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Multiply(OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Returns the product of this matrix and another matrix.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.MultiplyInplace(OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Multiplies this matrix by another matrix in place.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.op_Multiply(OnixRuntime.Api.Maths.TransformationMatrix,OnixRuntime.Api.Maths.TransformationMatrix)">
            <summary>
            Multiplies two transformation matrices.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.Multiply(OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Returns the product of this matrix and a quaternion (applies the quaternion rotation).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.MultiplyInplace(OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Multiplies this matrix by a quaternion in place (applies the quaternion rotation).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.TransformationMatrix.op_Multiply(OnixRuntime.Api.Maths.TransformationMatrix,OnixRuntime.Api.Maths.Quaternion)">
            <summary>
            Multiplies a transformation matrix by a quaternion.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Vec2">
            <summary>
            Represents a 2D vector with floating-point X and Y components, and provides vector operations and utilities.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2.Length">
            <summary>
            Gets the Euclidean length of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2.Normalized">
            <summary>
            Gets a normalized version of this vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2.Magnitude">
            <summary>
            Gets the magnitude (length) of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2.MagnitudeSqr">
            <summary>
            Gets the squared magnitude of the vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2"/> struct with zero values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2"/> struct with the specified X and Y values.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.#ctor(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2"/> struct from a <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> value.
            </summary>
            <param name="value">The <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> value to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2"/> struct with both X and Y set to the same value.
            </summary>
            <param name="value">The value for both X and Y.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.WithX(System.Single)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec2"/> instance with the specified X-coordinate, preserving the current
            Y-coordinate.
            </summary>
            <param name="x">The X-coordinate for the new <see cref="T:OnixRuntime.Api.Maths.Vec2"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec2"/> instance with the specified X-coordinate and the current Y-coordinate.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.WithY(System.Single)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec2"/> instance with the same X value as the current instance and the specified Y
            value.
            </summary>
            <param name="y">The Y value to set in the new <see cref="T:OnixRuntime.Api.Maths.Vec2"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec2"/> instance with the specified Y value and the current X value.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Vec2Random">
            <summary>
            Returns a random Vec2 with X and Y in [0, 1).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2.One">
            <summary>
            Gets a Vec2 with both components set to one.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2.Zero">
            <summary>
            Gets a Vec2 with both components set to zero.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.SetMagnitude(System.Single)">
            <summary>
            Sets the magnitude (length) of the vector.
            </summary>
            <param name="magnitude">The new magnitude to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.SetDirection(System.Single)">
            <summary>
            Sets the direction (angle) of the vector.
            </summary>
            <param name="angle">The new angle to set, in radians.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Distance(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Calculates the distance between this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Angle(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Calculates the angle in radians between this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The angle in radians between the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Dot(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Calculates the dot product of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Cross(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Calculates the cross product of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Lerp(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Performs a linear interpolation between this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <param name="t">The interpolation factor, clamped to [0, 1].</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Min(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a new vector with the minimum components of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The vector with the minimum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Max(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Returns a new vector with the maximum components of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The vector with the maximum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Min(System.Single)">
            <summary>
            Returns a new vector with the minimum components of this vector and a float value.
            </summary>
            <param name="value">The float value.</param>
            <returns>The vector with the minimum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Max(System.Single)">
            <summary>
            Returns a new vector with the maximum components of this vector and a float value.
            </summary>
            <param name="value">The float value.</param>
            <returns>The vector with the maximum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Clamp(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Clamps the vector components to a specified range.
            </summary>
            <param name="min">The minimum vector.</param>
            <param name="max">The maximum vector.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Clamp(System.Single,System.Single)">
            <summary>
            Clamps the vector components to a specified range.
            </summary>
            <param name="min">The minimum float value.</param>
            <param name="max">The maximum float value.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Addition(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds two Vec2 instances component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Addition(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Adds a float value to a Vec2 instance.
            </summary>
            <param name="a">The vector.</param>
            <param name="b">The float value.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Subtraction(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Subtracts two Vec2 instances component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Subtraction(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Subtracts a float value from a Vec2 instance.
            </summary>
            <param name="a">The vector.</param>
            <param name="b">The float value.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_UnaryNegation(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Negates a Vec2 instance.
            </summary>
            <param name="a">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Multiply(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Multiplies two Vec2 instances component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The product of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Multiply(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Multiplies a Vec2 instance by a float value.
            </summary>
            <param name="a">The vector.</param>
            <param name="b">The float value.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Multiply(System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Multiplies a float value by a Vec2 instance.
            </summary>
            <param name="a">The float value.</param>
            <param name="b">The vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Division(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Divides two Vec2 instances component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The quotient of the two vectors.</returns>
            <exception cref="T:System.DivideByZeroException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Division(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Divides a Vec2 instance by a float value.
            </summary>
            <param name="a">The vector.</param>
            <param name="b">The float value.</param>
            <returns>The resulting vector.</returns>
            <exception cref="T:System.DivideByZeroException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Division(System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Divides a float value by a Vec2 instance.
            </summary>
            <param name="a">The float value.</param>
            <param name="b">The vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Implicit(OnixRuntime.Api.Maths.Vec2)~System.Numerics.Vector2">
            <summary>
            Converts a Vec2 instance to a System.Drawing.Vector2 instance.
            </summary>
            <param name="value">The Vec2 instance.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Implicit(System.Numerics.Vector2)~OnixRuntime.Api.Maths.Vec2">
            <summary>
            Converts a System.Drawing.Vector2 instance to a Vec2 instance.
            </summary>
            <param name="value">The System.Drawing.Vector2 instance.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Equality(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Compares two Vec2 instances for equality.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_Inequality(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Compares two Vec2 instances for inequality.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are not equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_LessThan(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Compares two Vec2 instances for less-than.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the first vector is less than the second vector; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_GreaterThan(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Compares two Vec2 instances for greater-than.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the first vector is greater than the second vector; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_LessThanOrEqual(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Compares two Vec2 instances for less-than-or-equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the first vector is less than or equal to the second vector; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Compares two Vec2 instances for greater-than-or-equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the first vector is greater than or equal to the second vector; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Equals(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Determines whether the specified Vec2 is equal to the current Vec2.
            </summary>
            <param name="other">The Vec2 to compare with the current Vec2.</param>
            <returns>True if the specified Vec2 is equal to the current Vec2; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2.ToString(System.String,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Vec2I">
            <summary>
            Represents a 2D vector with integer X and Y components, and provides vector operations and utilities.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec2I.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec2I.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2I.Length">
            <summary>
            Gets the Euclidean length of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2I.Normalized">
            <summary>
            Gets a normalized version of this vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2I.Magnitude">
            <summary>
            Gets the magnitude (length) of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2I.MagnitudeSqr">
            <summary>
            Gets the squared magnitude of the vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> struct with zero values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> struct with the specified X and Y values.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> struct with both X and Y set to the same value.
            </summary>
            <param name="value">The value for both X and Y.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.#ctor(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> struct from a Vec2 value.
            </summary>
            <param name="value">The Vec2 value to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Vec2Random">
            <summary>
            Returns a random Vec2I with X and Y in [0, 100).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.WithX(System.Int32)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> instance with the specified X-coordinate while retaining the current
            Y-coordinate.
            </summary>
            <param name="x">The X-coordinate to use for the new <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> instance with the specified X-coordinate and the current Y-coordinate.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.WithY(System.Int32)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> instance with the specified Y-coordinate,  while retaining the current
            X-coordinate.
            </summary>
            <param name="y">The Y-coordinate to use for the new <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec2I"/> instance with the specified Y-coordinate and the current X-coordinate.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2I.One">
            <summary>
            Gets a Vec2I with both components set to one.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec2I.Zero">
            <summary>
            Gets a Vec2I with both components set to zero.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.SetMagnitude(System.Single)">
            <summary>
            Sets the magnitude (length) of the vector.
            </summary>
            <param name="magnitude">The new magnitude for the vector.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.SetDirection(System.Single)">
            <summary>
            Sets the direction (angle) of the vector.
            </summary>
            <param name="angle">The new direction for the vector, in radians.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Distance(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Calculates the distance between this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Angle(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Calculates the angle between this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The angle between the two vectors, in radians.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Dot(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Calculates the dot product of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Cross(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Calculates the cross product of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Lerp(OnixRuntime.Api.Maths.Vec2I,System.Single)">
            <summary>
            Performs linear interpolation between this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <param name="t">The interpolation factor, clamped between 0 and 1.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Min(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Calculates the minimum of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The vector with the minimum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Max(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Calculates the maximum of this vector and another vector.
            </summary>
            <param name="vec">The other vector.</param>
            <returns>The vector with the maximum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Min(System.Int32)">
            <summary>
            Calculates the minimum of this vector and a scalar value.
            </summary>
            <param name="value">The scalar value.</param>
            <returns>The vector with the minimum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Max(System.Int32)">
            <summary>
            Calculates the maximum of this vector and a scalar value.
            </summary>
            <param name="value">The scalar value.</param>
            <returns>The vector with the maximum components.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Clamp(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Clamps the vector components between the specified minimum and maximum values.
            </summary>
            <param name="min">The minimum values for the components.</param>
            <param name="max">The maximum values for the components.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Clamp(System.Int32,System.Int32)">
            <summary>
            Clamps the vector components between the specified minimum and maximum values.
            </summary>
            <param name="min">The minimum values for the components.</param>
            <param name="max">The maximum values for the components.</param>
            <returns>The clamped vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Addition(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Adds two vectors.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Addition(OnixRuntime.Api.Maths.Vec2I,System.Int32)">
            <summary>
            Adds a vector and a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Subtraction(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Subtracts two vectors.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Subtraction(OnixRuntime.Api.Maths.Vec2I,System.Int32)">
            <summary>
            Subtracts a scalar from a vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_UnaryNegation(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Negates a vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Multiply(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Multiplies two vectors.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Multiply(OnixRuntime.Api.Maths.Vec2I,System.Int32)">
            <summary>
            Multiplies a vector and a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Multiply(System.Int32,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Multiplies a scalar and a vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Division(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Divides two vectors.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Division(OnixRuntime.Api.Maths.Vec2I,System.Int32)">
            <summary>
            Divides a vector by a scalar.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Division(System.Int32,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Divides a scalar by a vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Implicit(OnixRuntime.Api.Maths.Vec2I)~System.Numerics.Vector2">
            <summary>
            Implicitly converts a Vec2I to a System.Drawing.Vector2.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Implicit(System.Numerics.Vector2)~OnixRuntime.Api.Maths.Vec2I">
            <summary>
            Implicitly converts a System.Drawing.Vector2 to a Vec2I.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Equality(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Checks if two vectors are equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_Inequality(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Checks if two vectors are not equal.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_LessThan(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Checks if one vector is less than another. (both values must be smaller)
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_GreaterThan(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Checks if one vector is greater than another. (both values must be larger)
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_LessThanOrEqual(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Checks if one vector is less than or equal to another. (both values must be smaller or equal)
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Checks if one vector is greater than or equal to another. (both values must be larger or equal)
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Equals(OnixRuntime.Api.Maths.Vec2I)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec2I.ToString(System.String,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Vec3">
            <summary>
            Represents a 3D vector with floating-point X, Y, and Z components, and provides vector operations and utilities.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.Length">
            <summary>
            Gets the Euclidean length of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.Normalized">
            <summary>
            Gets a normalized version of this vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.Magnitude">
            <summary>
            Gets the magnitude (length) of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.MagnitudeSqr">
            <summary>
            Gets the squared magnitude of the vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.Direction">
            <summary>
            Gets the direction of the vector as a Vec2 (yaw, pitch).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec3"/> struct with zero values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.One">
            <summary>
            Gets a Vec3 with all components set to one.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Maths.Vec3.Zero">
            <summary>
            Gets a Vec3 with all components set to zero.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec3"/> struct with the specified X, Y, and Z values.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.#ctor(System.Numerics.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec3"/> struct from a Vector2 and an optional Z value.
            </summary>
            <param name="xy">The Vector2 for X and Y.</param>
            <param name="z">The Z component (default 0).</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec3"/> struct with all components set to the same value.
            </summary>
            <param name="value">The value for X, Y, and Z.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.#ctor(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec3"/> struct from a BlockPos.
            </summary>
            <param name="blockPos">The BlockPos to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.WithX(System.Single)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance with the specified X value, while retaining the current Y and Z
            values.
            </summary>
            <param name="x">The new X value for the vector.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance with the specified X value and the current Y and Z values.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.WithY(System.Single)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance with the Y component set to the specified value,  while retaining
            the X and Z components of the current instance.
            </summary>
            <param name="y">The new value for the Y component.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance with the updated Y component.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.WithZ(System.Single)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance with the specified Z-coordinate, while preserving the X and Y
            coordinates of the current instance.
            </summary>
            <param name="z">The new Z-coordinate for the resulting <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Maths.Vec3"/> instance with the specified Z-coordinate and the same X and Y coordinates as the
            current instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Distance(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns the Euclidean distance to another Vec3.
            </summary>
            <param name="vec">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Angle(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns the angle (in radians) between this and another Vec3.
            </summary>
            <param name="vec">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Dot(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns the dot product of this and another Vec3.
            </summary>
            <param name="vec">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.SetMagnitude(System.Single)">
            <summary>
            Sets the magnitude (length) of this vector.
            </summary>
            <param name="magnitude">The new magnitude.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.SetDirection(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Sets the direction of this vector, preserving its magnitude.
            </summary>
            <param name="direction">The direction as a Vec2 (yaw, pitch).</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Rotate(System.Single,System.Single)">
            <summary>
            Rotates this vector by the given yaw and pitch angles.
            </summary>
            <param name="yaw">The yaw angle in radians.</param>
            <param name="pitch">The pitch angle in radians.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Cross(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns the cross product of this and another Vec3.
            </summary>
            <param name="vec">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Lerp(OnixRuntime.Api.Maths.Vec3,System.Single)">
            <summary>
            Linearly interpolates between this and another Vec3.
            </summary>
            <param name="vec">The target Vec3.</param>
            <param name="t">The interpolation factor (0 to 1).</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Min(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a Vec3 with the minimum components of this and another Vec3.
            </summary>
            <param name="vec">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Max(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Returns a Vec3 with the maximum components of this and another Vec3.
            </summary>
            <param name="vec">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Clamp(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Clamps this vector between two Vec3 values.
            </summary>
            <param name="min">The minimum Vec3.</param>
            <param name="max">The maximum Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Clamp(System.Single,System.Single)">
            <summary>
            Clamps this vector between two scalar values.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Addition(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Adds two Vec3 vectors.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Addition(OnixRuntime.Api.Maths.Vec3,System.Single)">
            <summary>
            Adds a scalar value to a Vec3.
            </summary>
            <param name="vec">The Vec3.</param>
            <param name="value">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_UnaryNegation(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Negates a Vec3.
            </summary>
            <param name="vec">The Vec3 to negate.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Subtraction(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Subtracts one Vec3 from another.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Subtraction(OnixRuntime.Api.Maths.Vec3,System.Single)">
            <summary>
            Subtracts a scalar value from a Vec3.
            </summary>
            <param name="vec">The Vec3.</param>
            <param name="value">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Multiply(OnixRuntime.Api.Maths.Vec3,System.Single)">
            <summary>
            Multiplies a Vec3 by a scalar value.
            </summary>
            <param name="vec">The Vec3.</param>
            <param name="scalar">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Multiply(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Multiplies two Vec3 vectors component-wise.
            </summary>
            <param name="vec">The first Vec3.</param>
            <param name="other">The second Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Multiply(System.Single,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Multiplies a scalar value by a Vec3.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="vec">The Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Division(OnixRuntime.Api.Maths.Vec3,System.Single)">
            <summary>
            Divides a Vec3 by a scalar value.
            </summary>
            <param name="vec">The Vec3.</param>
            <param name="scalar">The scalar value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Division(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Divides two Vec3 vectors component-wise.
            </summary>
            <param name="vec">The first Vec3.</param>
            <param name="scalar">The second Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Implicit(System.Numerics.Vector3)~OnixRuntime.Api.Maths.Vec3">
            <summary>
            Implicitly converts a Vector3 to a Vec3.
            </summary>
            <param name="vec">The Vector3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Implicit(OnixRuntime.Api.Maths.Vec3)~System.Numerics.Vector3">
            <summary>
            Implicitly converts a Vec3 to a Vector3.
            </summary>
            <param name="vec">The Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Equality(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether two Vec3 instances are equal.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_Inequality(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether two Vec3 instances are not equal.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_LessThan(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether one Vec3 is less than another.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_GreaterThan(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether one Vec3 is greater than another.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_LessThanOrEqual(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether one Vec3 is less than or equal to another.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.op_GreaterThanOrEqual(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether one Vec3 is greater than or equal to another.
            </summary>
            <param name="left">The left Vec3.</param>
            <param name="right">The right Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.GetHashCode">
            <summary>
            Returns the hash code for this Vec3.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Equals(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Determines whether this instance is equal to another Vec3.
            </summary>
            <param name="other">The other Vec3.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.ToString">
            <summary>
            Returns a string representation of this Vec3.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec3.ToString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a formatted string representation of this Vec3.
            </summary>
            <param name="format">The format string.</param>
            <param name="culture">The culture to use for formatting.</param>
        </member>
        <member name="T:OnixRuntime.Api.Maths.Vec4">
            <summary>
            Represents a 4D vector with floating-point X, Y, Z, and W components, and provides conversions to and from System.Numerics.Vector4.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Maths.Vec4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec4"/> struct with all components set to zero.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec4.#ctor(OnixRuntime.Api.Maths.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec4"/> struct from a <see cref="T:OnixRuntime.Api.Maths.Vec3"/> and a W component.
            </summary>
            <param name="xyz">The Vec3 for X, Y, and Z.</param>
            <param name="w">The W component (default 1).</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Maths.Vec4"/> struct with the specified X, Y, Z, and W values.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec4.op_Implicit(System.Numerics.Vector4)~OnixRuntime.Api.Maths.Vec4">
            <summary>
            Implicitly converts a <see cref="T:System.Numerics.Vector4"/> to a <see cref="T:OnixRuntime.Api.Maths.Vec4"/>.
            </summary>
            <param name="vec">The Vector4 to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.Maths.Vec4.op_Implicit(OnixRuntime.Api.Maths.Vec4)~System.Numerics.Vector4">
            <summary>
            Implicitly converts a <see cref="T:OnixRuntime.Api.Maths.Vec4"/> to a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="vec">The Vec4 to convert.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.ArrayListTag">
            <summary>
            Represents a tag containing a list of NBT tags, enforcing that all contained tags are of the same type.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ArrayListTag.Value">
            <summary>
            The list of NBT tags contained in this ArrayListTag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.Add(OnixRuntime.Api.NBT.NbtTag)">
            <summary>
            Adds a tag to the list, enforcing type consistency.
            </summary>
            <param name="tag">The NBT tag to add.</param>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown if the tag type does not match the existing type in the list.</exception>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ArrayListTag"/> class with an empty list.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.#ctor(System.Collections.Generic.List{OnixRuntime.Api.NBT.NbtTag})">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ArrayListTag"/> class with the specified list of tags.
            </summary>
            <param name="value">The list of NBT tags.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of tags.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of tags (non-generic).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ArrayListTag.ValueTagType">
            <summary>
            Gets the type of tags contained in the list, or End if the list is empty.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ArrayListTag.TagType">
            <summary>
            Gets the tag type for this tag (ArrayList).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ArrayListTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.ByteArrayTag">
            <summary>
            Represents a tag containing a byte array value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ByteArrayTag.Value">
            <summary>
            The byte array value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteArrayTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ByteArrayTag"/> class with an empty array.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteArrayTag.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ByteArrayTag"/> class with the specified byte array.
            </summary>
            <param name="value">The byte array value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ByteArrayTag.TagType">
            <summary>
            Gets the tag type for this tag (ByteArray).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteArrayTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteArrayTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.ByteTag">
            <summary>
            Represents a tag containing a signed byte value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ByteTag.Value">
            <summary>
            The signed byte value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ByteTag"/> class with a value of 0.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteTag.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ByteTag"/> class from a byte value.
            </summary>
            <param name="value">The byte value.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteTag.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ByteTag"/> class from a signed byte value.
            </summary>
            <param name="value">The signed byte value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ByteTag.TagType">
            <summary>
            Gets the tag type for this tag (Byte).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ByteTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.DoubleTag">
            <summary>
            Represents a tag containing a double-precision floating-point value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.DoubleTag.Value">
            <summary>
            The double-precision floating-point value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.DoubleTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.DoubleTag"/> class with a value of 0.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.DoubleTag.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.DoubleTag"/> class with the specified value.
            </summary>
            <param name="value">The double value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.DoubleTag.TagType">
            <summary>
            Gets the tag type for this tag (Double).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.DoubleTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.DoubleTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.FloatTag">
            <summary>
            Represents a tag containing a single-precision floating-point value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.FloatTag.Value">
            <summary>
            The single-precision floating-point value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.FloatTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.FloatTag"/> class with a value of 0.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.FloatTag.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.FloatTag"/> class with the specified value.
            </summary>
            <param name="value">The float value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.FloatTag.TagType">
            <summary>
            Gets the tag type for this tag (Float).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.FloatTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.FloatTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.IntArrayTag">
            <summary>
            Represents a tag containing an array of 32-bit integers for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.IntArrayTag.Value">
            <summary>
            The array of 32-bit integer values of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntArrayTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.IntArrayTag"/> class with an empty array.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntArrayTag.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.IntArrayTag"/> class with the specified integer array.
            </summary>
            <param name="value">The array of 32-bit integers.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.IntArrayTag.TagType">
            <summary>
            Gets the tag type for this tag (IntArray).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntArrayTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntArrayTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.IntTag">
            <summary>
            Represents a tag containing a 32-bit integer value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.IntTag.Value">
            <summary>
            The 32-bit integer value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.IntTag"/> class with a value of 0.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntTag.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.IntTag"/> class with the specified value.
            </summary>
            <param name="value">The 32-bit integer value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.IntTag.TagType">
            <summary>
            Gets the tag type for this tag (Int).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.IntTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.LongTag">
            <summary>
            Represents a tag containing a 64-bit integer value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.LongTag.Value">
            <summary>
            The 64-bit integer value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.LongTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.LongTag"/> class with a value of 0.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.LongTag.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.LongTag"/> class with the specified value.
            </summary>
            <param name="value">The 64-bit integer value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.LongTag.TagType">
            <summary>
            Gets the tag type for this tag (Long).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.LongTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.LongTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.NbtSerializer">
            <summary>
            Provides static methods for serializing and deserializing NBT tags to and from binary and JSON formats.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtSerializer.SerializeBinaryTag(OnixRuntime.Api.NBT.NbtTag)">
            <summary>
            Serializes an NBT tag to a binary format.
            </summary>
            <param name="tag">The NBT tag to serialize.</param>
            <returns>A byte array containing the serialized tag.</returns>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtSerializer.SerializeJsonTag(OnixRuntime.Api.NBT.NbtTag,System.Boolean)">
            <summary>
            Serializes an NBT tag to a JSON string.
            </summary>
            <param name="tag">The NBT tag to serialize.</param>
            <param name="pretty">Whether to format the JSON output for readability.</param>
            <returns>A JSON string representing the tag.</returns>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtSerializer.DeserializeBinaryTag(System.IO.BinaryReader)">
            <summary>
            Deserializes an NBT tag from a binary reader.
            </summary>
            <param name="br">The binary reader to read from.</param>
            <returns>The deserialized NBT tag.</returns>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtSerializer.DeserializeBinaryTag(System.IO.Stream)">
            <summary>
            Deserializes an NBT tag from a stream.
            </summary>
            <param name="stream">The stream to read from.</param>
            <returns>The deserialized NBT tag.</returns>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtSerializer.DeserializeBinaryTag(System.Byte[])">
            <summary>
            Deserializes an NBT tag from a byte array.
            </summary>
            <param name="data">The byte array containing the serialized tag.</param>
            <returns>The deserialized NBT tag.</returns>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtSerializer.DeserializeJsonTag(System.String)">
            <summary>
            Deserializes an NBT tag from a JSON string.
            </summary>
            <param name="tagText">The JSON string representing the tag.</param>
            <returns>The deserialized NBT tag.</returns>
        </member>
        <member name="T:OnixRuntime.Api.NBT.NbtTagType">
            <summary>
            Specifies the type of an NBT tag.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.End">
            <summary>
            Represents the end of an nbt tag, this is useless unless you're reading it from serialized data.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Byte">
            <summary>
            Represents a single sbyte (8 bit integer).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Short">
            <summary>
            Represents a short (16-bit signed integer).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Int">
            <summary>
            Represents a 32-bit signed integer.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Long">
            <summary>
            Represents a 64-bit signed integer.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Float">
            <summary>
            Represents a single-precision 32-bit floating point.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Double">
            <summary>
            Represents a double-precision 64-bit floating point.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.ByteArray">
            <summary>
            Represents a byte array.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.String">
            <summary>
            Represents a string.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.ArrayList">
            <summary>
            Represents an array list.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.Object">
            <summary>
            Represents an object.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.NBT.NbtTagType.IntArray">
            <summary>
            Represents an integer array.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.NBT.NbtTag">
            <summary>
            Represents the base class for all NBT tags, providing serialization and deserialization methods and a tag type property.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.NbtTag.TagType">
            <summary>
            Gets the type of this NBT tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtTag.CreateTag(OnixRuntime.Api.NBT.NbtTagType)">
            <summary>
            Creates a new NbtTag instance of the specified type.
            </summary>
            <param name="type">The NBT tag type.</param>
            <returns>A new NbtTag instance of the specified type.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the type is not a valid NbtTagType.</exception>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.NbtTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="stream">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.ObjectTag">
            <summary>
            Represents a tag containing a collection of named NBT tags, similar to a compound object in NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ObjectTag.Value">
            <summary>
            The dictionary of named NBT tags contained in this ObjectTag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ObjectTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ObjectTag"/> class with an empty dictionary.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ObjectTag.#ctor(System.Collections.Generic.Dictionary{System.String,OnixRuntime.Api.NBT.NbtTag})">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ObjectTag"/> class with the specified dictionary of tags.
            </summary>
            <param name="value">The dictionary of named NBT tags.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ObjectTag.TagType">
            <summary>
            Gets the tag type for this tag (Object).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ObjectTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ObjectTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.ShortTag">
            <summary>
            Represents a tag containing a 16-bit signed integer value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ShortTag.Value">
            <summary>
            The 16-bit signed integer value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ShortTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ShortTag"/> class with a value of 0.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ShortTag.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.ShortTag"/> class with the specified value.
            </summary>
            <param name="value">The 16-bit signed integer value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.ShortTag.TagType">
            <summary>
            Gets the tag type for this tag (Short).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ShortTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.ShortTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.NBT.StringTag">
            <summary>
            Represents a tag containing a string value for NBT serialization.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.NBT.StringTag.Value">
            <summary>
            The string value of this tag.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.StringTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.StringTag"/> class with an empty string.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.StringTag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.NBT.StringTag"/> class with the specified string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="P:OnixRuntime.Api.NBT.StringTag.TagType">
            <summary>
            Gets the tag type for this tag (String).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.NBT.StringTag.SerializeBinaryInternal(System.IO.Stream)">
            <summary>
            Serializes the tag to a binary stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:OnixRuntime.Api.NBT.StringTag.DeserializeBinaryInternal(System.IO.BinaryReader)">
            <summary>
            Deserializes the tag from a binary stream.
            </summary>
            <param name="reader">The binary reader to read from.</param>
        </member>
        <member name="T:OnixRuntime.Api.Onix">
            <summary>
            Provides static access to core Onix runtime components, such as game, events, player, world, input, server, connection, rendering, client, and GUI.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Game">
            <summary>
            Gets the Onix game instance.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Events">
            <summary>
            Gets the Onix events instance.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.LocalPlayer">
            <summary>
            Gets the local player, or null if not available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.World">
            <summary>
            Gets the runtime world for the local player, or null if not available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Dimension">
            <summary>
            Gets the current dimension if available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Region">
            <summary>
            Gets the current region which allows you to get blocks if available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Input">
            <summary>
            Gets the game input handler.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.LocalServer">
            <summary>
            Gets the local game server, or null if not available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.ConnectionInfo">
            <summary>
            Gets the connection info.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Render">
            <summary>
            Gets the render contexts.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Client">
            <summary>
            Gets the Onix client things instance.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Onix.Gui">
            <summary>
            Gets the game GUI info.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ClientNotificationType">
            <summary>
            Specifies the type of client notification.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ClientNotificationType.Banner">
            <summary>
            A banner notification that appears at the top of the screen.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ClientNotificationType.Tray">
            <summary>
            a Tray notification that appears at the bottom right of the screen.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClientThings">
            <summary>
            Provides access to Onix client-specific features such as notifications, tooltips, modules, and settings.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClientThings.OnNotificationClickedDelegate">
            <summary>
            Invoked when a notification is clicked by the user.
            return true to dismiss the notification, false to keep it open.
            </summary>
            <returns>true to dismiss the notification, false to keep it open.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.Notify(System.String,System.String,System.Single,OnixRuntime.Api.ClientNotificationType,System.Boolean,OnixRuntime.Api.OnixClientThings.OnNotificationClickedDelegate)">
            <summary>
            Shows a notification to the user.
            Note: For the <paramref name="onClick"/>, returning true will dismiss the notification, returning false will keep it open.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message of the notification.</param>
            <param name="duration">The duration in seconds for the notification.</param>
            <param name="type">The type of notification.</param>
            <param name="mute">Whether to mute the notification sound.</param>
            <param name="onClick">An optional delegate to invoke when the notification is clicked. Return true to dismiss the notification, false to keep it open.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.NotifyBanner(System.String,System.String,System.Single,System.Boolean,OnixRuntime.Api.OnixClientThings.OnNotificationClickedDelegate)">
            <summary>
            Shows a banner notification to the user.
            Note: For the <paramref name="onClick"/>, returning true will dismiss the notification, returning false will keep it open.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message of the notification.</param>
            <param name="duration">The duration in seconds for the notification.</param>
            <param name="mute">Whether to mute the notification sound.</param>
            <param name="onClick">An optional delegate to invoke when the notification is clicked. Return true to dismiss the notification, false to keep it open.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.NotifyTray(System.String,System.String,System.Single,System.Boolean,OnixRuntime.Api.OnixClientThings.OnNotificationClickedDelegate)">
            <summary>
            Shows a tray notification to the user.
            Note: For the <paramref name="onClick"/>, returning true will dismiss the notification, returning false will keep it open.
            </summary>
            <param name="title">The title of the notification.</param>
            <param name="message">The message of the notification.</param>
            <param name="duration">The duration in seconds for the notification.</param>
            <param name="mute">Whether to mute the notification sound.</param>
            <param name="onClick">An optional delegate to invoke when the notification is clicked. Return true to dismiss the notification, false to keep it open.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.SetTooltipText(System.String)">
            <summary>
            Sets the tooltip text at the given point.
            You should only call this if the user's mouse is within the desired area of the tooltip.
            The tooltip will be displayed by the client based on the user's preferences.
            This has text wrapping support so you don't need to \n your text.
            </summary>
            <param name="text">The text in the tooltip.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.SetTooltipText(System.String,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Sets the tooltip text at the given point.
            The tooltip will be displayed by the client based on the user's preferences.
            This has text wrapping support so you don't need to \n your text.
            </summary>
            <param name="text">The text in the tooltip.</param>
            <param name="tooltipArea">The area in which the tooltip should be shown if the mouse is inside it.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.OpenUrl(System.String)">
            <summary>
            Opens the specified URL in the user's browser.
            </summary>
            <param name="url">The URL to open.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.OpenDirectory(System.String)">
            <summary>
            Opens the specified directory in the file explorer.
            </summary>
            <param name="path">The directory path to open.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.OpenFile(System.String)">
            <summary>
            Opens the specified file in the default application.
            </summary>
            <param name="path">The file path to open.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClientThings.Modules">
            <summary>
            Gets the list of Onix modules.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClientThings.SettingRegistry">
            <summary>
            Gets or sets the Onix setting registry.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClientThings.CommandPrefix">
            <summary>
            Gets the command prefix used by the client.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClientThings.Waypoints">
            <summary>
            Gets the onix waypoint manager, letting you manipulate waypoints.
            Make sure you check <see cref="P:OnixRuntime.Api.OnixClient.OnixWaypointManager.Enabled"/> before doing anything!
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.ExecuteCommand(System.String,System.Boolean)">
            <summary>
            Executes a client command (don't include the prefix!).
            </summary>
            <param name="command">The command with its arguments to execute without the prefix.</param>
            <param name="silenceChat">Set to true if you don't want the output to show up in chat.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.ShowColorPicker(OnixRuntime.Api.OnixClient.OnixSetting,OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Shows a color picker for the given setting.
            You should open this in the center of your button, it will pick whether it goes up or down.
            </summary>
            <param name="setting">The setting to open the picker for.</param>
            <param name="openPoint">Where to open from.</param>
            <param name="yOffset">The y offset from the open point.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClientThings.ShowKeyPicker(OnixRuntime.Api.OnixClient.OnixSetting)">
            <summary>
            Shows a color picker for the given setting.
            </summary>
            <param name="setting">The setting to open a keybind picker for.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClientThings.ThemeV3">
            <summary>
            Gets the onix client v3 user's theme.
            You can use this to design your plugin to match the user's theme and the rest of the client.
            You should cache this value if you use it more than once in the same function.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixClientScreen">
            <summary>
            Represents an in client screen that you can implement.
            This lets you do proper in-client ui without having to worry about the mods showing up on top.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.ScreenName">
            <summary>
            The name of the screen.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new ClientScreen instance.
            This allows you to open it and it acts like other client screens.
            It hides the screen below it and the hud elements like fps counter.
            </summary>
            <param name="name">The name of your script. Only one screen can have that name in this plugin.</param>
            <param name="blur">If true, the background will be blurred for you.</param>
            <param name="isFullscreen">If true, it will hide screens below it, the color picker is an example of a screen that is not full screen.</param>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException">When the name is already taken by another instance in this plugin.</exception>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.Position">
            <summary>
            The position you should render the content of your screen at.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.Size">
            <summary>
            The size of your screen. Try not to render past Position + Size!
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.RenderArea">
            <summary>
            Your screen's render area, you should do all rendering within that rectangle.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.IsFullscreen">
            <summary>
            Gets or sets whether the screen is in fullscreen mode.
            Fullscreen mode hides the screen below it and the hud elements like fps counter.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.ClickInput">
            <summary>
            Gets the last click since the last time <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.HandleAllInputs"/> was called.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientScreen.ScrollCount">
            <summary>
            How many scrolls have been made on this screen since the last time <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.HandleAllInputs"/> was called.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.HandleAllInputs">
            <summary>
            Handles all inputs for this screen.
            This will reset the <see cref="P:OnixRuntime.Api.OnixClient.OnixClientScreen.ClickInput"/> and <see cref="P:OnixRuntime.Api.OnixClient.OnixClientScreen.ScrollCount"/> values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnOpened">
            <summary>
            Called when the screen is opened.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnClosed">
            <summary>
            Called when the screen has been requested to close, if you return true it will cancel the closing.
            This is for when you have submenus and want to close just those before closing the main screen.
            </summary>
            <returns>true to not close the screen.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.GetCloseAnimationDuration">
            <summary>
            How long in seconds is this screen's close animation.
            Will switch to <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderClosing(OnixRuntime.Api.Rendering.RendererCommon2D)"/> and <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderGameClosing(OnixRuntime.Api.Rendering.RendererGame)"/> and then call <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnCloseFinished"/> when the time is over.
            </summary>
            <returns>The duration in question.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnCloseFinished">
            <summary>
            Called when the screen is finished closing.
            If you use onix settings and know nothing below you uses settings, you should call <see cref="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.SettingsMenuClosed"/> here. base.OnCloseFinished(); will do that for you.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.ShouldPreventInputs">
            <summary>
            Used to tell if the screen should prevent inputs from going to the game or screens below.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.ForceDirect2D">
            <summary>
            Force the use of Direct2D for rendering <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRender(OnixRuntime.Api.Rendering.RendererCommon2D)"/> and <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderClosing(OnixRuntime.Api.Rendering.RendererCommon2D)"/>.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnGameWindowResized(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Called whenever the game's window is resized, allowing you to resize your screen or have custom resize logic.
            </summary>
            <param name="windowSize">The new size of the window.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnInput(OnixRuntime.Api.Inputs.InputKey,System.Boolean)">
            <summary>
            Called when there is a new input event happening on your screen.
            Returning true will prevent the screens and game below from receiving it.
            </summary>
            <param name="key">The key that was pressed.</param>
            <param name="isDown">If it was it getting clicked or not.</param>
            <returns>true to mention you handled it and hide it from the screens and game below.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderWorld(OnixRuntime.Api.Rendering.RendererWorld)">
            <summary>
            Called when the world is being rendered.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRender(OnixRuntime.Api.Rendering.RendererCommon2D)">
            <summary>
            Called when you should render your screen.
            This could be RednererDirect2D or RendererGame, depending on user preference or <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.ForceDirect2D"/>
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderClosing(OnixRuntime.Api.Rendering.RendererCommon2D)">
            <summary>
            Called when you should render your screen's closing animation.
            This could be RednererDirect2D or RendererGame, depending on user preference or <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.ForceDirect2D"/>
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderGame(OnixRuntime.Api.Rendering.RendererGame)">
            <summary>
            Called when the game is being rendered and your screen is closing. This is useful for getting data from the game since <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRender(OnixRuntime.Api.Rendering.RendererCommon2D)"/> may be Direct2D.
            You should use <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderClosing(OnixRuntime.Api.Rendering.RendererCommon2D)"/> to actually render the content.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderGameClosing(OnixRuntime.Api.Rendering.RendererGame)">
            <summary>
            Called when the game is being rendered. This is useful for getting data from the game since <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderClosing(OnixRuntime.Api.Rendering.RendererCommon2D)"/> may be Direct2D.
            You should use <see cref="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OnRenderClosing(OnixRuntime.Api.Rendering.RendererCommon2D)"/> to actually render the content.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.OpenScreen">
            <summary>
            Opens the screen now if it's not already opened.
            </summary>
            <returns>Whether the screen was opened or not.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixClientScreen.CloseScreen">
            <summary>
            Closes the screen now if it's not already closed.
            </summary>
            <returns>Whether the screen was closed or not.</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixClientThemeV3">
            <summary>
            Represents the theme colors used by the Onix client (version 3).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Text">
            <summary>
            Color used for primary text displayed in the UI.
            You can probably get away with reducing the opacity for secondary text.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Blocked">
            <summary>
            Color used for blocked/forbidden states (e.g. errors or unavailable items).
            Sometimes used to have a popup have more contrast/opacity over the background.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Accent">
            <summary>
            Accent color used to indicate enabled/primary controls and highlights.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Disabled">
            <summary>
            Color used for disabled UI elements.
            I think this is used once for the bool's switch background in the disabled state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Highlight">
            <summary>
            Color used for highlighted elements or hover states.
            This is also what's used for the unfilled slider background.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Outline">
            <summary>
            Color used for outlines and borders around controls.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.WindowBackground">
            <summary>
            Background color for windows or panels.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Button">
            <summary>
            Color used for some buttons in the UI. See <see cref="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Accent"/> for primary color usage.
            Which one is used is a bit inconsistent, often <see cref="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Accent"/> is used.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixClientThemeV3.Scrollbar">
            <summary>
            Color used for scrollbars.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleType">
            <summary>
            The type of module this is.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.Module">
            <summary>
            A normal built in module that isn't rendering a visual ui element.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.Visual">
            <summary>
            A built-in module that is rendering a visual ui element and can be moved around.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.LegacyScripting">
            <summary>
            A module that is created with legacy scripting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.LegacyScriptingVisual">
            <summary>
            A module that is created with legacy scripting and is rendering a visual ui element and can be moved around.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.TextualVisual">
            <summary>
            A built-in specialization of the visual module that handles most things.
            They have an extra text property and render a visual ui element that is a label with a potential icon.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.CSharp">
            <summary>
            A module that is created with a C# plugin.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.CSharpVisual">
            <summary>
            A module that is created with a C# plugin and is rendering a visual ui element and can be moved around.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleType.CSharpTextualVisual">
            <summary>
            Same as TextualVisual but created with C#.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions">
            <summary>
            Extension methods for the OnixModuleType enum providing helper methods to check module type characteristics.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.IsVisual(OnixRuntime.Api.OnixClient.OnixModuleType)">
            <summary>
            Determines if the module type is visual in some way (that makes it have a position, size, anchor etc.).
            </summary>
            <param name="type">The OnixModuleType to check.</param>
            <returns>True if the module type is considered visual; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.IsTextual(OnixRuntime.Api.OnixClient.OnixModuleType)">
            <summary>
            Determines if the module type is textual in some way (that makes it have a Text property).
            </summary>
            <param name="type">The OnixModuleType to check.</param>
            <returns>True if the module type is considered textual; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.IsCSharp(OnixRuntime.Api.OnixClient.OnixModuleType)">
            <summary>
            Determines if the module type is CSharp in some way.
            </summary>
            <param name="type">The OnixModuleType to check.</param>
            <returns>True if the module type is CSharp-based; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.IsLegacyScript(OnixRuntime.Api.OnixClient.OnixModuleType)">
            <summary>
            Determines if the module type is legacy scripting in some way.
            </summary>
            <param name="type">The OnixModuleType to check.</param>
            <returns>True if the module type is based on legacy scripting; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.IsNormal(OnixRuntime.Api.OnixClient.OnixModuleType)">
            <summary>
            Determines if the module type is not visual or textual.
            </summary>
            <param name="type">The OnixModuleType to check.</param>
            <returns>True if the module type is considered normal (not specialized); otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTypeExtensions.IsNative(OnixRuntime.Api.OnixClient.OnixModuleType)">
            <summary>
            Determines if the module type is native to the client and not an extension.
            </summary>
            <param name="type">The OnixModuleType to check.</param>
            <returns>True if the module type is native to the client; otherwise, false.</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingsList">
            <summary>
            Represents a list of Onix settings with various wrappers and helper functions.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingsList.Settings">
            <summary>
            The actual list of settings, no real reason to use this.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingsList.#ctor(System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.OnixClient.OnixSetting})">
            <summary>
            Creates a new settings list, no reason for you to do this.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingsList.Item(System.Int32)">
            <summary>
            Gets a setting at that index.
            </summary>
            <param name="index">The index of the setting to get.</param>
            <returns>The setting at that index.</returns>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingsList.Count">
            <summary>
            The amount of settings in the list.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingsList.GetSetting(System.String)">
            <summary>
            Tries to get a setting by its save name or null.
            </summary>
            <param name="saveName">the save name of the setting to get.</param>
            <returns>The setting by that name or null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingsList.GetSetting``1(System.String)">
            <summary>
            Tries to get a setting by its save name or null.
            </summary>
            <typeparam name="T">The setting type to get.</typeparam>
            <param name="saveName">the save name of the setting to get.</param>
            <returns>The setting by that name or null.</returns>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingsList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException">
            <summary>
            Exception thrown when attempting to add a setting that already has a parent.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModule">
            <summary>
            A module in the onix client.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition">
            <summary>
            The position to insert a setting in the settings list.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition.End">
            <summary>
            Inserts the setting at the end of the list.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition.Start">
            <summary>
            Inserts the setting at the start of the list.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition.Before">
            <summary>
            Inserts the setting at a specific index in the list.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition.After">
            <summary>
            Adds the setting after the index in the list.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new module.
            </summary>
            <param name="name">The visual name of the module.</param>
            <param name="description">A description for the module.</param>
            <param name="saveName">The save name of the module, it will be saved under this name.</param>
            <param name="includeToggleKey">If the module should have a key to toggle it on and off.</param>
            <param name="register">If you want to register the module in the client.</param>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.Dispose">
            <summary>
            Releases the resources used by the module.
            It removes it from the list if it has been registered and orphans its settings.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new module.
            </summary>
            <param name="name">The visual name of the module.</param>
            <param name="description">A description for the module.</param>
            <param name="includeToggleKey">If the module should have a key to toggle it on and off.</param>
            <param name="register">If you want to register the module in the client.</param>
            <exception cref="T:OnixRuntime.Api.Errors.OnixRuntimeException"></exception>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.PluginUuid">
            <summary>
            The UUID of the plugin that created this module or nil if it is not a plugin module.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.Name">
            <summary>
            The name of the module, e.g. "Fps Counter".
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.SaveName">
            <summary>
            The name used to save the module. e.g. "module.fps_counter.name"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.Description">
            <summary>
            The description of the module.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.Enabled">
            <summary>
            If the module is enabled or not.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.IsBlocked">
            <summary>
            If the module is blocked or not.
            When this is true, it cannot be enabled or used unless it is <see cref="P:OnixRuntime.Api.OnixClient.OnixModule.IsBlockedEnabled"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.IsBlockedEnabled">
            <summary>
            If the module is blocked in the enabled position or not.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.ToggleKey">
            <summary>
            The keybind used to toggle the module on and off.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.IsToggle">
            <summary>
            Whether the module is a toggle module. If true it means you can enable the mod and it stays on. If false it means you have to hold the key for it to remain on.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.IsFavorite">
            <summary>
            If the module is in the favorites or not.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.IsHidden">
            <summary>
            If the module is hidden in the UI or not.
            This will not do anything for the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.UsesLegacyRenderer">
            <summary>
            Gets or sets whether the visual module uses the legacy rendering system.
            This property can only be set for C# modules.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.ModuleType">
            <summary>
            The type of module this is.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModule.Settings">
            <summary>
            The settings of the module.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.SaveAsJson">
            <summary>
            Gets the serialized JSON of the module.
            </summary>
            <returns>The JSON of the module.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.LoadFromJson(System.String)">
            <summary>
            Loads the module from a JSON string.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.RefreshSettingsInUI">
            <summary>
            Refreshes the settings list in the user interface.
            This is only useful if you edit the settings list while the module's page is opened.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.InsertSetting(OnixRuntime.Api.OnixClient.OnixSetting,System.Int32,OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition,System.Boolean)">
            <summary>
            Inserts a setting into a module.
            Make sure that the setting does not have any parents or it will throw an exception.
            </summary>
            <param name="setting">The setting to insert.</param>
            <param name="index">The index of where you want the setting to be added (depends on mode).</param>
            <param name="mode">How do you want the setting to be inserted.</param>
            <param name="correctCategory">If categories should be corrected to include your setting if they would have.</param>
            <exception cref="T:OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException">When the setting already has a parent.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the setting is inserted at an invalid position.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.InsertSetting(OnixRuntime.Api.OnixClient.OnixSetting,OnixRuntime.Api.OnixClient.OnixSetting,OnixRuntime.Api.OnixClient.OnixModule.SettingInsertionPosition,System.Boolean)">
            <summary>
            Inserts a setting into a module.
            </summary>
            <param name="setting">The setting to add.</param>
            <param name="settingToUseAsIndex">A setting that will be your index, only works with before or after modes.</param>
            <param name="mode">Insert it before or after the setting. Any other value is invalid and will default to an index of 0 or 1.</param>
            <param name="correctCategory">If categories should be corrected to include your setting if they would have.</param>
            <exception cref="T:OnixRuntime.Api.OnixClient.SettingAlreadyHasAParentException">When the setting already has a parent.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the setting is inserted at an invalid position.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.StopLastCategoryHere">
            <summary>
            Makes a category stop considering settings that are added after this function was called.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.op_Equality(OnixRuntime.Api.OnixClient.OnixModule,OnixRuntime.Api.OnixClient.OnixModule)">
            <summary>
            Checks if two <see cref="T:OnixRuntime.Api.OnixClient.OnixModule"/> instances are equal.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are equal, false otherwise.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.op_Inequality(OnixRuntime.Api.OnixClient.OnixModule,OnixRuntime.Api.OnixClient.OnixModule)">
            <summary>
            Checks if two <see cref="T:OnixRuntime.Api.OnixClient.OnixModule"/> instances are not equal.
            </summary>
            <param name="left">The left instance to compare.</param>
            <param name="right">The right instance to compare.</param>
            <returns>True if the instances are not equal, false otherwise.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.Save">
            <summary>
            Saves the setting to json for persistent storage.
            </summary>
            <returns>The json or null if there is nothing to save.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.Load(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Loads the setting from json.
            If the value was null this will not get called so what you're getting is whatever the last value you returned in <see cref="M:OnixRuntime.Api.OnixClient.OnixModule.Save"/> was.
            Read it lazily like there is no tomorrow, every setting is in its own try-catch.
            If you change what you save make sure to have migration code in place.
            </summary>
            <param name="root">The json you last saved.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModule.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter">
            <summary>
            Abstract base class for adapting property values to OnixSetting types.
            Provides common functionality for converting between property values and settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.ValueType">
            <summary>
            Gets the type of value this adapter handles.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.Setting">
            <summary>
            Gets the OnixSetting instance associated with this adapter.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.Redirector">
            <summary>
            Gets the OnixModuleSettingRedirector instance that owns this adapter.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.Initialize(OnixRuntime.Api.OnixClient.OnixModule,System.Reflection.PropertyInfo)">
            <summary>
            Initializes the adapter with the specified module and property.
            </summary>
            <param name="mod">The OnixModule to initialize with.</param>
            <param name="property">The PropertyInfo for the property being adapted.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetValue">
            <summary>
            Gets the current value of the setting.
            </summary>
            <returns>The current setting value.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SetValue(System.Object)">
            <summary>
            Sets the value of the setting.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.#ctor">
            <summary>
            Initializes a new instance of the OnixSettingValueAdapter class.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo">
            <summary>
            Contains information about a setting's name and description.
            </summary>
            <param name="Name">The name of the setting.</param>
            <param name="Description">A brief description of the setting.</param>
            <param name="SaveName">The name used to save the setting.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Contains information about a setting's name and description.
            </summary>
            <param name="Name">The name of the setting.</param>
            <param name="Description">A brief description of the setting.</param>
            <param name="SaveName">The name used to save the setting.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo.Name">
            <summary>The name of the setting.</summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo.Description">
            <summary>A brief description of the setting.</summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo.SaveName">
            <summary>The name used to save the setting.</summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the name information for a setting.
            If none are provided, it will guess from the property's name.
            </summary>
            <param name="property">The property being adapted.</param>
            <returns>The name information for the setting.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetValue``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the current value of the setting.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="property">The property being adapted.</param>
            <returns>The current setting value.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.HandleAirAndProperties(OnixRuntime.Api.OnixClient.OnixModule,System.Reflection.PropertyInfo,OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.SettingNameInfo@)">
            <summary>
            Gets the current value of the setting.
            </summary>
            <param name="mod">The module containing the setting.</param>
            <param name="property">The property being adapted.</param>
            <param name="nameInfo">The name information for the setting for you to re-use.</param>
            <returns>The current setting value.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.HandlePostProcessing(System.Reflection.PropertyInfo,OnixRuntime.Api.OnixClient.OnixModule)">
            <summary>
            Handles post-processing for the specified property.
            For things that can only happen after the setting has been created by your <see cref="T:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter"/>
            </summary>
            <param name="property">The property being adapted.</param>
            <param name="mod">The module containing the setting.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetChangeCallback(System.Reflection.PropertyInfo)">
            <summary>
            Gets the change callback out of the property if any.
            </summary>
            <param name="property">The property being adapted.</param>
            <returns>The change callback delegate, if found; otherwise, null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetMinMax``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the change callback out of the property if any.
            If there are none, <see cref="T:System.ArgumentNullException"/> is thrown.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="property">The property being adapted.</param>
            <returns>The min and max values for the setting, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">When there is no MinMax attribute.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetMin``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the min value only for the setting out of the property if any.
            If there are none, <see cref="T:System.ArgumentNullException"/> is thrown.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="property">The property being adapted.</param>
            <returns>The min value for the setting, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">When there is no Min/MinMax attribute.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapter.GetMax``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the max value only for the setting out of the property if any.
            If there are none, <see cref="T:System.ArgumentNullException"/> is thrown.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="property">The property being adapted.</param>
            <returns>The max value for the setting, if found; otherwise, null.</returns>
            <exception cref="T:System.ArgumentNullException">When there is no Max/MinMax attribute.</exception>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingValueAdapterRegistry">
            <summary>
            Registry for managing OnixSettingValueAdapter instances.
            Provides functionality to register, retrieve, and manage adapters for different value types.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapterRegistry.GetAdapter(System.Type,OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector)">
            <summary>
            Gets the adapter for a specific type.
            </summary>
            <param name="type">The type to get an adapter for.</param>
            <param name="redirector">The setting redirector instance or null.</param>
            <returns>The setting adapter for the specified type.</returns>
            <exception cref="T:System.NotImplementedException">Thrown when there is no value adapter for the specified type.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingValueAdapterRegistry.GetAdapter``1(OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector)">
            <summary>
            Gets the adapter for a specific type.
            </summary>
            <param name="redirector">The setting redirector instance or null.</param>
            <typeparam name="T">The type to get an adapter for.</typeparam>
            <returns>The setting adapter for the specified type.</returns>
            <exception cref="T:System.NotImplementedException">Thrown when there is no value adapter for the specified type.</exception>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector">
            <summary>
            Base class for redirecting module settings through properties with attributes.
            Provides a declarative way to define module settings using properties and attributes.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CurrentModule">
            <summary>
            Gets the current OnixModule associated with this redirector.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AddMissingSettingsToModule">
            <summary>
            If this is true, settings that aren't already present in the module will be added automatically.
            If this is false, settings that aren't already present will be created as placeholders, not added to the <see cref="T:OnixRuntime.Api.OnixClient.OnixModule"/>
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.Boolean)">
            <summary>
            Will create a redirector with an existing mod.
            </summary>
            <param name="currentModule">The module to wrap.</param>
            <param name="addMissingSettingsToModule">Add missing settings into module or as placeholder.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new redirector with a new module.
            </summary>
            <param name="name">The name of the module.</param>
            <param name="description">The description of the module.</param>
            <param name="saveName">The save name of the module.</param>
            <param name="register">Should that module be registered into the client's modules list</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.#ctor">
            <summary>
            Creates a blank mod, this is useful for creating UI. See <see cref="T:OnixRuntime.Api.OnixClient.OnixSettingListRenderer"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute">
            <summary>
            Attribute to specify the name, description, and save name for a setting.
            </summary>
            <param name="name">The display name of the setting.</param>
            <param name="description">The description of the setting.</param>
            <param name="saveName">The name used when saving the setting. If null, uses snake_case conversion of property name.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Attribute to specify the name, description, and save name for a setting.
            </summary>
            <param name="name">The display name of the setting.</param>
            <param name="description">The description of the setting.</param>
            <param name="saveName">The name used when saving the setting. If null, uses snake_case conversion of property name.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute.Name">
            <summary>
            Gets the display name of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute.Description">
            <summary>
            Gets the description of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.NameAttribute.SaveName">
            <summary>
            Gets the save name of the setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute">
            <summary>
            Attribute to specify the default value for a setting.
            Supports various value types including primitives, vectors, colors, and input keys.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.Value">
            <summary>
            Gets the default value for the setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance with a boolean value.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance with an object value.
            </summary>
            <param name="value">The object value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with an integer value.
            </summary>
            <param name="value">The integer value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance with a float value.
            </summary>
            <param name="value">The float value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance with a string value.
            </summary>
            <param name="value">The string value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance with a Vec2 value.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with a Vec3 value.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with a BlockPos value.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with a ColorF value from float components.
            </summary>
            <param name="r">The red component (0.0 to 1.0).</param>
            <param name="g">The green component (0.0 to 1.0).</param>
            <param name="b">The blue component (0.0 to 1.0).</param>
            <param name="a">The alpha component (0.0 to 1.0).</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with a ColorF value from integer components.
            </summary>
            <param name="r">The red component (0 to 255).</param>
            <param name="g">The green component (0 to 255).</param>
            <param name="b">The blue component (0 to 255).</param>
            <param name="a">The alpha component (0 to 255).</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(OnixRuntime.Api.Inputs.OnixTextbox)">
            <summary>
            Initializes a new instance with an OnixTextbox value.
            </summary>
            <param name="value">The OnixTextbox value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(OnixRuntime.Api.Inputs.InputKey.Type)">
            <summary>
            Initializes a new instance with an InputKey.Type value.
            </summary>
            <param name="value">The InputKey.Type value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ValueAttribute.#ctor(OnixRuntime.Api.Inputs.InputKey.GamepadInputType[])">
            <summary>
            Initializes a new instance with gamepad input types.
            </summary>
            <param name="value">The array of gamepad input types.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute">
            <summary>
            Attribute to specify minimum and maximum values for a setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.Min">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.Max">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance with object min/max values.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with integer min/max values.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance with float min/max values.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with Vec2 min/max values.
            </summary>
            <param name="minX">The minimum X value.</param>
            <param name="minY">The minimum Y value.</param>
            <param name="maxX">The maximum X value.</param>
            <param name="maxY">The maximum Y value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with Vec3 min/max values.
            </summary>
            <param name="minX">The minimum X value.</param>
            <param name="minY">The minimum Y value.</param>
            <param name="minZ">The minimum Z value.</param>
            <param name="maxX">The maximum X value.</param>
            <param name="maxY">The maximum Y value.</param>
            <param name="maxZ">The maximum Z value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinMaxAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with BlockPos min/max values.
            </summary>
            <param name="minX">The minimum X coordinate.</param>
            <param name="minY">The minimum Y coordinate.</param>
            <param name="minZ">The minimum Z coordinate.</param>
            <param name="maxX">The maximum X coordinate.</param>
            <param name="maxY">The maximum Y coordinate.</param>
            <param name="maxZ">The maximum Z coordinate.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute">
            <summary>
            Attribute to specify a minimum value for a setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.Min">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance with an object minimum value.
            </summary>
            <param name="min">The minimum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with an integer minimum value.
            </summary>
            <param name="min">The minimum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance with a float minimum value.
            </summary>
            <param name="min">The minimum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance with a Vec2 minimum value.
            </summary>
            <param name="x">The minimum X value.</param>
            <param name="y">The minimum Y value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with a Vec3 minimum value.
            </summary>
            <param name="x">The minimum X value.</param>
            <param name="y">The minimum Y value.</param>
            <param name="z">The minimum Z value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MinAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with a BlockPos minimum value.
            </summary>
            <param name="x">The minimum X coordinate.</param>
            <param name="y">The minimum Y coordinate.</param>
            <param name="z">The minimum Z coordinate.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute">
            <summary>
            Attribute to specify a maximum value for a setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.Max">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance with an object maximum value.
            </summary>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance with an integer maximum value.
            </summary>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance with a float maximum value.
            </summary>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance with a Vec2 maximum value.
            </summary>
            <param name="x">The maximum X value.</param>
            <param name="y">The maximum Y value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance with a Vec3 maximum value.
            </summary>
            <param name="x">The maximum X value.</param>
            <param name="y">The maximum Y value.</param>
            <param name="z">The maximum Z value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.MaxAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with a BlockPos maximum value.
            </summary>
            <param name="x">The maximum X coordinate.</param>
            <param name="y">The maximum Y coordinate.</param>
            <param name="z">The maximum Z coordinate.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ButtonAttribute">
            <summary>
            Attribute to specify that a property represents a button with a callback function.
            </summary>
            <param name="functionNameInClass">The name of the method to call when the button is pressed.</param>
            <param name="buttonName">The display name of the button.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ButtonAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute to specify that a property represents a button with a callback function.
            </summary>
            <param name="functionNameInClass">The name of the method to call when the button is pressed.</param>
            <param name="buttonName">The display name of the button.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ButtonAttribute.FunctionName">
            <summary>
            Gets the name of the function to call when the button is pressed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ButtonAttribute.ButtonName">
            <summary>
            Gets the display name of the button.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ChangeCallbackAttribute">
            <summary>
            Attribute to specify a callback function for when a setting value changes.
            </summary>
            <param name="functionNameInClass">The name of the method to call when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ChangeCallbackAttribute.#ctor(System.String)">
            <summary>
            Attribute to specify a callback function for when a setting value changes.
            </summary>
            <param name="functionNameInClass">The name of the method to call when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ChangeCallbackAttribute.FunctionName">
            <summary>
            Gets the name of the function to call when the setting changes.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryAttribute">
            <summary>
            Attribute to specify the category for grouping settings.
            </summary>
            <param name="category">The name of the category.</param>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Attribute to specify the category for grouping settings.
            </summary>
            <param name="category">The name of the category.</param>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryAttribute.Category">
            <summary>
            Gets the name of the category.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryAttribute.AfterSetting">
            <summary>
            Whether the air should be after or before the setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.HideColorOpacityAttribute">
            <summary>
            Attribute to hide the opacity component of a color setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryStopAttribute">
            <summary>
            Attribute to stop the current category grouping.
            </summary>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryStopAttribute.#ctor(System.Boolean)">
            <summary>
            Attribute to stop the current category grouping.
            </summary>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.CategoryStopAttribute.AfterSetting">
            <summary>
            Whether the air should be after or before the setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.Hidden">
            <summary>
            Attribute to hide a setting from the UI.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute">
            <summary>
            Attribute to add vertical spacing (gap) in the settings UI.
            Identical to <see cref="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute"/>.
            </summary>
            <param name="height">The height of the gap in pixels.</param>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute.#ctor(System.Single,System.Boolean)">
            <summary>
            Attribute to add vertical spacing (gap) in the settings UI.
            Identical to <see cref="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute"/>.
            </summary>
            <param name="height">The height of the gap in pixels.</param>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute.Height">
            <summary>
            Gets the height of the gap.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute.AfterSetting">
            <summary>
            Whether the air should be after or before the setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute">
            <summary>
            Attribute to add vertical spacing (air) in the settings UI.
            Identical to <see cref="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute"/>.
            </summary>
            <param name="height">The height of the air space in pixels.</param>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute.#ctor(System.Single,System.Boolean)">
            <summary>
            Attribute to add vertical spacing (air) in the settings UI.
            Identical to <see cref="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.GapAttribute"/>.
            </summary>
            <param name="height">The height of the air space in pixels.</param>
            <param name="afterSetting">If this gap should be added after the setting, defaults to before.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute.Height">
            <summary>
            Gets the height of the air space.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.AirAttribute.AfterSetting">
            <summary>
            Whether the air should be after or before the setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ScaleAttribute">
            <summary>
            Attribute to specify the scale factor for a setting's UI element.
            </summary>
            <param name="scale">The scale factor.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ScaleAttribute.#ctor(System.Single)">
            <summary>
            Attribute to specify the scale factor for a setting's UI element.
            </summary>
            <param name="scale">The scale factor.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ScaleAttribute.Scale">
            <summary>
            Gets the scale factor.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleSettingRedirector.ConvertModuleToRedirectorClass(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts an OnixModule to a C# class string representation using the redirector pattern.
            This generates source code that can be used to recreate the module settings declaratively.
            </summary>
            <param name="mod">The OnixModule to convert.</param>
            <param name="className">The name for the generated class.</param>
            <param name="desiredNamespace">The namespace for the generated class.</param>
            <param name="includeHidden">Whether to include hidden settings in the output.</param>
            <param name="useSaveName">Whether to use save names instead of display names for property names.</param>
            <returns>A string containing the generated C# class code.</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModulesList">
            <summary>
            Represents a list of Onix modules with various wrappers and helper functions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModulesList.#ctor(System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.OnixClient.OnixModule},System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.OnixClient.OnixModule})">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.OnixModulesList"/> class.
            </summary>
            <param name="clientMods">The client modules.</param>
            <param name="legacyScriptingMods">The legacy scripting modules.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModulesList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModulesList.Item(System.Int32)">
            <summary>
            Gets the module at the specified index.
            </summary>
            <param name="index">The index of the module.</param>
            <returns>The module at the specified index.</returns>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModulesList.Size">
            <summary>
            Gets the total number of modules in the list.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModulesList.Length">
            <summary>
            Gets the total number of modules in the list.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModulesList.GetModule(System.String)">
            <summary>
            Gets a module by its save name.
            </summary>
            <param name="saveName">The save name to search for.</param>
            <returns>The module or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModulesList.GetModule``1(System.String)">
            <summary>
            Gets a module by its save name.
            </summary>
            <param name="saveName">The save name to search for.</param>
            <typeparam name="T">The type of module to search for.</typeparam>
            <returns>The module or null if not found.</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleVisual">
            <summary>
            Represents a visual module for the Onix client.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor">
            <summary>
            Defines the anchoring positions for visual modules.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.Automatic">
            <summary>Automatically determines the anchor position.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.TopLeft">
            <summary>Anchors the module to the top-left corner.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.TopRight">
            <summary>Anchors the module to the top-right corner.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.BottomLeft">
            <summary>Anchors the module to the bottom-left corner.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.BottomRight">
            <summary>Anchors the module to the bottom-right corner.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.Center">
            <summary>Anchors the module to the center of the screen.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.TopCenter">
            <summary>Anchors the module to the top-center of the screen.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.BottomCenter">
            <summary>Anchors the module to the bottom-center of the screen.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.CenterLeft">
            <summary>Anchors the module to the center-left of the screen.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor.CenterRight">
            <summary>Anchors the module to the center-right of the screen.</summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection">
            <summary>
            Defines the directions in which a module can expand.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.Automatic">
            <summary>Automatically determines the expansion direction.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.TopLeft">
            <summary>Expands towards the top-left direction.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.TopRight">
            <summary>Expands towards the top-right direction.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.BottomLeft">
            <summary>Expands towards the bottom-left direction.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.BottomRight">
            <summary>Expands towards the bottom-right direction.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.Center">
            <summary>Expands from the center outward.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.TopCenter">
            <summary>Expands from the top-center outward.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.BottomCenter">
            <summary>Expands from the bottom-center outward.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.CenterLeft">
            <summary>Expands from the center-left outward.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual.ModuleExpandDirection.CenterRight">
            <summary>Expands from the center-right outward.</summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.Position">
            <summary>
            Gets or sets the absolute position of the visual module on the screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.Size">
            <summary>
            Gets or sets the size/dimensions of the visual module.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.Area">
            <summary>
            Gets or sets the rectangular area associated with the visual module.
            </summary>
            <remarks>The area specifies the bounds of the visual module in terms of its position and
            dimensions. Setting this property updates the visual module's area, while getting it retrieves the current
            area.</remarks>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.RelativePosition">
            <summary>
            Gets or sets the position of the module relative to its anchor point.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.AnchorSetting">
            <summary>
            Gets or sets the configured anchor point setting for the visual module.
            This determines which part of the screen the module is attached to.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.Anchor">
            <summary>
            Gets or sets the current active anchor point for the visual module.
            This represents the actual anchor being used for positioning.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.ExpandDirectionSetting">
            <summary>
            Gets or sets the configured expansion direction setting for the visual module.
            This determines which way the module expands when its content changes size.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.ExpandDirection">
            <summary>
            Gets or sets the current active expansion direction for the visual module.
            This represents the actual direction being used for expansion.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleVisual.ShouldHideInHudEditor">
            <summary>
            Gets whether the visual module should be hidden when the HUD editor is active.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleVisual.OnRender(OnixRuntime.Api.Rendering.RendererCommon2D)">
            <summary>
            Called everytime the module is rendered.
            If you're lazy just add a listener in 
            You could call it yourself, just make sure to check <see cref="P:OnixRuntime.Api.OnixClient.OnixModule.UsesLegacyRenderer"/> to know when to call this on the Game(which you lost)'s renderer or the Direct2D renderer.
            This includes client UI, game UI, preview UI and whatever else the module will be asked to be rendered on.
            Which renderer you will get is based on use preference and <see cref="P:OnixRuntime.Api.OnixClient.OnixModule.UsesLegacyRenderer"/>.
            If you have <see cref="P:OnixRuntime.Api.OnixClient.OnixModule.UsesLegacyRenderer"/> set to true, you'll always get the Game's renderer.
            Otherwise, the default is the Direct2D renderer but the user could have disabled it, giving you the game's only.
            This callback will NEVER be logic, no touching gameplay objects. Gather that data elsewhere if you require it.
            </summary>
            <param name="gfx">The 2D renderer used to draw the current state.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleVisual.RenderDelegate">
            <summary>
            Represents a render delegate for the visual module.
            </summary>
            <param name="mod">The visual module being rendered.</param>
            <param name="gfx">The 2D renderer used to draw the current state.</param>
            <param name="delta">The time in seconds since the last render call.</param>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixModuleVisual._renderDelegates">
            <summary>
            Occurs when a render operation is triggered.
            This includes client UI, game UI, preview UI and whatever else the module will be asked to be rendered on.
            Which renderer you will get is based on use preference and <see cref="P:OnixRuntime.Api.OnixClient.OnixModule.UsesLegacyRenderer"/>.
            If you have <see cref="P:OnixRuntime.Api.OnixClient.OnixModule.UsesLegacyRenderer"/> set to true, you'll always get the Game's renderer.
            Otherwise, the default is the Direct2D renderer but the user could have disabled it, giving you the game's only.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.OnixClient.OnixModuleVisual.Render">
            <summary>
            Occurs when a render operation is triggered.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleVisual.#ctor(System.String,System.String,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor,OnixRuntime.Api.Maths.Vec2,System.String,System.Boolean)">
            <summary>
            Creates a new visual module for your plugin.
            </summary>
            <param name="name">The display name of the module.</param>
            <param name="description">A description of the module's functionality.</param>
            <param name="position">The initial position of the module on screen.</param>
            <param name="visualAnchor">The anchoring position for the module.</param>
            <param name="initialSize">The initial size of the module.</param>
            <param name="saveName">The name used to save module settings.</param>
            <param name="register">Indicates whether to register this module with the plugin system. Default is true.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixModuleTextual">
            <summary>
            Represents a textual module for the Onix client.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixModuleTextual.#ctor(System.String,System.String,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.OnixClient.OnixModuleVisual.VisualAnchor,OnixRuntime.Api.Maths.Vec2,System.String,System.Boolean)">
            <summary>
            Creates a new visual module for your plugin.
            </summary>
            <param name="name">The display name of the module.</param>
            <param name="description">A description of the module's functionality.</param>
            <param name="position">The initial position of the module on screen.</param>
            <param name="visualAnchor">The anchoring position for the module.</param>
            <param name="initialSize">The initial size of the module.</param>
            <param name="saveName">The name used to save module settings.</param>
            <param name="register">Indicates whether to register this module with the plugin system. Default is true.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixModuleTextual.Text">
            <summary>
            Gets the text of the module. You may only get the text on the client thread as some mods need to access game data.
            Sets the text of the module only if it is a C# module.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingType">
            <summary>
            Defines the type of a setting in the Onix client.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Bool">
            <summary>
            A boolean (true/false) setting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Int">
            <summary>
            An integer number setting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Float">
            <summary>
            A floating-point number setting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Keybind">
            <summary>
            A keyboard/mouse/gamepad key binding setting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Vec2">
            <summary>
            A 2D vector setting. (An x and y float slider.)
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Color">
            <summary>
            A color setting. This allows the user to enter a color.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Textbox">
            <summary>
            A text input setting. This is a textbox that allows the user to enter text.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Enum">
            <summary>
            An enumeration setting. A list of options to choose from that translate to an int.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.GamepadKeybind">
            <summary>
            A collection of keybinds for gamepad input. don't have non gamepad keys in this setting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Air">
            <summary>
            A setting that represents an empty space of changeable height.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Info">
            <summary>
            A setting that displays textual information to the user. Essentially a label.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Button">
            <summary>
            A button setting that can be clicked by the user.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.ModuleHeader">
            <summary>
            A header for a module section.
            This should be the first setting in a module and is used internally to generalize rendering.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Category">
            <summary>
            A category setting for organizational purposes.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.LocalizedInfo">
            <summary>
            A setting that displays localized text information to the user. Essentially a label.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingType.Custom">
            <summary>
            A custom setting type for specialized functionality.
            Note that values above 150 are also custom settings.
            You should use .IsCustom to check for a custom setting's presence.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingTypeExtensions">
            <summary>
            Provides extension methods for the OnixSettingType enumeration.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingTypeExtensions.IsVisual(OnixRuntime.Api.OnixClient.OnixSettingType)">
            <summary>
            Checks if the setting type is a visual only type.
            This means it does not store any persistent data.
            Custom settings are also included in that category.
            </summary>
            <param name="type">The OnixSettingType to check</param>
            <returns>True if the setting type is visual only (has a value >= 100), otherwise false</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingTypeExtensions.IsCustom(OnixRuntime.Api.OnixClient.OnixSettingType)">
            <summary>
            Checks if the setting type is a custom setting type.
            Those are used to implement unique looking settings generally per module.
            Like the crosshair selector in Custom Crosshair module in onix.
            </summary>
            <param name="type">The OnixSettingType to check</param>
            <returns>True if the setting type is custom (has a value >= 150), otherwise false</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingTypeExtensions.IsInfo(OnixRuntime.Api.OnixClient.OnixSettingType)">
            <summary>
            Checks if the setting type is an info setting or a localized info setting.
            These types are used for displaying information to the user without storing data.
            </summary>
            <param name="type">The OnixSettingType to check</param>
            <returns>True if the setting type is Info or LocalizedInfo, otherwise false</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSetting">
            <summary>
            Represents a base setting for an Onix module.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSetting._pluginUuid">
            <summary>
            The UUID of the plugin that owns this setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSetting.Dispose">
            <summary>
            Disposes the Onix setting. This will clean up any resources used by the setting and remove it from its <see cref="P:OnixRuntime.Api.OnixClient.OnixSetting.ParentModule"/>
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSetting.ConvertNameToSaveName(System.String)">
            <summary>
            Converts a normal name to a save name.
            Essentially removes invalid characters and replaces spaces with underscores, all lowercase.
            This is useful for custom settings, allowing the user to not provide a save name if they like to live in the edge.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The save name of the setting.</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate">
            <summary>
            Delegate for handling setting change events.
            </summary>
            <param name="mod">The module that owns this setting.</param>
            <param name="setting">The setting that was changed.</param>
            <param name="isInit">Indicates whether this is the initial value being set from config.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.Name">
            <summary>
            Gets or sets the display name of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.SaveName">
            <summary>
            Gets the name used when saving this setting to persistent storage.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.Description">
            <summary>
            Gets or sets the description of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.Type">
            <summary>
            Gets the type of this setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.ParentModule">
            <summary>
            Gets the module that owns this setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.IsHidden">
            <summary>
            Gets if the setting should be hidden in the ui.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSetting.IsLocked">
            <summary>
            Gets if the setting is locked, that means the value cannot be changed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSetting.RemoveFromParent(System.Boolean)">
            <summary>
            Removes this setting from its parent module.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSetting.Save">
            <summary>
            Saves the setting to json for persistent storage.
            </summary>
            <returns>The json or null if there is nothing to save.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSetting.Load(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Loads the setting from json.
            If the value was null this will not get called so what you're getting is whatever the last value you returned in <see cref="M:OnixRuntime.Api.OnixClient.OnixSetting.Save"/> was.
            Read it lazily like there is no tomorrow, every setting is in its own try-catch.
            If you change what you save make sure to have migration code in place.
            </summary>
            <param name="root">The json you last saved.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingListRenderer">
            <summary>
            Represents a renderer for a list of Onix settings, allowing configuration and rendering of settings in a UI.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.OnixSettingListRenderer"/> class.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.Dispose">
            <summary>
            Disposes the Onix setting list renderer and releases any resources used by it.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.GetSettings">
            <summary>
            Gets the list of settings in this renderer. Note that while this is a List, until you call <see cref="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.SetSettings(System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.OnixClient.OnixSetting})"/> no changes will be made. It is provided as a List so you don't need to create a new list every time you want to add or remove a setting.
            </summary>
            <returns>The list of the settings in this renderer.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.SetSettings(System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.OnixClient.OnixSetting})">
            <summary>
            Sets the list of settings to be rendered.
            </summary>
            <param name="settings">The settings to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.ResetScroll">
            <summary>
            Resets the scroll position of the renderer.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.Padding">
            <summary>
            Gets or sets the padding between settings in the renderer.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.ResetAnimation">
            <summary>
            Resets the animation state of the renderer.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.ModuleSource">
            <summary>
            Gets or sets the module source for the settings in this renderer.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingListRenderer.Render(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Inputs.InputKey.ClickType,System.Int32)">
            <summary>
            Renders the settings list at the specified position, handling input and scroll.
            </summary>
            <param name="position">The position and size to render at.</param>
            <param name="click">The click type input.</param>
            <param name="scrollCount">The scroll count input.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingRegistry">
            <summary>
            Provides registration and management of custom Onix settings and their renderers.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.GetCSharpSetting(OnixRuntime.Api.OnixClient.OnixSetting)">
            <summary>
            Gets the C# representation of the specified Onix setting.
            Otherwise setting is returned.
            </summary>
            <param name="setting">The Onix setting to convert.</param>
            <returns>The C# representation of the setting.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.RegisterSettingType``1(System.String)">
            <summary>
            Registers a new custom setting type with the specified name and associates it with a renderer type.
            </summary>
            <typeparam name="SettingRendererT">The renderer type for the setting.</typeparam>
            <param name="name">The name of the setting type.</param>
            <returns>The unique key for the registered setting type.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.RegisterSettingRendererForType``1(System.Int32)">
            <summary>
            Registers a renderer override for a specific setting type ID.
            </summary>
            <typeparam name="SettingRendererT">The renderer type to associate.</typeparam>
            <param name="settingType">The integer ID of the setting type.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.RegisterSettingRendererForType``1(OnixRuntime.Api.OnixClient.OnixSettingType)">
            <summary>
            Registers a renderer override for a specific setting type.
            </summary>
            <typeparam name="SettingRendererT">The renderer type to associate.</typeparam>
            <param name="settingType">The setting type as an enum value.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.RegisterSettingRendererForType``1(System.String)">
            <summary>
            Registers a renderer override for a setting type by its full string key.
            </summary>
            <typeparam name="SettingRendererT">The renderer type to associate.</typeparam>
            <param name="fullSettingType">The full string key of the setting type.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.RegisterSettingRendererForName``1(System.String)">
            <summary>
            Registers a renderer override for a setting type by its name within the current plugin context.
            </summary>
            <typeparam name="SettingRendererT">The renderer type to associate.</typeparam>
            <param name="name">The name of the setting type.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.GetSettingId(System.String)">
            <summary>
            Gets the integer ID for a registered setting type.
            </summary>
            <param name="registeredSettingType">The string key of the registered setting type.</param>
            <returns>The integer ID of the setting type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the setting type is not registered.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.GetCustomSettingType(System.String)">
            <summary>
            Gets the full custom setting type key for a given name within the current plugin context.
            </summary>
            <param name="name">The name of the setting type.</param>
            <returns>The full custom setting type key.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.IsValidCustomSetting(System.String)">
            <summary>
            Determines whether a custom setting type is valid and registered.
            </summary>
            <param name="customSettingType">The custom setting type key.</param>
            <returns>True if the setting type is registered; otherwise, false.</returns>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingRegistry.OnSettingMenuClosedDelegate">
            <summary>
            Delegate for handling the closing of the settings menu.
            </summary>
        </member>
        <member name="E:OnixRuntime.Api.OnixClient.OnixSettingRegistry.OnSettingMenuClosed">
            <summary>
            Event raised when the settings menu is closed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRegistry.SettingsMenuClosed">
            <summary>
            Call this when you close a menu/ui that uses setting rendering.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixSettingRenderer">
            <summary>
            This is the base class for all setting renderers.
            You must create a class that inherits from this and implement the Render and GetHeight function.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.OnixSettingRenderer.Setting">
            <summary>
            The setting this renderer is responsible for rendering.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.#ctor(OnixRuntime.Api.OnixClient.OnixSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.OnixSettingRenderer"/> class.
            </summary>
            <param name="setting">The setting this renderer will be rendering.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHeight(OnixRuntime.Api.Rendering.RendererDirect2D)">
            <summary>
            Gets the height of the setting for layout purposes.
            </summary>
            <param name="gfx">The graphics renderer, used for measuring text or other layout calculations.</param>
            <returns>The height of the setting in pixels.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.Render(OnixRuntime.Api.Rendering.RendererDirect2D,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Inputs.InputKey.ClickType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders the setting.
            </summary>
            <param name="gfx">The graphics renderer. Use this to render the setting's content.</param>
            <param name="size">The size of the current setting.</param>
            <param name="mousePosition">The position of the mouse within that setting.</param>
            <param name="click">The click input that was done this frame.</param>
            <param name="mouseInside">If the mouse is inside the bounds of this setting.</param>
            <param name="lmbDown">If the left mouse button is held down at this time. Can be used for implementing sliders.</param>
            <param name="rmbDown">If the right mouse button is held down at this time.</param>
            <returns>True if the click was handled; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.PreDispose(OnixRuntime.Api.Rendering.RendererDirect2D)">
            <summary>
            Called right before the setting is disposed, on the Direct2D thread, so you can do any cleanup you need to do.
            </summary>
            <param name="gfx">The graphics renderer if needed to dispose of some things.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetGlobalPosition(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Gets the global position of the setting renderer based on the mouse position.
            </summary>
            <param name="mousePosition">The local mouse position within the setting.</param>
            <returns>The global position as a <see cref="T:OnixRuntime.Api.Maths.Vec2"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.SetTooltip(System.String,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Sets the tooltip text if the mouse is within the bounds of the setting.
            </summary>
            <param name="text">The text of the tooltip.</param>
            <param name="size">The size the Render function gave you.</param>
            <param name="mousePosition">The position of the mouse the Render function gave you.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.SetTooltip(System.String,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Sets the tooltip text if the mouse is within the bounds of the specified region.
            </summary>
            <param name="text">The text of the tooltip.</param>
            <param name="region">The region the tooltip shows up in.</param>
            <param name="mousePosition">The position of the mouse the Render function gave you.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.HandleNameCopy(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Inputs.InputKey.ClickType@)">
            <summary>
            Handles the developer options name copy shortcuts on your setting renderer.
            </summary>
            <param name="size">The size of the area given to you.</param>
            <param name="mousePosition">The position of the mouse given to you.</param>
            <param name="click">The click input given to you.</param>
            <returns>True when the click has been handled here.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightTracker(System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:OnixRuntime.Api.Rendering.Helpers.LinearAnimation"/> for a given region ID, creating it if necessary.
            </summary>
            <param name="id">The region ID.</param>
            <param name="goingUp">Whether the animation is going up 0 -> 1 (true) or down 1 -> 0 (false).</param>
            <returns>The <see cref="T:OnixRuntime.Api.Rendering.Helpers.LinearAnimation"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightLinear(System.Boolean,System.Single,System.Int32,System.Boolean)">
            <summary>
            Gets the linear highlight opacity based on whether the mouse is inside a given region identified with its id.
            </summary>
            <param name="mouseInside">True if the mouse is currently inside the region.</param>
            <param name="animationTime">The time in seconds for the animation to complete.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <param name="restartSmoothly">If true, the animation will restart smoothly when the mouse enters or exits before the animation is over.</param>
            <returns>The linear highlight value between 0 and 1.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightLinear(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2,System.Single,System.Int32,System.Boolean)">
            <summary>
            Gets the linear highlight opacity based on whether the mouse is inside a specified region.
            This overload checks if the mouse position is within the given rectangle and animates the highlight accordingly.
            </summary>
            <param name="region">The region to test against.</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="animationTime">The time in seconds for the animation to complete.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <param name="restartSmoothly">If true, the animation will restart smoothly when the mouse enters or exits before the animation is over.</param>
            <returns>The linear highlight value between 0 and 1.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightLinear(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Single,System.Int32,System.Boolean)">
            <summary>
            Gets the linear highlight opacity based on whether the mouse is inside a region defined by a size starting at (0,0).
            </summary>
            <param name="size">The size of the region (assumed to start at origin).</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="animationTime">The time in seconds for the animation to complete.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <param name="restartSmoothly">If true, the animation will restart smoothly when the mouse enters or exits before the animation is over.</param>
            <returns>The linear highlight value between 0 and 1.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightAdditionalOpacity(System.Boolean,System.Int32)">
            <summary>
            Returns the additional highlight opacity based on whether the mouse is inside a region.
            This animates smoothly, matching the client's highlight behavior.
            </summary>
            <param name="mouseInside">True if the mouse is currently inside the region.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <returns>Additional opacity to add to your highlight.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightAdditionalOpacity(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2,System.Int32)">
            <summary>
            Returns the additional highlight opacity based on whether the mouse is inside a given region.
            This animates smoothly, matching the client's highlight behavior.
            </summary>
            <param name="region">The region to test against.</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <returns>Additional opacity to add to your highlight.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightAdditionalOpacity(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Int32)">
            <summary>
            Returns the additional highlight opacity based on whether the mouse is within a region defined by size starting at (0,0).
            This animates smoothly, matching the client's highlight behavior.
            </summary>
            <param name="size">The size of the region (assumed to start at origin).</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <returns>Additional opacity to add to your highlight.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightColor(System.Boolean,System.Int32,OnixRuntime.Api.OnixClient.OnixClientThemeV3)">
            <summary>
            Returns a highlight color adjusted by the animated opacity effect.
            This animates smoothly, matching the client's highlight behavior.
            </summary>
            <param name="mouseInside">True if the mouse is currently inside the region.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <param name="cachedTheme">Optional cached theme to avoid repeated access to the global theme.</param>
            <returns>The adjusted highlight color.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightColor(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2,System.Int32,OnixRuntime.Api.OnixClient.OnixClientThemeV3)">
            <summary>
            Returns the highlight color based on whether the mouse is inside a specified region.
            This animates smoothly, matching the client's highlight behavior.
            </summary>
            <param name="region">The region to test against.</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <param name="cachedTheme">Optional cached theme to avoid repeated access to the global theme.</param>
            <returns>The adjusted highlight color.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.GetHighlightColor(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Int32,OnixRuntime.Api.OnixClient.OnixClientThemeV3)">
            <summary>
            Returns the highlight color based on whether the mouse is inside a region defined by a size starting at (0,0).
            This animates smoothly, matching the client's highlight behavior.
            </summary>
            <param name="size">The size of the region (assumed to start at origin).</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="id">An optional ID to track multiple highlight regions independently.</param>
            <param name="cachedTheme">Optional cached theme to avoid repeated access to the global theme.</param>
            <returns>The adjusted highlight color.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixSettingRenderer.Dispose">
            <summary>
            Disposes resources used by the renderer.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixWaypoint">
            <summary>
            Represents a waypoint in the onix client.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Name">
            <summary>
            The name of the waypoint.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Position">
            <summary>
            The position of the waypoint in its dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.X">
            <summary>
            The X position of the waypoint in its dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Y">
            <summary>
            The Y position of the waypoint in its dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Z">
            <summary>
            The Z position of the waypoint in its dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Dimension">
            <summary>
            The dimension of the waypoint.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Color">
            <summary>
            The color of the waypoint.
            This is not implemented right now in the client. It will be part of a future waypoint update.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Visible">
            <summary>
            Whether the waypoint is visible in any way or not.
            This will hide the waypoint from the minimap, direction hud, text, beam, circle, etc. (Not implemented in minimap at this time)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.ShowBeam">
            <summary>
            Whether the waypoint should show a beam in the world.
            This is not implemented right now in the client. It will be part of a future waypoint update.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.ShowText">
            <summary>
            Whether the waypoint should show text in the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.RemoveOnArrival">
            <summary>
            Whether the waypoint should be removed when the player arrives near it.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Temporary">
            <summary>
            Whether the waypoint should be removed when the world is closed.
            This effectively just never saves the waypoint.
            Whatever causes the waypoint list to be loaded again will make this waypoint disappear (if this is true of course).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.ShowCircle">
            <summary>
            Whether the waypoint should show a circle in the world.
            This is not implemented right now in the client. It will be part of a future waypoint update.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.AlwaysShowAcrossDimensions">
            <summary>
            Whether the waypoint should show regardless of if it's in a different dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.TranslatePosition">
            <summary>
            Whether the waypoint should be translated to the player's current dimension coordinates.
            This does nothing unless <see cref="P:OnixRuntime.Api.OnixClient.OnixWaypoint.AlwaysShowAcrossDimensions"/> is true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.Id">
            <summary>
            The unique ID of the waypoint.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypoint.AutomaticallyUpdateWaypointWhenChanged">
            <summary>
            Whether the waypoint should automatically update in the client when you change any of the properties of the waypoint.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypoint.Create">
            <summary>
            Creates a brand new <see cref="T:OnixRuntime.Api.OnixClient.OnixWaypoint"/>.
            You should probably use <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypoint.Create(System.String,OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.DimensionType)"/> instead of this.
            If you don't make sure to set at least the name, position and dimension.
            This will NOT add it to the waypoint manager.
            You still need to call <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Add(OnixRuntime.Api.OnixClient.OnixWaypoint)"/>.
            </summary>
            <returns>The created waypoint.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypoint.Create(System.String,OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.DimensionType)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.OnixClient.OnixWaypoint"/> with the given name, position and dimension.
            This will NOT add it to the waypoint manager.
            You still need to call <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Add(OnixRuntime.Api.OnixClient.OnixWaypoint)"/>.
            </summary>
            <param name="name">The name of the new waypoint</param>
            <param name="position">The position of the new waypoint</param>
            <param name="dimension"></param>
            <returns>The brand-new waypoint, fresh from the oven.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypoint.#ctor(System.String,OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.DimensionType)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.OnixClient.OnixWaypoint"/> with the given name, position and dimension.
            This will NOT add it to the waypoint manager.
            You still need to call <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Add(OnixRuntime.Api.OnixClient.OnixWaypoint)"/>.
            </summary>
            <param name="name">The name of the new waypoint</param>
            <param name="position">The position of the new waypoint</param>
            <param name="dimension"></param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypoint.Delete">
            <summary>
            Deletes the waypoint from the waypoint manager.
            </summary>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypoint.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException">
            <summary>
            Thrown when the waypoints are not enabled.
            The waypoints are per world and not active unless the mod is enabled.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"/> class.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.OnixWaypointManager">
            <summary>
            Manages waypoints for the Onix client.
            Make sure you check for <see cref="P:OnixRuntime.Api.OnixClient.OnixWaypointManager.Enabled"/> before using any waypoints.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypointManager.Enabled">
            <summary>
            Checks if the waypoint mod is enabled, you can also force it on by setting this to true.
            If waypoints is not the primary purpose of your mod you should probably not force it on.
            You should probably check if it's enabled and maybe show a little warning to the user.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.OnixWaypointManager.Waypoints">
            <summary>
            The list of all waypoints.
            Note that you can make your for loop on the waypoint manager, no need to do Waypoints.Waypoints
            <example>
            <code>
            foreach (var waypoint in Onix.Client.Waypoints) {
                // ...
            }
            </code>
            </example>
            <remarks>
            You can iterate over this list even when the waypoint mod is off, it is the only exception.
            When it is disabled you will get an empty list.
            </remarks>
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.SetCustomWorldName(System.String)">
            <summary>
            If you provide an empty string, this will load waypoints from the normal location for the current world.
            If you provide a custom world name, this will load waypoints from the custom location of that name.
            This is the equivalent of ".waypoint setworld worldName" in the client
            </summary>
            <param name="worldName">The custom world name to load from.</param>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException">Make sure that <see cref="P:OnixRuntime.Api.OnixClient.OnixWaypointManager.Enabled"/> is true before you call this!</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Save">
            <summary>
            Forces a save of the waypoints, you don't really need to call this ever as any change you make should internally call this.
            </summary>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.AddOrUpdate(OnixRuntime.Api.OnixClient.OnixWaypoint)">
            <summary>
            Adds or updates a waypoint.
            Note that if your waypoint does not have an ID, it will be added as a new waypoint always.
            If you use an existing waypoint that has an ID, you do not need to call this method when <see cref="P:OnixRuntime.Api.OnixClient.OnixWaypoint.AutomaticallyUpdateWaypointWhenChanged"/> is true.
            If making a lot of changes/updates, you should set that to false and call this method manually.
            </summary>
            <param name="waypoint">The waypoint to add or update</param>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Add(OnixRuntime.Api.OnixClient.OnixWaypoint)">
            <summary>
            Adds a waypoint, this will always add a new waypoint unless <see cref="P:OnixRuntime.Api.OnixClient.OnixWaypointManager.Enabled"/> is false.
            </summary>
            <param name="waypoint"></param>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Find(System.String)">
            <summary>
            Finds a waypoint by its exact case-sensitive name.
            This will give you the first one that matches that name.
            If you want all of them you can call <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FindAll(System.String,System.Boolean)"/> or <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FindAll(System.Func{OnixRuntime.Api.OnixClient.OnixWaypoint,System.Boolean})"/>.
            </summary>
            <param name="name">The name to look for.</param>
            <returns>The waypoint or null.</returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FirstOrDefault(System.Func{OnixRuntime.Api.OnixClient.OnixWaypoint,System.Boolean})">
            <summary>
            Finds a waypoint by using a predicate.
            This will return the first waypoint that matches the predicate.
            If nothing matches the predicate, you get null.
            If you want all the waypoints that match the predicate, you can call <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FindAll(System.Func{OnixRuntime.Api.OnixClient.OnixWaypoint,System.Boolean})"/>.
            </summary>
            <param name="match">The predicate to test against.</param>
            <returns></returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FindAll(System.Func{OnixRuntime.Api.OnixClient.OnixWaypoint,System.Boolean})">
            <summary>
            Finds all waypoints that match the predicate.
            </summary>
            <param name="match">The predicate to test against.</param>
            <returns></returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FindAll(System.String,System.Boolean)">
            <summary>
            Finds all waypoints that match the name.
            You can make use contains instead of == but it will remain case-sensitive.
            If you want more control you should use <see cref="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.FindAll(System.Func{OnixRuntime.Api.OnixClient.OnixWaypoint,System.Boolean})"/>.
            </summary>
            <param name="name">The name of the waypoints to try to find.</param>
            <param name="useContains">If it should use .Contains() instead of == for comparison.</param>
            <returns>A list of every waypoint that were found.</returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.GetWaypoint(System.UInt64)">
            <summary>
            Gets a waypoint by its ID.
            </summary>
            <param name="id">The id of the waypoint to try to get.</param>
            <returns>The waypoint or null when it no longer exists.</returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Clear">
            <summary>
            Removes all waypoints.
            </summary>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Remove(System.UInt64)">
            <summary>
            Removes a waypoint by its ID.
            </summary>
            <param name="id">The id of the waypoint to remove.</param>
            <returns>True if the waypoint was removed successfully.</returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Remove(OnixRuntime.Api.OnixClient.OnixWaypoint)">
            <summary>
            Removes a waypoint.
            </summary>
            <param name="waypoint">The waypoint to remove.</param>
            <returns>True when the was removed successfully.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.Remove(System.String,System.Boolean,System.Boolean)">
            <summary>
            Removes a waypoint or multiple waypoints by their name.
            </summary>
            <param name="name">The case-sensitive name of the waypoint to delete.</param>
            <param name="all">If all waypoints matching that name should be deleted or just the first one.</param>
            <param name="useContains">If it should use .Contains() instead of == for comparison.</param>
            <returns></returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.RemoveAll(System.Predicate{OnixRuntime.Api.OnixClient.OnixWaypoint})">
            <summary>
            Removes all waypoints that match a predicate.
            </summary>
            <param name="match">The predicate to try to match.</param>
            <returns>True when at least one waypoint was removed.</returns>
            <exception cref="T:OnixRuntime.Api.OnixClient.WaypointsNotEnabledException"></exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.OnixWaypointManager.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingAir">
            <summary>
            Represents an Onix setting for air, allowing getting and setting the air value for a module.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingAir.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingAir"/> class with the specified module and air value.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="air">The air value.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingAir.Air">
            <summary>
            Gets or sets the air value for this setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingAir.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool">
            <summary>
            Represents an Onix setting for a boolean value, allowing getting and setting the value and default for a module.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.Boolean,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool"/> class with the specified module, name, default value, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default boolean value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Boolean,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool"/> class with the specified module, name, default value, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default boolean value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.Value">
            <summary>
            Gets or sets the current boolean value for this setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.ValueInit">
            <summary>
            Gets or sets the current boolean value for this setting. This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.Default">
            <summary>
            Gets or sets the default boolean value for this setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingBool.ToString">
            <inheritdoc cref="M:System.Object.ToString" />
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingButton">
            <summary>
            Represents an Onix setting for a button, allowing configuration of button text and click behavior for a module.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingButton.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingButton"/> class with the specified module, name, button text, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="buttonText">The text displayed on the button.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the button is clicked.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingButton.ButtonText">
            <summary>
            Gets or sets the text displayed on the button.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingButton.Click">
            <summary>
            Invokes the button's click action, triggering the change callback.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingButton.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory">
            <summary>
            Represents an Onix setting category, allowing grouping of settings with control over included count and open state.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory"/> class with the specified parent module, name, description, included count, and open state.
            </summary>
            <param name="parentModule">The parent Onix module.</param>
            <param name="name">The name of the category.</param>
            <param name="description">The description of the category.</param>
            <param name="included">The number of settings included in this category.</param>
            <param name="isOpen">Whether the category is open by default.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.IncludedCount">
            <summary>
            Gets or sets the number of settings included in this category.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.IncludesEverythingUntilNextCategory">
            <summary>
            Gets a value indicating whether this category includes everything until the next category.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.IsOpen">
            <summary>
            Gets or sets a value indicating whether the category is open.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingCategory.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor">
            <summary>
            Represents an Onix setting for a color value, supporting advanced options like opacity, rainbow, and chroma effects.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType">
            <summary>
            Represents the value type for a color setting, including color, opacity, rainbow, and chroma options.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.Color">
            <summary>
            The color value.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.ShowOpacity">
            <summary>
            Indicates if opacity is shown.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.IsRainbow">
            <summary>
            Indicates if the color is a rainbow effect.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.IsChroma">
            <summary>
            Indicates if the color is a chroma effect.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.#ctor(OnixRuntime.Api.Maths.ColorF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType"/> class.
            </summary>
            <param name="color">The color value.</param>
            <param name="showOpacity">Whether to show opacity.</param>
            <param name="isRainbow">Whether the color is a rainbow effect.</param>
            <param name="isChroma">Whether the color is a chroma effect.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.WithColor(OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Creates an identical value type but with a different color.
            </summary>
            <param name="value">The new color to make a copy with.</param>
            <returns>The new color with the other settings intact.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.WithOpacity(OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Creates an identical value type but with a different color.
            </summary>
            <param name="value">The new color to make a copy with.</param>
            <returns>The new color with the other settings intact.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.ToJson">
            <summary>
            Converts the value to json.
            </summary>
            <returns>A json node for this class.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.FromJson(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new value type from json.
            </summary>
            <param name="json">The json node to read from.</param>
            <returns>The new value type.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.op_Implicit(OnixRuntime.Api.Maths.ColorF)~OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType">
            <summary>
            Implicitly converts a ColorF to a ValueType.
            </summary>
            <param name="color">The ColorF to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.op_Implicit(OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType)~OnixRuntime.Api.Maths.ColorF">
            <summary>
            Implicitly converts a ValueType to a ColorF.
            </summary>
            <param name="color">The ValueType to convert.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable">
            <summary>
            Represents the value type for a color setting, including color, opacity, rainbow, and chroma options.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.Color">
            <summary>
            The color value.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.ShowOpacity">
            <summary>
            Indicates if opacity is shown.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.IsRainbow">
            <summary>
            Indicates if the color is a rainbow effect.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.IsChroma">
            <summary>
            Indicates if the color is a chroma effect.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.#ctor(OnixRuntime.Api.Maths.ColorF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType"/> class.
            </summary>
            <param name="color">The color value.</param>
            <param name="showOpacity">Whether to show opacity.</param>
            <param name="isRainbow">Whether the color is a rainbow effect.</param>
            <param name="isChroma">Whether the color is a chroma effect.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueTypeMutable.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor"/> class with a ValueType default value.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default color value type.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,OnixRuntime.Api.Maths.ColorF,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor"/> class with a ColorF default value.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default color value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueType,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor"/> class with a ValueType default value.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default color value type.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,OnixRuntime.Api.Maths.ColorF,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor"/> class with a ColorF default value.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default color value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.Value">
            <summary>
            Gets or sets the current color value type for this setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueInit">
            <summary>
            Gets or sets the current color value type for this setting. This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueColor">
            <summary>
            Gets or sets the color value of the current setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueShowOpacity">
            <summary>
            Gets or sets whether opacity is shown for the current value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueIsRainbow">
            <summary>
            Gets or sets whether the current value is a rainbow effect.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ValueIsChroma">
            <summary>
            Gets or sets whether the current value is a chroma effect.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.Default">
            <summary>
            Gets or sets the default color value type for this setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.DefaultColor">
            <summary>
            Gets or sets the default color value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.DefaultShowOpacity">
            <summary>
            Gets or sets whether opacity is shown for the default value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.DefaultIsRainbow">
            <summary>
            Gets or sets whether the default value is a rainbow effect.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.DefaultIsChroma">
            <summary>
            Gets or sets whether the default value is a chroma effect.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.RainbowColor">
            <summary>
            The rainbow color the client uses, this one can be changed by the user in Color Options.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.RainbowPastel">
            <summary>
            A rainbow color that changes over time of the pastel variety.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingColor.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom">
            <summary>
            Represents a custom Onix setting, allowing creation of settings with user-defined types registered in the setting registry.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.String,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom"/> class with the specified module, registered setting type, name, description, change callback, and type name mode.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="registeredSettingType">The registered custom setting type name.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings. For this setting only, a "" value will force it to only use name.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
            <param name="isJustName">If true, prepends the plugin UUID to the type name.</param>
            <exception cref="T:System.ArgumentException">Thrown if the setting type is not registered.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.Boolean,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom"/> class with the specified module, registered setting type, type name mode, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="registeredSettingType">The registered custom setting type name.</param>
            <param name="isJustName">If true, prepends the plugin UUID to the type name.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom.CallValueChangedCallback(System.Boolean)">
            <summary>
            Calls the value changed callback for this setting.
            You should call this on <see cref="M:OnixRuntime.Api.OnixClient.OnixSetting.Load(System.Text.Json.Nodes.JsonNode)"/> with isInit set to true.
            isInit should be true when it loads the value and it isn't a user's change.
            </summary>
            <param name="isInit">Is this from initial config read or did the user change it?</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingCustom.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">
            <summary>
            Exception thrown when an invalid value is set for an Onix enum setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException"/> class.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException"/> class with a specified error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException"/> class with a specified error message and inner exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum">
            <summary>
            Represents an enum setting.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry">
            <summary>
            Represents an entry in an enum setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.Value">
            <summary>
            The actual value of this enum entry.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.Name">
            <summary>
            The name for this enum entry's value.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new enum entry.
            </summary>
            <param name="value">The value for the entry.</param>
            <param name="name">The name of the value for this entry.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.As``1">
            <summary>
            Convenience function to convert this enum entry's value to a specific C# enum type.
            </summary>
            <typeparam name="T">The type of the C# Enum.</typeparam>
            <returns>The value as that enum</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries">
            <summary>
            Represents a collection of enum entries, adding some convenience function.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.Values">
            <summary>
            The actual list of enum entries.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.#ctor">
            <summary>
            Creates a new enum entries collection with an empty list.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.#ctor(System.Collections.Generic.List{OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntry})">
            <summary>
            Creates a new enum entries collection with a list of entries.
            If values is null it will default to an empty list.
            </summary>
            <param name="values">The entries of this enum.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.GetNameForValue(System.Int32)">
            <summary>
            Gets the name of a specific value in this enum.
            </summary>
            <param name="value">The value to get the name of.</param>
            <returns>The name of the value or nil if it could not be found</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.GetNameForValue``1(``0)">
            <summary>
            Gets the name of a specific value in this enum.
            </summary>
            <param name="value">The value to get the name of.</param>
            <typeparam name="T">The enum type to interpret it as.</typeparam>
            <returns>The name of the value or nil if it could not be found</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.GetValueForName(System.String)">
            <summary>
            Gets the value of a specific name in this enum if found.
            </summary>
            <param name="name">The name of the value to find.</param>
            <returns>The value or null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.GetValueForName``1(System.String)">
            <summary>
            Gets the value of a specific name in this enum if found as a C# enum.
            </summary>
            <typeparam name="T">The enum type to interpret it as.</typeparam>
            <param name="name">The name of the value to find.</param>
            <returns>The value or null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.Add(System.String,System.Int32)">
            <summary>
            Adds a new entry to the list.
            </summary>
            <param name="name">The name of the value for the new entry.</param>
            <param name="value">The value for the new entry.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.Add``1(System.String,``0)">
            <summary>
            Adds a new entry to the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name of the value for the new entry.</param>
            <param name="value">The value for the new entry.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.FromEnum``1">
            <summary>
            Creates a new enum entries collection from a C# enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>The new entries generated from that enum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.FromEnum(System.Type)">
            <summary>
            Creates a new enum entries collection from a C# enum.
            </summary>
            <param name="type">The type of the enum.</param>
            <returns>The new entries generated from that enum.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the type is not an enum!</exception>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.Count">
            <summary>
            How many options there are.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.Int32,OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Creates a new enum setting.
            </summary>
            <param name="mod">The mod to add this setting to or null.</param>
            <param name="name">The name of this setting in the ui.</param>
            <param name="defaultValue">The default value of the setting.</param>
            <param name="options">All possible options that can be chosen.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">A function to call whenever the setting is changed or null.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Int32,OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.EnumEntries,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Creates a new enum setting.
            </summary>
            <param name="mod">The mod to add this setting to or null.</param>
            <param name="name">The name of this setting in the ui.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default value of the setting.</param>
            <param name="options">All possible options that can be chosen.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">A function to call whenever the setting is changed or null.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.Value">
            <summary>
            The value of the setting.
            </summary>
            <exception cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">Throws if the value you set is not in the enum's options.</exception>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.ValueInit">
            <summary>
            The value of the setting. This variant will call the on setting changed with the isInit flag set to true.
            </summary>
            <exception cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">Throws if the value you set is not in the enum's options.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.ValueAs``1">
            <summary>
            Gets the value of the setting as a C# enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>The value as the desired C# enum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.ValueAs``1(``0)">
            <summary>
            Sets the value of the setting from a C# enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The new value.</param>
            <exception cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">Throws if the value is not in the enum's options.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.ValueAsInit``1(``0)">
            <summary>
            Sets the value of the setting from a C# enum. This variant will call the on setting changed with the isInit flag set to true.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value">The new value.</param>
            <exception cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">Throws if the value is not in the enum's options.</exception>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.Default">
            <summary>
            The default value of the setting.
            </summary>
            <exception cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">Throws if the value you set is not in the enum's options.</exception>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.DefaultAs``1">
            <summary>
            Gets the default value of the setting as a C# enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>The default value as the desired  C# enum.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.DefaultAs``1(``0)">
            <summary>
            Sets the default value of the setting from a C# enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="value"></param>
            <exception cref="T:OnixRuntime.Api.OnixClient.Settings.InvalidOnixEnumValueException">Throws if the value you set is not in the enum's options.</exception>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.Options">
            <summary>
            The options for this enum setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingEnum.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat">
            <summary>
            Represents a float setting in Onix, allowing configuration of value, default, min, and max.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.Single,System.Single,System.Single,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat"/> class with the specified module, name, default value, min, max, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default float value.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Single,System.Single,System.Single,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat"/> class with the specified module, name, default value, min, max, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default float value.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.Value">
            <summary>
            Gets or sets the current value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.ValueInit">
            <summary>
            Gets or sets the current value of the setting. This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.Default">
            <summary>
            Gets or sets the default value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.Min">
            <summary>
            Gets or sets the minimum allowed value for the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.Max">
            <summary>
            Gets or sets the maximum allowed value for the setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingFloat.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind">
            <summary>
            Represents a setting containing a list of gamepad keys in Onix.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType">
            <summary>Represents a read-only collection of <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> values and provides convenience methods for working with key combinations.</summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.#ctor(System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.Inputs.InputKey})">
            <summary>Represents a read-only collection of <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> values and provides convenience methods for working with key combinations.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.Value">
            <summary>Gets the underlying list of <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> values represented by this instance.</summary>
        </member>
        <member name="F:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.Empty">
            <summary>An empty <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType"/> instance with no keys.</summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator for the underlying collection of <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> values.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator for the underlying collection of <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> values.</returns>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.Count">
            <summary>Gets the number of <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> values in the collection.</summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.Item(System.Int32)">
            <summary>Gets the <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> at the specified index.</summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Inputs.InputKey"/> at the specified index.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.ReadOnlySpan{OnixRuntime.Api.Inputs.InputKey},System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind"/> class with the specified module, name, default value, description, and change callback.
            </summary>
            <param name="mod">The module that will receive this setting or null.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default value of this setting.</param>
            <param name="description">The description for this setting.</param>
            <param name="changeCallback">A function to call when the setting is changed.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind"/> class with the specified module, name, default value, description, and change callback.
            </summary>
            <param name="mod">The module that will receive this setting or null.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default value of this setting.</param>
            <param name="description">The description for this setting.</param>
            <param name="changeCallback">A function to call when the setting is changed.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.ReadOnlySpan{OnixRuntime.Api.Inputs.InputKey},System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind"/> class with the specified module, name, default value, description, and change callback.
            </summary>
            <param name="mod">The module that will receive this setting or null.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default value of this setting.</param>
            <param name="description">The description for this setting.</param>
            <param name="changeCallback">A function to call when the setting is changed.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueType,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind"/> class with the specified module, name, default value, description, and change callback.
            </summary>
            <param name="mod">The module that will receive this setting or null.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default value of this setting.</param>
            <param name="description">The description for this setting.</param>
            <param name="changeCallback">A function to call when the setting is changed.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.Value">
            <summary>
            Gets or sets the keybinds that are bound to this setting. Only gamepad inputs should be included.
            If you change the list, assign it back to apply the changes.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ValueInit">
            <summary>
            Gets or sets the keybinds that are bound to this setting. Only gamepad inputs should be included.
            If you change the list, assign it back to apply the changes.
            This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.Default">
            <summary>
            Gets or sets the default keybinds that are bound to this setting. Only gamepad inputs should be included.
            If you change the list, assign it back to apply the changes.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingGamepadKeybind.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo">
            <summary>
            Adds basically text as a setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Single,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Creates a new setting info.
            </summary>
            <param name="parentModule">The module to add this setting to or null.</param>
            <param name="name">The text of the setting.</param>
            <param name="description">The text that shows when you hover the setting.</param>
            <param name="scale">The scale of the setting's text in the UI.</param>
            <param name="onSettingChanged">Gets called before rendering, you could use this to update the text before the user sees it, keep in mind it is a Direct2D thread calling this.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo.Text">
            <summary>
            The text of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo.Scale">
            <summary>
            How large that setting is.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo">
            <summary>
            This is mainly so you can read the text from the settings, there is no benefit from C# in using this one over OnixSettingInfo.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Single,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Creates a new setting info.
            </summary>
            <param name="parentModule">The module to add this setting to or null.</param>
            <param name="name">The text of the setting.</param>
            <param name="description">The text that shows when you hover the setting.</param>
            <param name="scale">The scale of the setting's text in the UI.</param>
            <param name="onSettingChanged">Gets called before rendering, you could use this to update the text before the user sees it, keep in mind it is a Direct2D thread calling this.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.UpdateText">
            <summary>
            If this setting has a callback to update the text, this will call it.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.Text">
            <summary>
            The text of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.Scale">
            <summary>
            How large that setting is.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingLocalizedInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingModuleHeader">
            <summary>
            This is just used internally to show the header. Use the ParentModule to get the module.
            Modules come with one by default so you should never need to create one.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingModuleHeader.#ctor(OnixRuntime.Api.OnixClient.OnixModule)">
            <summary>
            Creates a new module header. You should never need to do that.
            </summary>
            <param name="parentModule">The module to add it to or null.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingModuleHeader.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt">
            <summary>
            Represents an integer setting in Onix, allowing configuration of value, default, min, and max.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.Int32,System.Int32,System.Int32,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt"/> class with the specified module, name, default value, min, max, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default integer value.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt"/> class with the specified module, name, default value, min, max, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default integer value.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.Value">
            <summary>
            Gets or sets the current value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.ValueInit">
            <summary>
            Gets or sets the current value of the setting.
            This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.Default">
            <summary>
            Gets or sets the default value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.Min">
            <summary>
            Gets or sets the minimum allowed value for the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.Max">
            <summary>
            Gets or sets the maximum allowed value for the setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingInt.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind">
            <summary>
            Represents a keybind setting in Onix, allowing configuration of a single key value and its default.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,OnixRuntime.Api.Inputs.InputKey,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind"/> class with the specified module, name, default key, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default key value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,OnixRuntime.Api.Inputs.InputKey.Type,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind"/> class with the specified module, name, default key type, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default key type value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,OnixRuntime.Api.Inputs.InputKey,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind"/> class with the specified module, name, default key, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default key value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,OnixRuntime.Api.Inputs.InputKey.Type,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind"/> class with the specified module, name, default key type, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default key type value.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.Value">
            <summary>
            Gets or sets the current key value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.ValueInit">
            <summary>
            Gets or sets the current key value of the setting.
            This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.Default">
            <summary>
            Gets or sets the default key value of the setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingKeybind.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox">
            <summary>
            Represents a textbox setting in Onix, allowing configuration of text value, default, and maximum length.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.Int32,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox"/> class with the specified module, name, default value, maximum length, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default text value.</param>
            <param name="maxLength">The maximum allowed length of the text.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,System.String,System.Int32,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox"/> class with the specified module, name, default value, maximum length, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default text value.</param>
            <param name="maxLength">The maximum allowed length of the text.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.Value">
            <summary>
            Gets the OnixTextbox object representing the current value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.ValueText">
            <summary>
            Gets or sets the current text value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.ValueTextInit">
            <summary>
            Gets or sets the current text value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.DefaultText">
            <summary>
            Gets or sets the default text value of the setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingTextbox.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2">
            <summary>
            Represents a Vec2 setting in Onix, allowing configuration of value, default, min, and max.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2"/> class with the specified module, name, default value, min, max, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="defaultValue">The default Vec2 value.</param>
            <param name="min">The minimum allowed Vec2 value.</param>
            <param name="max">The maximum allowed Vec2 value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.#ctor(OnixRuntime.Api.OnixClient.OnixModule,System.String,System.String,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.String,OnixRuntime.Api.OnixClient.OnixSetting.SettingChangedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2"/> class with the specified module, name, default value, min, max, description, and change callback.
            </summary>
            <param name="mod">The Onix module.</param>
            <param name="name">The name of the setting.</param>
            <param name="saveName">The save name of the setting, this allows the name to change without losing user settings.</param>
            <param name="defaultValue">The default Vec2 value.</param>
            <param name="min">The minimum allowed Vec2 value.</param>
            <param name="max">The maximum allowed Vec2 value.</param>
            <param name="description">The description of the setting.</param>
            <param name="changeCallback">The callback to invoke when the setting changes.</param>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.Value">
            <summary>
            Gets or sets the current value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.ValueInit">
            <summary>
            Gets or sets the current value of the setting.
            This variant will call the on setting changed with the isInit flag set to true.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.Default">
            <summary>
            Gets or sets the default value of the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.Min">
            <summary>
            Gets or sets the minimum allowed value for the setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.Max">
            <summary>
            Gets or sets the maximum allowed value for the setting.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.Save">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.Load(System.Text.Json.Nodes.JsonNode)">
            <inheritdoc />
        </member>
        <member name="M:OnixRuntime.Api.OnixClient.Settings.OnixSettingVec2.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.OnixGame">
            <summary>
            Provides access to core Onix game features, including version, pack managers, chat, commands, and language code.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixGame.Version">
            <summary>
            Gets the Onix game version.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixGame.PackManager">
            <summary>
            The pack manager of the client, this is the one you will/should use most of the time.
            It includes global packs, world packs, treatment packs and whatever else is active!
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixGame.PackManagerBehavior">
            <summary>
            The pack manager, mainly for behavior packs like vanilla behavior packs. This is the client one so there won't be much in there.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixGame.SendChatMessage(System.String)">
            <summary>
            Sends a chat message to the game.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixGame.ExecuteCommand(System.String)">
            <summary>
            Executes a command in the game.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:OnixRuntime.Api.OnixGame.GetTranslatedMessage(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a translated message from the game.
            This lets you get game text in the user's game language.
            </summary>
            <param name="message">The translation key as found in the default pack's en_US.lang or any other lang file.</param>
            <param name="arguments">The parameters this key uses, like player names or things like that.</param>
            <returns>The translated message or the same as what came in.</returns>
        </member>
        <member name="M:OnixRuntime.Api.OnixGame.GetTranslatedMessage(System.String,System.String[])">
            <summary>
            Gets a translated message from the game.
            This lets you get game text in the user's game language.
            </summary>
            <param name="message">The translation key as found in the default pack's en_US.lang or any other lang file.</param>
            <param name="arguments">The parameters this key uses, like player names or things like that.</param>
            <returns>The translated message or the same as what came in.</returns>
        </member>
        <member name="P:OnixRuntime.Api.OnixGame.AudioEngine">
            <summary>
            Gets the audio engine of the game.
            This allows you to play game sounds as well as stop them.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.OnixGame.LanguageCode">
            <summary>
            Gets the current language code of the game.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.OnixGame.InvokeUri(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Invokes a URI internally with the specified verb and parameters.
            Verb may or may not be completely useless.
            You'll probably have to play around with it a little bit.
            </summary>
            <param name="verb">The main action.</param>
            <param name="parameters">The parameters of that action.</param>
        </member>
        <member name="F:OnixRuntime.Api.OnixGame.Options">
            <summary>
            The game's options. This lets you change the game's options, like the field of view or the perspective.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionType">
            <summary>
            The type of game option.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionOwnerType">
            <summary>
            The type of ownership for a game option.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOption">
            <summary>
            Represents a configurable option within a game, providing functionality to change and retrieve option values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.SaveName">
            <summary>
            Gets the current save name of the option, those are the ones you will see in the game (which you lost)'s options.txt file. e.g. "gfx_field_of_view".
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.TelemetryPropertyName">
            <summary>
            Some settings get sent for telemetry purposes, this is the name of that property in the json or something.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.DisplayNameTranslationKey">
            <summary>
            The translation key for displaying that option. This is what you'll find as the key in the .lang file. e.g. "options.fov".
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.DisplayName">
            <summary>
            The translated display name of the option, this is what you would see in the game's settings menu. e.g. "Fov".
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.Type">
            <summary>
            Gets the type of this game option. You can also use inheritance to check the type, like if (option is GameOptionBool boolOption) { ... }.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.OwnerType">
            <summary>
            The kind of owner this option has.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOption.Id">
            <summary>
            The ID for this option, this is version specific and changes between versions. You should only use this if you know the ID for the version you're on right now.
            Don't assume that the ID will be the same in future versions, it might change so make sure you collected it from the option you want before you use it and never hardcode one in!
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionBool">
            <summary>
            Represents a boolean game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionBool.Value">
            <summary>
            The value of this boolean game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionBool.DefaultValue">
            <summary>
            The default value of this boolean game option.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionInputBool">
            <summary>
            A bool option that can be changed per input mode (e.g. keyboard, gamepad).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInputBool.Value">
            <summary>
            The current value of this option for each input mode.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInputBool.DefaultValue">
            <summary>
            The default value of this option for each input mode.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptionInputBool.SetValue(OnixRuntime.Api.Inputs.InputMode,System.Boolean)">
            <summary>
            Sets the value for a specific input mode.
            </summary>
            <param name="mode">The input mode for which the value needs to be set.</param>
            <param name="value">The new value for that input mode.</param>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptionInputBool.SetDefaultValue(OnixRuntime.Api.Inputs.InputMode,System.Boolean)">
            <summary>
            Sets the default value for a specific input mode.
            </summary>
            <param name="mode">The input mode for which the default value needs to be set.</param>
            <param name="value">The new value for that input mode.</param>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionEnum">
            <summary>
            A game option that represents an enumeration of values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionEnum.Value">
            <summary>
            The current value of this enum game option, represented by its underlying integer value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionEnum.DefaultValue">
            <summary>
            The default value of this enum game option, represented by its underlying integer value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionEnum.EnumValueNames">
            <summary>
            The mapping of possible enum values to their internal names.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionEnum.EnumValueDisplayNames">
            <summary>
            The mapping of possible enum values to their display names (user-facing strings).
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionFloat">
            <summary>
            Represents a float game option, allowing retrieval and modification of float values in the game settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionFloat.Value">
            <summary>
            The current value of this float game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionFloat.DefaultValue">
            <summary>
            The default value of this float game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionFloat.Min">
            <summary>
            The minimum value this float can be.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionFloat.Max">
            <summary>
            The maximum value this float can be.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionInputFloat">
            <summary>
            Represents a float game option that can be adjusted for different input modes.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInputFloat.Value">
            <summary>
            The current value of this option for each input mode.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInputFloat.DefaultValue">
            <summary> 
            The default value of this option for each input mode.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInputFloat.Min">
            <summary>
            The minimum value this float can be.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInputFloat.Max">
            <summary>
            The maximum value this float can be,
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptionInputFloat.SetValue(OnixRuntime.Api.Inputs.InputMode,System.Single)">
            <summary>
            Sets the value for a specific input mode.
            </summary>
            <param name="mode">The input mode for which the value needs to be set.</param>
            <param name="value">The new value for that input mode.</param>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptionInputFloat.SetDefaultValue(OnixRuntime.Api.Inputs.InputMode,System.Single)">
            <summary>
            Sets the default value for a specific input mode.
            </summary>
            <param name="mode">The input mode for which the default value needs to be set.</param>
            <param name="value">The new default value for that input mode.</param>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionInt">
            <summary>
            Represents an integer game option, allowing retrieval and modification of integer values in the game settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt.Value">
            <summary>
            The current value of this integer game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt.DefaultValue">
            <summary>
            The default value of this integer game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt.Min">
            <summary>
            The minimum value of this integer game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt.Max">
            <summary>
            The maximum value of this integer game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt.ShouldClampRange">
            <summary>
            If the range of this setting should be clamped to the min and max values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt.PossibleValues">
            <summary>
            The possible values this integer option can be, this is how they used to make render distance be multiples of 16. (Maybe less depending on your RAM but you get the point.)
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionInt64">
            <summary>
            An int64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt64.Value">
            <summary>
            The current value of this Int64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt64.DefaultValue">
            <summary>
            The default value of this Int64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt64.Min">
            <summary>
            The minimum value of this Int64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt64.Max">
            <summary>
            The maximum value of this Int64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt64.ShouldClampRange">
            <summary>
            If the range of this setting should be clamped to the min and max values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionInt64.PossibleValues">
            <summary>
            All the possible values this Int64 option can be.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionUInt64">
            <summary>
            A UInt64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionUInt64.Value">
            <summary>
            The current value of this UInt64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionUInt64.DefaultValue">
            <summary>
            The default value of this UInt64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionUInt64.Min">
            <summary>
            The minimum value of this UInt64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionUInt64.Max">
            <summary>
            The maximum value of this UInt64 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionUInt64.ShouldClampRange">
            <summary>
            If the range of this setting should be clamped to the min and max values.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionUInt64.PossibleValues">
            <summary>
            All the possible values this UInt64 option can be.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.PlayerPerspective">
            <summary>
            Represents the different perspective options.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Options.PlayerPerspective.FirstPerson">
            <summary>The first-person perspective, the default/normal one.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Options.PlayerPerspective.ThirdPersonBack">
            <summary>The third-person perspective, the one facing the back of the user</summary>
        </member>
        <member name="F:OnixRuntime.Api.Options.PlayerPerspective.ThirdPersonFront">
            <summary>The third-person perspective, the one facing the front of the user</summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameUiProfileOption">
            <summary>
            The different UI profile options available in the game.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Options.GameUiProfileOption.Classic">
            <summary> The normal UI profile, used by pretty much everyone on pc.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Options.GameUiProfileOption.Pocket">
            <summary> The pocket UI profile, used by no one on pc.</summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptions">
            <summary>
            Represents the collection of all game options available in the current context.
            Provides methods to enumerate, search, and access individual game options.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.HasOptions">
            <summary>
            Gets a value indicating whether any game options are available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.OptionCount">
            <summary>
            Gets the total number of game options.
            Note that some options are not ever created and therefore the amount of options you count when iterating through the list will differ.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.Options">
            <summary>
            Gets an enumerable collection of all game options.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.InstanciateOption(System.IntPtr)">
            <summary>
            Instantiates a <see cref="T:OnixRuntime.Api.Options.GameOption"/> of the correct derived type based on its underlying type.
            </summary>
            <param name="option">Pointer to the native option structure.</param>
            <returns>A strongly-typed <see cref="T:OnixRuntime.Api.Options.GameOption"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all game options.
            </summary>
            <returns>An enumerator of <see cref="T:OnixRuntime.Api.Options.GameOption"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.FindById(System.Int32)">
            <summary>
            Attempts to find a game option by its unique identifier.
            Note: You should NEVER hardcode an ID, always assume that the ID will change between each restart.
            </summary>
            <param name="id">The ID of the option to find.</param>
            <returns>The matching <see cref="T:OnixRuntime.Api.Options.GameOption"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.Find(System.Func{OnixRuntime.Api.Options.GameOption,System.Boolean})">
            <summary>
            Finds the first game option that matches the specified predicate and gives it to you.
            </summary>
            <param name="predicate">A function to test each option for a condition.</param>
            <returns>The first matching <see cref="T:OnixRuntime.Api.Options.GameOption"/>, or null if none match.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.FindBySaveName(System.String)">
            <summary>
            Finds a game option by its save name, the one you'd see in your options.txt file. e.g. "gfx_field_of_view".
            </summary>
            <param name="saveName">The save name of the option.</param>
            <returns>The matching <see cref="T:OnixRuntime.Api.Options.GameOption"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.FindByTranslationKeyName(System.String)">
            <summary>
            Finds a game option by its display name translation key.
            This is what you'll find as the key in the .lang file. e.g. "options.fov".
            </summary>
            <param name="translationKey">The translation key of the option.</param>
            <returns>The matching <see cref="T:OnixRuntime.Api.Options.GameOption"/> if found; otherwise, null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Options.GameOptions.FindByTelemetryPropertyName(System.String)">
            <summary>
            Finds a game option by its telemetry property name.
            </summary>
            <param name="translationKey">The telemetry property name of the option.</param>
            <returns>The matching <see cref="T:OnixRuntime.Api.Options.GameOption"/> if found; otherwise, null.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.InGamePlayerNames">
            <summary>
            Gets or sets whether in-game player names are displayed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.FancySkies">
            <summary>
            Gets or sets whether fancy skies are enabled in the game.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.TransparentLeaves">
            <summary>
            Gets or sets whether leaves are rendered transparently.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.PerspectiveOption">
            <summary>
            Gets or sets the current perspective option (e.g., first-person or third-person).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.UiProfileOption">
            <summary>
            Gets or sets the current UI profile option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.UiProfile">
            <summary>
            Gets or sets the current UI profile, falling back to <see cref="F:OnixRuntime.Api.Options.GameUiProfileOption.Classic"/> if unset.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.Perspective">
            <summary>
            Gets or sets the current player perspective, falling back to <see cref="F:OnixRuntime.Api.Options.PlayerPerspective.FirstPerson"/> if unset.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.Fov">
            <summary>
            Gets or sets the current field of view.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.FovAlteredByGameplay">
            <summary>
            Gets or sets whether the field of view is altered by gameplay mechanics.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.Gamma">
            <summary>
            Gets or sets the gamma setting for the game.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptions.GuiScaleOffset">
            <summary>
            Gets or sets the GUI scale offset.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionString">
            <summary>
            Represents a string game option, allowing retrieval and modification of string values in the game settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionString.Value">
            <summary>
            The current value of this string game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionString.DefaultValue">
            <summary>
            The default value of this string game option.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionStringList">
            <summary>
            A game option that represents a list of strings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionStringList.Value">
            <summary>
            The current value of this string list game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionStringList.DefaultValue">
            <summary>
            The default value of this string list game option.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Options.GameOptionVec3">
            <summary>
            A game option that represents a three-dimensional vector (Vec3).
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionVec3.Value">
            <summary>
            The current value of this Vec3 game option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Options.GameOptionVec3.DefaultValue">
            <summary>
            The default value of this Vec3 game option.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.BlockGraphics">
            <summary>
            Represents various information about a block's graphics.
            Notably it's texture and shape.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.BlockGraphics.BlockShapes">
            <summary>
            The different shapes a block can have.
            There are always custom blocks that they added some time ago but for vanilla blocks, these are the shapes you will encounter.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.BlockGraphics.TextureItem">
            <summary>
            Represents a block's texture, having both the carried and default textures.
            The carried textures is used for things like UI.
            Example: The carried grass texture is hardcoded green while the default one is grayscale.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.TextureItem.DefaultName">
            <summary>
            The default name of the texture.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.TextureItem.CarriedName">
            <summary>
            The carried name, this is generally used in the UI, the carried grass texture is hardcoded green while the default one is grayscale.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.TextureItem.DefaultItem">
            <summary>
            The default texture in the <see cref="F:OnixRuntime.Api.Rendering.TexturePath.TerrainAtlas"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.TextureItem.CarriedItem">
            <summary>
            The carried texture in the <see cref="F:OnixRuntime.Api.Rendering.TexturePath.TerrainAtlas"/>.
            This is generally used in the UI, the carried grass texture is hardcoded green while the default one is grayscale.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.Block">
            <summary>
            The block this is for.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.Shape">
            <summary>
            Gets the shape of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.BrightnessGamma">
            <summary>
            No idea, it's here if you need it and know what it is.
            If you do know please contribute the documentation comment.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.Fancy">
            <summary>
            If this is the fancy version of the block graphics.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.AllowSame">
            <summary>
            If the same block can have multiple graphics (?)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.VisualShape">
            <summary>
            May be unused/unpopulated.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.BlockGraphics.TextureItems">
            <summary>
            The textures used by this block.
            In most cases, you get 6 of those for each side of the block. <see cref="T:OnixRuntime.Api.World.BlockFace"/> has the indexes for each side.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.BlockGraphics.GetTextureDefaultVariations(System.UInt32,System.Int32)">
            <summary>
            Retrieves the default texture variations for a specified block face and block variant.
            </summary>
            <param name="mappedBlockFace">Generally, the face of the block for which the texture is being retrieved, mapped as you need to rotate blocks yourself.</param>
            <param name="blockVariant">The variant of the block, used to determine the specific texture to retrieve, like wood types. This may not always be just Data.</param>
            <returns>An array of <see cref="T:OnixRuntime.Api.Rendering.TextureUVCoordinates"/> representing the default texture variations for the specified
            block face and variant.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.BlockGraphics.GetTextureDefaultVariation(OnixRuntime.Api.Maths.BlockPos,System.UInt32,System.Int32)">
            <summary>
            Retrieves the texture UV coordinates for a specific block face and variant at the given world position.
            </summary>
            <param name="worldPosition">The position of the block in the world.</param>
            <param name="mappedBlockFace">Generally, the face of the block for which the texture is being retrieved, mapped as you need to rotate blocks yourself.</param>
            <param name="blockVariant">The variant of the block, used to determine the specific texture to retrieve, like wood types. This may not always be just Data.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Rendering.TextureUVCoordinates"/> representing the UV coordinates of the texture for the specified
            block face and variant.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.BlockGraphics.GetTextureCarriedVariations(System.UInt32,System.Int32)">
            <summary>
            Retrieves the default texture variations for a specified block face and block variant.
            Carried is generally used in the UI, the carried grass texture is hardcoded green while the default one is grayscale.
            </summary>
            <param name="mappedBlockFace">Generally, the face of the block for which the texture is being retrieved, mapped as you need to rotate blocks yourself.</param>
            <param name="blockVariant">The variant of the block, used to determine the specific texture to retrieve, like wood types. This may not always be just Data.</param>
            <returns>An array of <see cref="T:OnixRuntime.Api.Rendering.TextureUVCoordinates"/> representing the default texture variations for the specified
            block face and variant.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.BlockGraphics.GetTextureCarriedVariation(OnixRuntime.Api.Maths.BlockPos,System.UInt32,System.Int32)">
            <summary>
            Retrieves the texture UV coordinates for a specific block face and variant at the given world position.
            Carried is generally used in the UI, the carried grass texture is hardcoded green while the default one is grayscale.
            </summary>
            <param name="worldPosition">The position of the block in the world.</param>
            <param name="mappedBlockFace">Generally, the face of the block for which the texture is being retrieved, mapped as you need to rotate blocks yourself.</param>
            <param name="blockVariant">The variant of the block, used to determine the specific texture to retrieve, like wood types. This may not always be just Data.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Rendering.TextureUVCoordinates"/> representing the UV coordinates of the texture for the specified
            block face and variant.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.GameMaterialParameters">
            <summary>
            Represents various rendering parameters for the state.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMaterialParameters.#ctor">
            <summary>
            The default constructor for the material parameters. Defaults with everything to false except <see cref="P:OnixRuntime.Api.Rendering.GameMaterialParameters.AlphaTest"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.Linear">
            <summary>
            Enables or disables linear filtering for the material, with this false, nearest neighbor will be used.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.Blending">
            <summary>
            Enables or disables blending for the material, with this false, the material will be always opaque.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.AlphaTest">
            <summary>
            Enables or disables alpha testing for the material, this will discard transparent pixels of a texture.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.NoDepthTest">
            <summary>
            Enables or disables depth testing for the material, with this false, the material will not be rendered if it is behind another object that was also depth tested.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.NoDepthWrite">
            <summary>
            Enables or disables depth writing for the material, with this false, the material will not write to the depth buffer, allowing other objects to be rendered on top of it even when they are below.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.DepthLessEqual">
            <summary>
            Changes the depth test to be less than or equal instead of just less than, this will allow objects to be rendered on top of each other if they are at the same depth.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.Light">
            <summary>
            Enables or disables lighting for the material, with this false, the material will not be affected by lights in the scene.
            Make sure FullBright isn't enabled in the client if you're trying to see that working.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.DisableCulling">
            <summary>
            Enables or disables culling for the material, with this false, both faces of geometry will be rendered.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.InvertCulling">
            <summary>
            When true, the front face of the geometry will be rendered as the back face.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.Gradient">
            <summary>
            Allows the material to specify a vertex color.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.Uv">
            <summary>
            Allows the material to specify UV coordinates for textures.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMaterialParameters.IsCustom">
            <summary>
            If the material is custom and does not utilize the parameters defined here.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.GameMaterialParameterType">
            <summary>
            Represents the various parameters that can be configured for a game material.
            This enum is used for individual parameters, when you just want to toggle something on for a bit for example.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.Linear">
            <summary>
            Enables or disables linear filtering for the material, with this false, nearest neighbor will be used.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.Blending">
            <summary>
            Enables or disables blending for the material, with this false, the material will be always opaque.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.AlphaTest">
            <summary>
            Enables or disables alpha testing for the material, this will discard transparent pixels of a texture.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.NoDepthTest">
            <summary>
            Enables or disables depth testing for the material, with this false, the material will not be rendered if it is behind another object that was also depth tested.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.NoDepthWrite">
            <summary>
            Enables or disables depth writing for the material, with this false, the material will not write to the depth buffer, allowing other objects to be rendered on top of it even when they are below.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.DepthLessEqual">
            <summary>
            Changes the depth test to be less than or equal instead of just less than, this will allow objects to be rendered on top of each other if they are at the same depth.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.Light">
            <summary>
            Enables or disables lighting for the material, with this false, the material will not be affected by lights in the scene.
            Make sure FullBright isn't enabled in the client if you're trying to see that working.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.DisableCulling">
            <summary>
            Enables or disables culling for the material, with this false, both faces of geometry will be rendered.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.InvertCulling">
            <summary>
            When true, the front face of the geometry will be rendered as the back face.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.Gradient">
            <summary>
            Allows the material to specify a vertex color.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.GameMaterialParameterType.Uv">
            <summary>
            Allows the material to specify UV coordinates for textures.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.GameMesh">
            <summary>
            Represents a 3D/2D mesh in the game's renderer.
            You can render it later on.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType">
            <summary>
            Specifies the primitive type for mesh building.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.Quad">
            <summary>Quad primitive type.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.Triangle">
            <summary>Triangle primitive type.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.TriangleStrip">
            <summary>Triangle strip primitive type.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.Line">
            <summary>Line primitive type.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType.LineStrip">
            <summary>Line strip primitive type.</summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.GameMeshBuilder">
            <summary>
            Provides methods to build and render meshes at runtime.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession">
            <summary>
            Represents a session for building a mesh, automatically rendering on dispose.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.Builder">
            <summary>
            Gets the mesh builder associated with this session.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.#ctor(OnixRuntime.Api.Rendering.GameMeshBuilder,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},System.Boolean)">
            <summary>
            Initializes a new mesh builder session.
            </summary>
            <param name="builder">The mesh builder instance.</param>
            <param name="texture">Optional texture path.</param>
            <param name="primitiveType">Primitive type to use.</param>
            <param name="color">Optional color.</param>
            <param name="applyReverseOriginOffsetIf3D">if we're in 3d mode, should we reverse the origin so that you can specify world positions directly. Do not use with matrices</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.#ctor(OnixRuntime.Api.Rendering.GameMeshBuilder,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,System.Boolean)">
            <summary>
            Initializes a new mesh builder session.
            </summary>
            <param name="builder">The mesh builder instance.</param>
            <param name="primitiveType">Primitive type to use.</param>
            <param name="color">Optional color.</param>
            <param name="texture">Optional texture path.</param>
            <param name="applyReverseOriginOffsetIf3D">if we're in 3d mode, should we reverse the origin so that you can specify world positions directly. Do not use with matrices</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.#ctor(OnixRuntime.Api.Rendering.GameMeshBuilder,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,OnixRuntime.Api.Rendering.TexturePath,System.Boolean)">
            <summary>
            Initializes a new mesh builder session.
            </summary>
            <param name="builder">The mesh builder instance.</param>
            <param name="color">Optional color.</param>
            <param name="primitiveType">Primitive type to use.</param>
            <param name="texture">Optional texture path.</param>
            <param name="applyReverseOriginOffsetIf3D">if we're in 3d mode, should we reverse the origin so that you can specify world positions directly. Do not use with matrices</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.#ctor(OnixRuntime.Api.Rendering.GameMeshBuilder,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new mesh builder session.
            </summary>
            <param name="builder">The mesh builder instance.</param>
            <param name="color">Optional color.</param>
            <param name="texture">Optional texture path.</param>
            <param name="primitiveType">Primitive type to use.</param>
            <param name="applyReverseOriginOffsetIf3D">if we're in 3d mode, should we reverse the origin so that you can specify world positions directly. Do not use with matrices</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.GameMeshBuilderSession.Dispose">
            <summary>
            Renders the mesh and ends the session.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(System.Single,System.Single,System.Single)">
            <summary>
            Adds a vertex to the mesh with the specified coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(System.Single,System.Single)">
            <summary>
            Adds a vertex to the mesh with the specified coordinates (z defaults to 0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds a vertex to the mesh using a 2D vector (z defaults to 0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Adds a vertex to the mesh using a 3D vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a vertex with UV coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a vertex with UV coordinates (z defaults to 0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds a vertex with a 2D position and UV coordinates (z defaults to 0).
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(System.Single,System.Single,System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds a vertex with a 3D position and UV coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds a vertex with a 2D position and UV coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds a vertex with a 3D position and UV coordinates.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single)">
            <summary>
            Adds a vertex with a 2D position and separate UV values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Vertex(OnixRuntime.Api.Maths.Vec3,System.Single,System.Single)">
            <summary>
            Adds a vertex with a 3D position and separate UV values.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Color(System.UInt32)">
            <summary>
            Sets the color for subsequent vertices.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Color(OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Sets the color for subsequent vertices.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Normal(System.Single,System.Single,System.Single)">
            <summary>
            Sets the normal vector for subsequent vertices.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Normal(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Sets the normal vector for subsequent vertices.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Uv(System.Single,System.Single)">
            <summary>
            Sets the UV coordinates for subsequent vertices.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Uv(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Sets the UV coordinates for subsequent vertices.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMeshBuilder.PrimitiveType">
            <summary>
            Gets the primitive type of the mesh builder.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMeshBuilder.HasStarted">
            <summary>
            Gets a value indicating whether the mesh builder has started.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMeshBuilder.PostTransformOffset">
            <summary>
            Gets or sets the post-transform offset for the mesh builder. This will essentially be Vertex * Scale + Offset.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.GameMeshBuilder.PostScaleOffset">
            <summary>
            Gets or sets the post-scale offset for the mesh builder. This will essentially be Vertex * Scale + Offset.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.New(OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Boolean)">
            <summary>
            Starts a new mesh with the specified color and primitive type.
            </summary>
            <param name="primitiveType">What primitive are the vertices defining?</param>
            <param name="color">The color of the mesh.</param>
            <param name="applyReverseOriginOffsetIf3D">If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.New(OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Boolean)">
            <summary>
            Starts a new mesh with the specified primitive type (color defaults to white).
            </summary>
            <param name="primitiveType">What primitive are the vertices defining?</param>
            <param name="applyReverseOriginOffsetIf3D">If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Clear">
            <summary>
            Clears the current mesh so you're ready to start a new one.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Render">
            <summary>
            Renders the current mesh.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Render(OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Renders the current mesh with the specified texture.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.Build(System.Boolean,System.Boolean)">
            <summary>
            Builds the current mesh.
            </summary>
            <param name="immediate">If true, the mesh is built immediately.</param>
            <param name="clear">If true, the mesh is cleared after building.</param>
            <returns>The built mesh.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.NewSession(OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},System.Boolean)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should prefer the renderer's <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF})"/> to this one since they will hand it to you in a more ready state based on its current parameters.
            </summary>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="applyReverseOriginOffsetIf3D">If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.NewSession(OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,System.Boolean)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should prefer the renderer's <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath)"/> to this one since they will hand it to you in a more ready state based on its current parameters.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="applyReverseOriginOffsetIf3D">If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.NewSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,OnixRuntime.Api.Rendering.TexturePath,System.Boolean)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            /// You should prefer the renderer's <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,OnixRuntime.Api.Rendering.TexturePath)"/> to this one since they will hand it to you in a more ready state based on its current parameters.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="applyReverseOriginOffsetIf3D">If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.NewSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Boolean)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            /// /// You should prefer the renderer's <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType)"/> to this one since they will hand it to you in a more ready state based on its current parameters.
            </summary>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="applyReverseOriginOffsetIf3D">If true, applies a reverse origin offset if the renderer is 3D. This makes it visible in 3d space.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddRoundRectVertices(OnixRuntime.Api.Maths.Rect,System.Single,System.Int32)">
            <summary>
            Adds vertices for a rounded rectangle.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddRoundRectOutlineVertices(OnixRuntime.Api.Maths.Rect,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for a rounded rectangle outline.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="width">The width of the outline.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Int32)">
            <summary>
            Adds vertices for an ellipse.
            </summary>
            <param name="centerPosition">The center position of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseVertices(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for an ellipse.
            </summary>
            <param name="centerPosition">The center position of the ellipse.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseVertices(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2,System.Int32)">
            <summary>
            Adds vertices for an ellipse.
            </summary>
            <param name="x">The x-coordinate of the center position.</param>
            <param name="y">The y-coordinate of the center position.</param>
            <param name="radius">The radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseVertices(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for an ellipse.
            </summary>
            <param name="x">The x-coordinate of the center position.</param>
            <param name="y">The y-coordinate of the center position.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddCircleVertices(OnixRuntime.Api.Maths.Vec2,System.Single,System.Int32)">
            <summary>
            Adds vertices for a circle.
            </summary>
            <param name="centerPosition">The center position of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="iterations">The number of iterations for the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddCircleVertices(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for a circle.
            </summary>
            <param name="x">The x-coordinate of the center position.</param>
            <param name="y">The y-coordinate of the center position.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="iterations">The number of iterations for the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseOutlineVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Single,System.Int32)">
            <summary>
            Adds vertices for an ellipse outline.
            </summary>
            <param name="centerPosition">The center position of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <param name="lineWidth">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseOutlineVertices(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for an ellipse outline.
            </summary>
            <param name="centerPosition">The center position of the ellipse.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="lineWidth">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseOutlineVertices(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2,System.Single,System.Int32)">
            <summary>
            Adds vertices for an ellipse outline.
            </summary>
            <param name="x">The x-coordinate of the center position.</param>
            <param name="y">The y-coordinate of the center position.</param>
            <param name="radius">The radius of the ellipse.</param>
            <param name="lineWidth">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddEllipseOutlineVertices(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for an ellipse outline.
            </summary>
            <param name="x">The x-coordinate of the center position.</param>
            <param name="y">The y-coordinate of the center position.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="lineWidth">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddCircleOutlineVertices(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for a circle outline.
            </summary>
            <param name="centerPosition">The center position of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="lineWidth">The width of the outline.</param>
            <param name="iterations">The number of iterations for the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddCircleOutlineVertices(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds vertices for a circle outline.
            </summary>
            <param name="x">The x-coordinate of the center position.</param>
            <param name="y">The y-coordinate of the center position.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="lineWidth">The width of the outline.</param>
            <param name="iterations">The number of iterations for the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesForFaceUv(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Rect,BlockFaceUvRotation,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uv coordinates.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="face">The face of the bounding box to render.</param>
            <param name="uv">The UV coordinates to use for that face.</param>
            <param name="blockFaceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesForFaceUv(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.World.BlockFace,BlockFaceUvRotation,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="face">The face of the bounding box to render.</param>
            <param name="blockFaceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesForFaceUvNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Rect,BlockFaceUvRotation,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uv coordinates, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="face">The face of the bounding box to render.</param>
            <param name="uv">The UV coordinates to use for that face.</param>
            <param name="blockFaceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesForFaceNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.World.BlockFace,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with normals.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="face">The face of the bounding box to render.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesForFaceUvNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.World.BlockFace,BlockFaceUvRotation,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="face">The face of the bounding box to render.</param>
            <param name="blockFaceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesForFace(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.World.BlockFace,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="face">The face of the bounding box to render.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVertices(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered (does not work with lines).</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVertices(OnixRuntime.Api.Maths.BoundingBox,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUv(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},PerBlockFaceFaceData{BlockFaceUvRotation},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uv coordinates.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="faceUv">The uv coordinates of each face.</param>
            <param name="faceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUv(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{BlockFaceUvRotation},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="faceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUv(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uv coordinates and no rotation.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="faceUv">The uv coordinates of each face.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUv(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv with no rotation.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
            
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUv(OnixRuntime.Api.Maths.BoundingBox,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a complete bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv with no rotation.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUvNormal(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},PerBlockFaceFaceData{BlockFaceUvRotation},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uv coordinates, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="faceUv">The uv coordinates of each face.</param>
            <param name="faceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesNormal(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with normals.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesNormal(OnixRuntime.Api.Maths.BoundingBox,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with normals.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUvNormal(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{BlockFaceUvRotation},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="faceUvRotation">The rotation to apply to the UV coordinates.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUvNormal(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uv coordinates and no rotation, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="faceUv">The uv coordinates of each face.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUvNormal(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv with no rotation, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="renderFace">Which faces should be rendered.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
            
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddBoundingBoxVerticesUvNormal(OnixRuntime.Api.Maths.BoundingBox,System.Boolean,System.Boolean)">
            <summary>
            Adds vertices for a complete bounding box with uvs, it will use <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> (0,0,1,1) as its uv with no rotation, this will add normals for you as well.
            </summary>
            <param name="box">The bounding box.</param>
            <param name="backFace">If true, adds the back face vertices.</param>
            <param name="frontFace">If true, adds the front face vertices.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadQuadVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Adds vertices for a quad.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadQuadVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds vertices for a quad.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientVertices(OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32)">
            <summary>
            Adds vertices for a quad with gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientVertices(OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32)">
            <summary>
            Adds vertices for a quad with gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a quad with gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a quad with gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds vertices for a quad with UV coordinates.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds vertices for a quad with UV coordinates.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32)">
            <summary>
            Adds vertices for a quad with UV coordinates and gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32)">
            <summary>
            Adds vertices for a quad with UV coordinates and gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a quad with UV coordinates and gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a quad with UV coordinates and gradient colors.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with gradient colors and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with gradient colors and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with gradient colors and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with gradient colors and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftcolor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with UV coordinates and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with UV coordinates and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddQuadUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a quad with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="TopLeft">The top-left vertex.</param>
            <param name="TopLeftUV">The UV coordinates of the top-left vertex.</param>
            <param name="TopLeftColor">The color of the top-left vertex.</param>
            <param name="TopRight">The top-right vertex.</param>
            <param name="TopRightUV">The UV coordinates of the top-right vertex.</param>
            <param name="TopRightColor">The color of the top-right vertex.</param>
            <param name="BottomLeft">The bottom-left vertex.</param>
            <param name="BottomLeftUV">The UV coordinates of the bottom-left vertex.</param>
            <param name="BottomLeftColor">The color of the bottom-left vertex.</param>
            <param name="BottomRight">The bottom-right vertex.</param>
            <param name="BottomRightUV">The UV coordinates of the bottom-right vertex.</param>
            <param name="BottomRightColor">The color of the bottom-right vertex.</param>
            <param name="Normal">The normal vector for the quad.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Adds vertices for a triangle.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point3">The third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds vertices for a triangle.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point3">The third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientVertices(OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32)">
            <summary>
            Adds vertices for a triangle with gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientVertices(OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32)">
            <summary>
            Adds vertices for a triangle with gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a triangle with gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a triangle with gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds vertices for a triangle with UV coordinates.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1UV">The UV coordinates of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2UV">The UV coordinates of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3UV">The UV coordinates of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Adds vertices for a triangle with UV coordinates.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1UV">The UV coordinates of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2UV">The UV coordinates of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3UV">The UV coordinates of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32)">
            <summary>
            Adds vertices for a triangle with UV coordinates and gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1UV">The UV coordinates of the first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2UV">The UV coordinates of the second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3UV">The UV coordinates of the third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32)">
            <summary>
            Adds vertices for a triangle with UV coordinates and gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1UV">The UV coordinates of the first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2UV">The UV coordinates of the second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3UV">The UV coordinates of the third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a triangle with UV coordinates and gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1UV">The UV coordinates of the first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2UV">The UV coordinates of the second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3UV">The UV coordinates of the third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Adds vertices for a triangle with UV coordinates and gradient colors.
            </summary>
            <param name="point1">The first vertex.</param>
            <param name="point1UV">The UV coordinates of the first vertex.</param>
            <param name="point1Color">The color of the first vertex.</param>
            <param name="point2">The second vertex.</param>
            <param name="point2UV">The UV coordinates of the second vertex.</param>
            <param name="point2Color">The color of the second vertex.</param>
            <param name="point3">The third vertex.</param>
            <param name="point3UV">The UV coordinates of the third vertex.</param>
            <param name="point3Color">The color of the third vertex.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec3,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with gradient colors and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with gradient colors and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with gradient colors and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with gradient colors and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with UV coordinates and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="UV1">The UV coordinates of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="UV2">The UV coordinates of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="UV3">The UV coordinates of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with UV coordinates and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="UV1">The UV coordinates of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="UV2">The UV coordinates of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="UV3">The UV coordinates of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="UV1">The UV coordinates of the first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="UV2">The UV coordinates of the second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="UV3">The UV coordinates of the third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.UInt32,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="UV1">The UV coordinates of the first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="UV2">The UV coordinates of the second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="UV3">The UV coordinates of the third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="UV1">The UV coordinates of the first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="UV2">The UV coordinates of the second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="UV3">The UV coordinates of the third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.AddTriangleUvGradientNormalVertices(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec4)">
            <summary>
            Adds vertices for a triangle with UV coordinates, gradient colors, and normal vector.
            </summary>
            <param name="Vertex1">The first vertex.</param>
            <param name="UV1">The UV coordinates of the first vertex.</param>
            <param name="Color1">The color of the first vertex.</param>
            <param name="Vertex2">The second vertex.</param>
            <param name="UV2">The UV coordinates of the second vertex.</param>
            <param name="Color2">The color of the second vertex.</param>
            <param name="Vertex3">The third vertex.</param>
            <param name="UV3">The UV coordinates of the third vertex.</param>
            <param name="Color3">The color of the third vertex.</param>
            <param name="Normal">The normal vector for the triangle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertex[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexColor[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexUv[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexNormal[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexColorUv[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexColorNormal[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexUvNormal[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(OnixRuntime.Api.Rendering.MeshBuilderVertexColorUvNormal[],System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertex},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexColor},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexUv},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexNormal},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexColorUv},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexColorNormal},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexUvNormal},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.GameMeshBuilder.VertexBatch(System.Collections.Generic.List{OnixRuntime.Api.Rendering.MeshBuilderVertexColorUvNormal},System.Int32)">
            <summary>
            Adds a bunch of vertices to the mesh builder at once.
            This allows you to save some Managed -> Native calls.
            </summary>
            <param name="vertices">The vertices to add</param>
            <param name="length">The number of vertices to add. If -1, all vertices in the array will be added.</param>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.Helpers.LinearAnimation">
            <summary>
            Tracks animation state for a region.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimation.#ctor(System.Boolean)">
            <summary>
            Tracks animation state for a region.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimation.GetLinear(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Gets the current linear animation value for highlight transitions.
            </summary>
            <param name="isGoingUp">True if the highlight is increasing (mouse entered), false if decreasing (mouse exited).</param>
            <param name="animationTime">The duration of the animation in seconds.</param>
            <param name="restartSmoothly">If true, the animation restarts smoothly on direction change; otherwise, it jumps to the edge.</param>
            <returns>The current linear value between 0 and 1.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimation.GetLinear(System.Boolean,System.Single,System.Boolean)">
            <summary>
            Gets the current linear animation value for highlight transitions.
            </summary>
            <param name="isGoingUp">True if the highlight is increasing (mouse entered), false if decreasing (mouse exited).</param>
            <param name="animationTime">The duration of the animation in seconds.</param>
            <param name="restartSmoothly">If true, the animation restarts smoothly on direction change; otherwise, it jumps to the edge.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimation.Reset">
            <summary>
            Resets the animation state, stopping the stopwatch and resetting the linear value.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker">
            <summary>
            Tracks linear animations for a string key.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker.GetOrCreate(System.String,System.Boolean)">
            <summary>
            Gets or creates a linear animation for the specified key.
            </summary>
            <param name="key">The key for the animation.</param>
            <param name="goingUp">Initial direction of the animation.</param>
            <returns>The linear animation instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker.Reset(System.String)">
            <summary>
            Resets the animation for the specified key, removing it from tracking.
            </summary>
            <param name="key">The key for the animation to reset.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker.ResetAll">
            <summary>
            Resets all the animations for the specified key, removing it from tracking.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker`1">
            <summary>
            Tracks linear animations for a specific type.
            </summary>
            <typeparam name="T">The type of the key for the animation.</typeparam>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker`1.GetOrCreate(`0,System.Boolean)">
            <summary>
            Gets or creates a linear animation for the specified key.
            </summary>
            <param name="key">The key for the animation.</param>
            <param name="goingUp">Initial direction of the animation.</param>
            <returns>The linear animation instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker`1.Reset(`0)">
            <summary>
            Resets the animation for the specified key, removing it from tracking.
            </summary>
            <param name="key">The key for the animation to reset.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.LinearAnimationTracker`1.ResetAll">
            <summary>
            Resets all the animations for the specified key, removing it from tracking.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.Helpers.EasingAnimations">
            <summary>
            Provides easing animations for various transitions.
            https://easings.net/
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic">
            <summary>
            Provides the logic for a scrollable panel with scrollbars.
            Provides some rendering, but mainly the working scrollbar logic.
            You give it the view area and the size of your content and it gives you the ContentRect
            You can change various padding options to customize the layout.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.PanelRect">
            <summary>
            The visible area (panel bounds).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.ContentSize">
            <summary>
            Total content size.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.ScrollbarThickness">
            <summary>
            Thickness of the scrollbars.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.MinThumbSize">
            <summary>
            Minimum size of the scrollbar thumb.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.MarginFromRight">
            <summary>
            Margin from the right edge for the vertical scrollbar.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.MarginFromTop">
            <summary>
            Margin from the top edge for the scrollbars.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.MarginFromBottom">
            <summary>
            Margin from the bottom edge for the scrollbars.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.MarginFromLeft">
            <summary>
            Margin from the left edge for the horizontal scrollbar.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.SmoothScrollSpeed">
            <summary>
            Speed of smooth scrolling (0-1).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.ScrollWheelJump">
            <summary>
            Amount to scroll per mouse wheel tick.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.HScrollbarMaxHeight">
            <summary>
            Gets the maximum height of the horizontal scrollbar, including margins.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.VScrollbarMaxWidth">
            <summary>
            Gets the maximum width of the vertical scrollbar, including margins.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.HScrollbarHeight">
            <summary>
            Gets the height of the horizontal scrollbar if visible, otherwise 0.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.VScrollbarWidth">
            <summary>
            Gets the width of the vertical scrollbar if visible, otherwise 0.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.ContentRect">
            <summary>
            Gets the content rectangle in screen coordinates, excluding scrollbars.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.GetScrollOffset">
            <summary>
            Gets the current scroll offset (top-left of visible content).
            </summary>
            <returns>The current scroll offset as a <see cref="T:OnixRuntime.Api.Maths.Vec2"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.HasVerticalScrollbar">
            <summary>
            Returns true if the vertical scrollbar is visible.
            </summary>
            <returns>True if vertical scrollbar is visible, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.HasHorizontalScrollbar">
            <summary>
            Returns true if the horizontal scrollbar is visible.
            </summary>
            <returns>True if horizontal scrollbar is visible, otherwise false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.Update(OnixRuntime.Api.Inputs.InputKey.ClickType,OnixRuntime.Api.Maths.Vec2,System.Int32,System.Single)">
            <summary>
            Updates the scrollbar panel logic. Should be called every frame with the latest mouse input.
            </summary>
            <param name="click">The mouse click type.</param>
            <param name="mousePosition">The current mouse position.</param>
            <param name="scrollCount">The scroll wheel delta.</param>
            <param name="deltaTime">The time since the last update, in seconds.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.GetContentRegion">
            <summary>
            Gets the visible content region in content coordinates.
            </summary>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the visible content region.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.GetVerticalScrollbarRect">
            <summary>
            Gets the vertical scrollbar rectangle in screen coordinates.
            </summary>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the vertical scrollbar area.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.GetVerticalThumbRect">
            <summary>
            Gets the vertical scrollbar thumb rectangle in screen coordinates.
            </summary>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the vertical scrollbar thumb.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.GetHorizontalScrollbarRect">
            <summary>
            Gets the horizontal scrollbar rectangle in screen coordinates.
            </summary>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the horizontal scrollbar area.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.GetHorizontalThumbRect">
            <summary>
            Gets the horizontal scrollbar thumb rectangle in screen coordinates.
            </summary>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the horizontal scrollbar thumb.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.RenderScrollbarsV3Themed(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.OnixClient.OnixClientThemeV3)">
            <summary>
            Renders the scrollbars using the V3 theme.
            </summary>
            <param name="gfx">The renderer to use.</param>
            <param name="theme">The theme to use. If null, uses the default client theme.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.ScrollbarPanelLogic.RenderContent(OnixRuntime.Api.Rendering.RendererCommon2D,System.Action{OnixRuntime.Api.Maths.Rect})">
            <summary>
            Renders the content within the panel, applying clipping and drawing scrollbars.
            </summary>
            <param name="gfx">The 2D renderer to use.</param>
            <param name="renderContentCallback">A callback to render the content. Receives the content rectangle as a parameter.</param>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.Helpers.SvgRenderer">
            <summary>
            Helper class to render svg documents at varying sizes.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.VirtualBasePath">
            <summary>
            This is the virtual base path used to identify the SVG image.
            It is used to construct the texture path for the SVG image.
            This allows you to group SVG images under a common path in the texture cache.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.VirtualFileName">
            <summary>
            This is the virtual file name used to identify the SVG image.
            These things need a name, so we can upload them to the texture cache.
            The name should be unique for each SVG image, and it will be used to construct the texture path.                    
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.PathProvider">
            <summary>
            This function is used to get a virtual <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> for the SVG image rendering at a specific size.
            The default implementation constructs a path based on the renderer's base path and file name, appending the size in the format "{width}x{height}.png".
            If you need a different path structure or want to use a different method to get the texture path, you can override this function.
            It will upload the image for that size under whatever <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> you return here.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.SvgImageRenderer">
            <summary>
            This function is used to render the SVG document into a raw image data.
            The default implementation uses the SvgDocument's Render method to create a RawImageData object.
            This will fill the whole image, stretching it if necessary.
            If you need more control over how it places the SVG into the image, you can override this function.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.SizeTransformer">
            <summary>
            This function transforms the size given by the user when rendering the image into the size of the actual image data.
            The default implementation multiplies the size by the GUI scale factor, making it the same raw pixel size as the GUI.
            If you want to use the SVG renderer for other purposes, you can override this function to return a different size fitting your needs.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RegenerationThreshold">
            <summary>
            When rendering in non-static mode, this is the minimum size difference that will trigger a regeneration of the SVG image.
            This is used to avoid regenerating the image too often when the size changes too slightly.
            /// The default value is 64x64 pixels, meaning that the image will only be regenerated if the size changes by at least 64 pixels in either dimension.
            This is useful to avoid unnecessary rendering when the size changes slightly, but you can adjust it to your needs.
            This is to avoid animations generating a ton of images when the size changes slightly.
            When rendering an image at the same size for a while, a new image will only be generated regardless of this treshold.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderClosestSizeUntilReady">
            <summary>
            This is used to determine if the SVG renderer should render the closest size available until the texture of the proper size is ready.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.NoShowThreshold">
            <summary>
            How long in seconds between renders should we assume that the image wasn't shown for a while.
            This will reset how long it's been on screen and delay its generation.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.DisplayTimeBeforeGeneration">
            <summary>
            How long a size that falls within the regeneration threshold should be shown before we generate a specialized image for it.
            This is used to avoid generating images for sizes that are only shown for a short time while still allowing for images to be generated for sizes that are shown for a longer time.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.Document">
            <summary>
            Gets the SVG document that is used for rendering, measuring, whatever.
            This will return null when the document is not yet loaded.
            You can check this periodically if you need to document to be loaded before things happen.
            Please don't use this to avoid rendering when not ready, this is handled for you.
            </summary>
            <returns>The loaded SVG document, or null if not yet loaded.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.Create(System.String,System.String)">
            <summary>
            Creates a new SVG renderer from the provided SVG document content.
            </summary>
            <param name="virtualFileName">The virtual file name to use for identifying this SVG in the texture cache.</param>
            <param name="documentContent">The SVG document content as a string.</param>
            <returns>A new SvgRenderer instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.Create(System.String,OnixRuntime.Api.Utils.SvgDocument)">
            <summary>
            Creates a new SVG renderer from an already loaded SVG document.
            </summary>
            <param name="virtualFileName">The virtual file name to use for identifying this SVG in the texture cache.</param>
            <param name="document">The loaded SVG document.</param>
            <returns>A new SvgRenderer instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.CreateFromFile(System.String)">
            <summary>
            Creates a new SVG renderer that will load the SVG document from the specified file path.
            </summary>
            <param name="documentPath">The file path to the SVG document.</param>
            <returns>A new SvgRenderer instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithBasePath(System.String)">
            <summary>
            Sets the virtual base path used for grouping SVG textures in the texture cache.
            </summary>
            <param name="basePath">The virtual base path to use.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithVirtualFile(System.String)">
            <summary>
            Sets the virtual file name used for identifying this SVG in the texture cache.
            </summary>
            <param name="virtualFile">The virtual file name to use.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithPathForSize(System.Func{OnixRuntime.Api.Rendering.Helpers.SvgRenderer,OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Rendering.TexturePath})">
            <summary>
            Sets a custom function for generating texture paths based on the renderer and size.
            </summary>
            <param name="pathFunc">A function that takes the renderer and size, and returns the texture path to use.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithRenderFunc(System.Func{OnixRuntime.Api.Rendering.Helpers.SvgRenderer,OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Utils.SvgDocument,OnixRuntime.Api.Utils.RawImageData})">
            <summary>
            Sets a custom function for rendering the SVG document into raw image data.
            </summary>
            <param name="renderFunc">A function that takes the renderer, size, and SVG document, and returns the rendered image data.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithTransformFunc(System.Func{OnixRuntime.Api.Rendering.Helpers.SvgRenderer,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2I})">
            <summary>
            Sets a custom function for transforming the raw size into the actual image size.
            </summary>
            <param name="transformFunc">A function that takes the renderer and raw size, and returns the transformed size.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithRegenerationThreshold(OnixRuntime.Api.Maths.Vec2I)">
            <summary>
            Sets the regeneration threshold for dynamic rendering mode.
            </summary>
            <param name="threshold">The minimum size difference that will trigger regeneration of the SVG image.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithRegenerationThreshold(System.Int32)">
            <summary>
            Sets the regeneration threshold for dynamic rendering mode using the same value for width and height.
            </summary>
            <param name="threshold">The minimum size difference that will trigger regeneration of the SVG image.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithRegenerationThreshold(System.Int32,System.Int32)">
            <summary>
            Sets the regeneration threshold for dynamic rendering mode with separate width and height values.
            </summary>
            <param name="width">The minimum width difference that will trigger regeneration.</param>
            <param name="height">The minimum height difference that will trigger regeneration.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithRenderClosestSizeUntilReady(System.Boolean)">
            <summary>
            Sets whether to render the closest available size until the proper size is ready.
            </summary>
            <param name="renderClosest">True to render the closest size available, false to wait for the exact size.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithNoShowThreshold(System.Single)">
            <summary>
            Sets the threshold for how long between renders before assuming the image wasn't shown for a while.
            </summary>
            <param name="seconds">The threshold in seconds.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.WithDisplayTimeBeforeGeneration(System.Single)">
            <summary>
            Sets how long a size should be displayed before generating a specialized image for it.
            </summary>
            <param name="seconds">The time in seconds before generation.</param>
            <returns>This SvgRenderer instance for method chaining.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderStatic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,System.Single)">
            <summary>
            Renders the SVG in static mode at the specified position with the given opacity.
            Static mode always generates the perfect size for the render position.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="opacity">The opacity to render with (0.0 to 1.0).</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderDynamic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,System.Single)">
            <summary>
            Renders the SVG in dynamic mode at the specified position with the given opacity.
            Dynamic mode uses intelligent caching and may render approximate sizes until the exact size is ready.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="opacity">The opacity to render with (0.0 to 1.0).</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderStatic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders the SVG in static mode at the specified position with the given color tint and UV coordinates.
            Static mode always generates the perfect size for the render position.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="tint">The color tint to apply.</param>
            <param name="uv">The UV coordinates for texture sampling.</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderDynamic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,System.Single,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders the SVG in dynamic mode at the specified position with the given opacity and UV coordinates.
            Dynamic mode uses intelligent caching and may render approximate sizes until the exact size is ready.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="opacity">The opacity to render with (0.0 to 1.0).</param>
            <param name="uv">The UV coordinates for texture sampling.</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderStatic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,System.Single,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders the SVG in static mode at the specified position with the given opacity and UV coordinates.
            Static mode always generates the perfect size for the render position.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="opacity">The opacity to render with (0.0 to 1.0).</param>
            <param name="uv">The UV coordinates for texture sampling.</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderDynamic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders the SVG in dynamic mode at the specified position with the given color tint and UV coordinates.
            Dynamic mode uses intelligent caching and may render approximate sizes until the exact size is ready.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="tint">The color tint to apply.</param>
            <param name="uv">The UV coordinates for texture sampling.</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderStatic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the SVG in static mode at the specified position with the given color tint.
            Static mode always generates the perfect size for the render position.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="tint">The color tint to apply.</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.Helpers.SvgRenderer.RenderDynamic(OnixRuntime.Api.Rendering.RendererCommon,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the SVG in dynamic mode at the specified position with the given color tint.
            Dynamic mode uses intelligent caching and may render approximate sizes until the exact size is ready.
            </summary>
            <param name="gfx">The graphics renderer to use.</param>
            <param name="position">The position and size to render at.</param>
            <param name="tint">The color tint to apply.</param>
            <returns>True if the SVG was rendered, false if it's not ready yet.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.IGameRenderer">
            <summary>
            Provides methods for rendering game items and meshes.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.IGameRenderer.MeshBuilder">
            <summary>
            Gets the mesh builder used for rendering.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.RenderItem(System.Single,System.Single,OnixRuntime.Api.Items.ItemStack,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Renders an item at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="item">The item stack to render.</param>
            <param name="renderDecorations">Whether to render decorations.</param>
            <param name="scale">The scale factor.</param>
            <param name="forceEnchantEffect">Whether to force the enchant effect.</param>
            <remarks>You can set the <see cref="P:OnixRuntime.Api.Items.ItemStack.ShowPickup"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.RenderItem(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Items.ItemStack,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Renders an item at the specified position.
            </summary>
            <param name="position">The position vector.</param>
            <param name="item">The item stack to render.</param>
            <param name="renderDecorations">Whether to render decorations.</param>
            <param name="scale">The scale factor.</param>
            <param name="forceEnchantEffect">Whether to force the enchant effect.</param>
            <remarks>You can set the <see cref="P:OnixRuntime.Api.Items.ItemStack.ShowPickup"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Rendering.TexturePath,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified color and texture.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="color">The color to apply.</param>
            <param name="texture">The texture to use.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
            <remarks>You can set the <see cref="T:OnixRuntime.Api.Items.ItemStack"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Maths.ColorF,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified color.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="color">The color to apply.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Rendering.TexturePath,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified texture.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="texture">The texture to use.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF})">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <returns></returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <returns></returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <returns></returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <returns></returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameters(OnixRuntime.Api.Rendering.GameMaterialParameters)">
            <summary>
            Sets the parameters for the game material.
            </summary>
            <remarks>This method updates the material properties used in the game. Ensure that the
            <paramref name="parameters"/> object is properly initialized before calling this method.</remarks>
            <param name="parameters">The <see cref="T:OnixRuntime.Api.Rendering.GameMaterialParameters"/> object containing the material properties to be applied.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialCustom(System.String,System.Boolean)">
            <summary>
            Sets the material to a custom material specified by name.
            this is for using game materials or ones in texture packs.
            </summary>
            <param name="materialName">The name of the custom material to set. Cannot be null or empty.</param>
            <param name="useSwitchableGroup">Whether to use the switchable group for the material instead of common.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.GetMaterialParameters">
            <summary>
            Gets the current material parameters.
            </summary>
            <returns>The current material parameters</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.GetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType)">
            <summary>
            Gets the value of a specific material parameter.
            </summary>
            <remarks>Note that <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)"/> sets and gives you the previous value if that's why you're using this function.</remarks>
            <param name="parameter">The parameter to get the value of</param>
            <returns>The current value of that material parameter</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)">
            <summary>
            Sets the specified material parameter to the given value.
            </summary>
            <param name="parameter">The type of material parameter to set.</param>
            <param name="value">The boolean value to assign to the material parameter.</param>
            <returns>The previous material parameter before setting your new value.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertex">
            <summary>
            Represents a vertex in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexColor">
            <summary>
            Represents a colored vertex in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexUv">
            <summary>
            Represents a vertex with UV coordinates in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexNormal">
            <summary>
            Represents a vertex with a normal in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexColorUv">
            <summary>
            Represents a colored vertex with UV coordinates in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexColorNormal">
            <summary>
            Represents a colored vertex with a normal in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexUvNormal">
            <summary>
            Represents a vertex with UV coordinates and a normal in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.MeshBuilderVertexColorUvNormal">
            <summary>
            Represents a colored vertex with UV coordinates and a normal in the <see cref="T:OnixRuntime.Api.Rendering.GameMeshBuilder"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.OnixRendererType">
            <summary>
            Represents the type of renderer used.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.OnixRendererType.Game">
            <summary>
            The game's renderer.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.OnixRendererType.Direct2D">
            <summary>
            The Direct2D renderer.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RenderContexes">
            <summary>
            Provides access to various rendering contexts and utilities.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.Origin">
            <summary>
            Gets the origin vector for the current render context.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.RawFov">
            <summary>
            According to O2Flash,
            The current horizontal and vertical field of view. With no zoom or other effects on the camera, fovY (vertical) should be the same as the fov in setting and game effects.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.Common">
            <summary>
            Gets the common renderer for the current context.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.World">
            <summary>
            Gets the world renderer for 3D rendering contexts.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.Direct2D">
            <summary>
            Gets the Direct2D renderer for 2D rendering contexts.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.Game">
            <summary>
            Gets the game renderer for game rendering contexts.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.Common2D">
            <summary>
            Gets the common 2D renderer for Direct2D or game rendering contexts.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RenderContexes.MainRenderer">
            <summary>
            Gets the main renderer type, this is the one that the user selected in the settings.
            By default, it's Direct2D, but it can be changed to something else.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RenderContexes.WorldToScreen(OnixRuntime.Api.Maths.Vec3)">
            <summary>
            Converts a world position to a screen position.
            </summary>
            <param name="point">The world position to convert.</param>
            <returns>The screen position as a Vec2, or null if not available.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.TextAlignment">
            <summary>
            Specifies text alignment options for rendering text.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TextAlignment.Left">
            <summary>Align text to the left or top.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TextAlignment.Top">
            <summary>Align text to the top or left.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TextAlignment.Center">
            <summary>Align text to the center.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TextAlignment.Right">
            <summary>Align text to the right or bottom.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TextAlignment.Bottom">
            <summary>Align text to the bottom or right.</summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererTextureStatus">
            <summary>
            Represents the status of a renderer texture.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.RendererTextureStatus.Missing">
            <summary>Texture is missing.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.RendererTextureStatus.Unloaded">
            <summary>Texture is unloaded.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.RendererTextureStatus.Loading">
            <summary>Texture is loading.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.RendererTextureStatus.Loaded">
            <summary>Texture is loaded.</summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.FontUsage">
            <summary>
            What scenario is the font used for?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.FontUsage.UserInterface">
            <summary>
            This font will be used to render user interface elements.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.FontUsage.Hud">
            <summary>
            This font will be used on HUD elements.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.FontType">
            <summary>
            The type of the font.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.FontType.UserPreference">
            <summary>
            Whatever the user chose for this use case.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.FontType.Smooth">
            <summary>
            Either the game's smooth font or the client's smooth font.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.FontType.Mojangles">
            <summary>
            The blocky font used by the game.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererCommon">
            <summary>
            Provides common rendering methods for 2D and 3D drawing operations.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.#ctor">
            <summary>
            Constructor that you should NOT use.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper">
            <summary>
            Helper struct for managing opacity stack with automatic pop on dispose.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper.#ctor(OnixRuntime.Api.Rendering.RendererCommon)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper"/> struct.
            </summary>
            <param name="renderer">The renderer to manage opacity for.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper.Dispose">
            <summary>
            Pops the opacity from the stack when disposed.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper">
            <summary>
            Helper struct for managing transformation stack with automatic pop on dispose.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper.#ctor(OnixRuntime.Api.Rendering.RendererCommon)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> struct.
            </summary>
            <param name="renderer">The renderer to manage transformation for.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper.Dispose">
            <summary>
            Pops the transformation from the stack when disposed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon.FontUsage">
            <summary>
            Lets you set the usage for the font so that it respects the user's choice if you're doing something else.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon.FontType">
            <summary>
            Lets you set a specific font type to use instead of user preference.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon.Width">
            <summary>
            Gets the width of the rendering area.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon.Height">
            <summary>
            Gets the height of the rendering area.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon.Size">
            <summary>
            Gets the size of the rendering area as a vector.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Fills a rectangle with the specified color.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Draws the outline of a rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Int32)">
            <summary>
            Fills a rounded rectangle with the specified color and corner radius.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Fills a rounded rectangle with the specified color and corner radius.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
            <param name="cornerRadius">The radius of the corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of a rounded rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single)">
            <summary>
            Draws the outline of a rounded rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
            <param name="cornerRadius">The radius of the corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of an ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The color of the outline.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="width">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,System.Single,System.Int32)">
            <summary>
            Draws the outline of an ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The color of the outline.</param>
            <param name="radius">The radii of the ellipse.</param>
            <param name="width">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Single)">
            <summary>
            Draws the outline of an ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The color of the outline.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="width">The width of the outline.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Draws the outline of an ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The color of the outline.</param>
            <param name="radius">The radii of the ellipse.</param>
            <param name="width">The width of the outline.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Fills an ellipse with the specified color.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The fill color.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2,System.Int32)">
            <summary>
            Fills an ellipse with the specified color.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The fill color.</param>
            <param name="radius">The radii of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single)">
            <summary>
            Fills an ellipse with the specified color.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The fill color.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Fills an ellipse with the specified color.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The fill color.</param>
            <param name="radius">The radii of the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillCircle(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Int32)">
            <summary>
            Fills a circle with the specified color.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="color">The fill color.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="iterations">The number of iterations for the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.FillCircle(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Fills a circle with the specified color.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="color">The fill color.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawCircle(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of a circle.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="color">The color of the outline.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="width">The width of the outline.</param>
            <param name="iterations">The number of iterations for the circle.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.DrawCircle(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single)">
            <summary>
            Draws the outline of a circle.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="color">The color of the outline.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="width">The width of the outline.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderText(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,System.Single)">
            <summary>
            Renders text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderText(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,OnixRuntime.Api.Rendering.TextAlignment,OnixRuntime.Api.Rendering.TextAlignment,System.Single)">
            <summary>
            Renders aligned text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="alignmentX">The horizontal alignment.</param>
            <param name="alignmentY">The vertical alignment.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderTextCentered(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,System.Single)">
            <summary>
            Renders centered text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderTextCentered(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.String,System.Single)">
            <summary>
            Renders centered text within a rectangle.
            </summary>
            <param name="position">The rectangle to center the text in.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderText(System.Drawing.Rectangle,OnixRuntime.Api.Maths.ColorF,System.String,OnixRuntime.Api.Rendering.TextAlignment,OnixRuntime.Api.Rendering.TextAlignment,System.Single)">
            <summary>
            Renders aligned text within a rectangle.
            </summary>
            <param name="position">The rectangle to render the text in.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="alignmentX">The horizontal alignment.</param>
            <param name="alignmentY">The vertical alignment.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.WrapText(System.String,System.Single,System.Single,System.Int32)">
            <summary>
            Wraps text to fit within a maximum width and number of lines.
            </summary>
            <param name="text">The text to wrap.</param>
            <param name="maxWidth">The maximum width for the text.</param>
            <param name="scale">The scale of the text.</param>
            <param name="maxLines">The maximum number of lines.</param>
            <returns>The wrapped text.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.MeasureText(System.String,System.Single)">
            <summary>
            Measures the size of the specified text.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="scale">The scale of the text.</param>
            <returns>The size of the text as a vector.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,System.Single)">
            <summary>
            Renders a texture in the specified Region with optional opacity.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="opacity">The opacity of the texture.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders a texture in the specified Region with a color tint.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="tint">The color tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,System.Single,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders a texture in the specified Region with optional opacity and UV coordinates.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="opacity">The opacity of the texture.</param>
            <param name="uv">The UV coordinates.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders a texture in the specified Region with a color tint and UV coordinates.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="tint">The color tint.</param>
            <param name="uv">The UV coordinates.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.UnloadTexture(OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Unloads the specified texture from the renderer.
            </summary>
            <param name="texture">The texture texture.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.UploadTexture(OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Utils.RawImageData)">
            <summary>
            Uploads a texture to the renderer.
            </summary>
            <param name="path">The texture path.</param>
            <param name="data">The raw image data.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.GetTextureStatus(OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Gets the status of a texture.
            </summary>
            <param name="texture">The texture texture.</param>
            <returns>The status of the texture.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.GetOpacity(System.Single)">
            <summary>
            Gets the resulting opacity after applying the opacity stack.
            </summary>
            <param name="opacity">The base opacity value.</param>
            <returns>The resulting opacity.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.PushOpacity(System.Single)">
            <summary>
            Pushes an opacity value onto the stack and returns a popper for automatic management.
            </summary>
            <param name="opacity">The opacity value to push.</param>
            <returns>An <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.OpacityPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.PopOpacity">
            <summary>
            Pops the opacity value from the stack.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.PushTransformation(OnixRuntime.Api.Maths.TransformationMatrix,System.Boolean)">
            <summary>
            Pushes a transformation matrix onto the stack and returns a popper for automatic management.
            </summary>
            <param name="transformation">The transformation matrix to push.</param>
            <param name="multiplyPrevious">Whether to multiply with the previous transformation.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.PopTransformation">
            <summary>
            Pops the transformation matrix from the stack.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon.SetDefaultState(System.Boolean)">
            <summary>
            Sets the default state of the renderer, optionally as the final state.
            </summary>
            <param name="final">Whether this is the final state.</param>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererCommon2D">
            <summary>
            Provides 2D rendering functionality, including clipping and render offset utilities.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper">
            <summary>
            Helper struct for managing the clipping rectangle stack with automatic pop on dispose.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper.#ctor(OnixRuntime.Api.Rendering.RendererCommon2D)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper"/> struct.
            </summary>
            <param name="renderer">The renderer to manage clipping for.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper.Dispose">
            <summary>
            Pops the clipping rectangle from the stack when disposed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon2D.Width">
            <summary>
            Gets the width of the rendering area, considering the screen size stack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon2D.Height">
            <summary>
            Gets the height of the rendering area, considering the screen size stack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererCommon2D.Size">
            <summary>
            Gets the size of the rendering area as a vector, considering the screen size stack.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.SetClippingRectangle(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Sets the clipping rectangle for subsequent rendering operations.
            </summary>
            <param name="clippingRectangle">The clipping rectangle to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushClippingRectangle(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Pushes a clipping rectangle onto the stack and returns a popper for automatic management.
            </summary>
            <param name="clippingRectangle">The clipping rectangle to push.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PopClippingRectangle">
            <summary>
            Pops the clipping rectangle from the stack.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.SetClippingRectangleWithin(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Sets the clipping rectangle onto the stack, not exiting the previous clipping rectangle and returns a popper for automatic management.
            This will restrict it to be within the bounds of the previous clipping rectangle.
            </summary>
            <param name="clippingRectangle">The clipping rectangle to push.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushClippingRectangleWithin(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Pushes a clipping rectangle onto the stack, not exiting the previous clipping rectangle and returns a popper for automatic management.
            This will restrict it to be within the bounds of the previous clipping rectangle.
            </summary>
            <param name="clippingRectangle">The clipping rectangle to push.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon2D.ClippingRectanglePopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.ResetClippingRectangle">
            <summary>
            Resets the clipping rectangle to its default state.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Pushes a render offset and scale transformation onto the stack.
            </summary>
            <param name="offset">The offset vector.</param>
            <param name="scale">The scale vector.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Pushes a render offset and uniform scale transformation onto the stack.
            </summary>
            <param name="offset">The offset vector.</param>
            <param name="scale">The uniform scale factor.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(OnixRuntime.Api.Maths.Vec2,System.Single,System.Single)">
            <summary>
            Pushes a render offset and non-uniform scale transformation onto the stack.
            </summary>
            <param name="offset">The offset vector.</param>
            <param name="scaleX">The x-axis scale factor.</param>
            <param name="scaleY">The y-axis scale factor.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Pushes a render offset transformation onto the stack.
            </summary>
            <param name="offset">The offset vector.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(System.Single,System.Single)">
            <summary>
            Pushes a render offset transformation onto the stack.
            </summary>
            <param name="x">The x offset.</param>
            <param name="y">The y offset.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(System.Single,System.Single,System.Single)">
            <summary>
            Pushes a render offset and uniform scale transformation onto the stack.
            </summary>
            <param name="x">The x offset.</param>
            <param name="y">The y offset.</param>
            <param name="scale">The uniform scale factor.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(System.Single,System.Single,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Pushes a render offset and scale transformation onto the stack.
            </summary>
            <param name="x">The x offset.</param>
            <param name="y">The y offset.</param>
            <param name="scale">The scale vector.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.PushRenderOffset(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Pushes a render offset and non-uniform scale transformation onto the stack.
            </summary>
            <param name="x">The x offset.</param>
            <param name="y">The y offset.</param>
            <param name="scaleX">The x-axis scale factor.</param>
            <param name="scaleY">The y-axis scale factor.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererCommon2D.SetDefaultState(System.Boolean)">
            <summary>
            Sets the default state of the renderer, optionally as the final state, and resets the clipping rectangle.
            </summary>
            <param name="final">Whether this is the final state.</param>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererDirect2D">
            <summary>
            Provides rendering functionality for Direct2D contexts.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererDirect2D.RenderSetting(OnixRuntime.Api.OnixClient.OnixSetting,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Inputs.InputKey.ClickType,System.Boolean,System.Nullable{System.Single},System.Nullable{OnixRuntime.Api.Maths.Vec2})">
            <summary>
            Renders a setting in the specified position with optional animation, scrollbar, and scale.
            </summary>
            <param name="setting">The setting to render.</param>
            <param name="position">The position and size to render the setting.</param>
            <param name="click">The click type.</param>
            <param name="hideAnimation">Whether to hide the animation.</param>
            <param name="scrollbarWidth">Optional scrollbar width.</param>
            <param name="scale">Optional scale vector.</param>
            <returns>True if the click was handled; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererDirect2D.RenderSubSetting(OnixRuntime.Api.OnixClient.OnixSetting,OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Inputs.InputKey.ClickType,System.Boolean,System.Nullable{System.Single},System.Nullable{OnixRuntime.Api.Maths.Vec2})">
            <summary>
            Renders a sub-setting in the specified position with mouse position, optional animation, scrollbar, and scale.
            </summary>
            <param name="setting">The sub-setting to render.</param>
            <param name="position">The position and size to render the sub-setting.</param>
            <param name="mousePosition">The mouse position for interaction.</param>
            <param name="click">The click type.</param>
            <param name="hideAnimation">Whether to hide the animation.</param>
            <param name="scrollbarWidth">Optional scrollbar width.</param>
            <param name="scale">Optional scale vector.</param>
            <returns>True if the click was handled; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererDirect2D.GetSettingHeight(OnixRuntime.Api.OnixClient.OnixSetting)">
            <summary>
            Gets how tall a setting is.
            </summary>
            <param name="setting">The setting to gather the height of.</param>
            <returns>How tall the rect should be.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererGame">
            <summary>
            Provides rendering functionality for game contexts, supporting 2D and mesh-based drawing.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererGame.MeshBuilder">
            <summary>
            Gets the mesh builder for rendering. Note: You NEED to store this in a variable OR use RawMeshBuilder.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.FlushMesh">
            <summary>
            Flushes the current mesh, rendering any pending geometry.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.SetMaterialParameters(OnixRuntime.Api.Rendering.GameMaterialParameters)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameters(OnixRuntime.Api.Rendering.GameMaterialParameters)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.SetMaterialCustom(System.String,System.Boolean)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialCustom(System.String,System.Boolean)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.GetMaterialParameters">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.GetMaterialParameters"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.GetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.GetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.NewMeshBuilderSession(OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF})">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.NewMeshBuilderSession(OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.FillRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Fills a rectangle with the specified color.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.DrawRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Draws the outline of a rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.FillRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Int32)">
            <summary>
            Fills a rounded rectangle with the specified color and corner radius.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.DrawRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of a rounded rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.DrawEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of an ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The color of the outline.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="width">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.FillEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Fills an ellipse with the specified color.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The fill color.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderText(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,System.Single)">
            <summary>
            Renders text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderText(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,OnixRuntime.Api.Rendering.TextAlignment,OnixRuntime.Api.Rendering.TextAlignment,System.Single)">
            <summary>
            Renders aligned text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="alignmentX">The horizontal alignment.</param>
            <param name="alignmentY">The vertical alignment.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,System.Single)">
            <summary>
            Renders a texture in the specified Region with optional opacity.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="opacity">The opacity of the texture.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders a texture in the specified Region with a color tint.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="tint">The color tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,System.Single,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders a texture in the specified Region with optional opacity and UV coordinates.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="opacity">The opacity of the texture.</param>
            <param name="uv">The UV coordinates.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders a texture in the specified Region with a color tint and UV coordinates.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="tint">The color tint.</param>
            <param name="uv">The UV coordinates.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.DrawLine(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Draws a line between two 3D points with a single color.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.DrawLine(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Draws a line between two 2D points with a single color.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.DrawLine(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Draws a line between two 3D points with different colors.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="color1">The color of the first point.</param>
            <param name="color2">The color of the second point.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderItem(System.Single,System.Single,OnixRuntime.Api.Items.ItemStack,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Renders an item at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="item">The item stack to render.</param>
            <param name="renderDecorations">Whether to render decorations.</param>
            <param name="scale">The scale factor.</param>
            <param name="forceEnchantEffect">Whether to force the enchant effect.</param>
            <remarks>You can set the <see cref="P:OnixRuntime.Api.Items.ItemStack.ShowPickup"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderItem(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Items.ItemStack,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Renders an item at the specified position.
            </summary>
            <param name="position">The position vector.</param>
            <param name="item">The item stack to render.</param>
            <param name="renderDecorations">Whether to render decorations.</param>
            <param name="scale">The scale factor.</param>
            <param name="forceEnchantEffect">Whether to force the enchant effect.</param>
            <remarks>You can set the <see cref="P:OnixRuntime.Api.Items.ItemStack.ShowPickup"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Rendering.TexturePath,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified color and texture.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="color">The color to apply.</param>
            <param name="texture">The texture to use.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Maths.ColorF,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified color.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="color">The color to apply.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Rendering.TexturePath,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified texture.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="texture">The texture to use.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.PushTransformation(OnixRuntime.Api.Maths.TransformationMatrix,System.Boolean)">
            <summary>
            Pushes a transformation matrix onto the stack and flushes the mesh.
            </summary>
            <param name="transformation">The transformation matrix to push.</param>
            <param name="multiplyPrevious">Whether to multiply with the previous transformation.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.PopTransformation">
            <summary>
            Pops the transformation from the stack and flushes the mesh.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.SetClippingRectangle(OnixRuntime.Api.Maths.Rect)">
            <summary>
            Sets the clipping rectangle and flushes the mesh.
            </summary>
            <param name="clippingRectangle">The clipping rectangle to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.PopClippingRectangle">
            <summary>
            Pops the clipping rectangle and flushes the mesh.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.ResetClippingRectangle">
            <summary>
            Resets the clipping rectangle and flushes the mesh.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererGame.SetDefaultState(System.Boolean)">
            <summary>
            Sets the default state of the renderer, optionally as the final state, and flushes the mesh.
            </summary>
            <param name="final">Whether this is the final state.</param>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererWorld">
            <summary>
            Provides rendering functionality for 3D world contexts, including mesh, item, and lighting operations.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.RendererWorld.WorldUIRenderSettingsPopper">
            <summary>
            Helper struct for managing world UI render settings and transformation stack with automatic pop on dispose.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.WorldUIRenderSettingsPopper.#ctor(OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper,OnixRuntime.Api.Rendering.RendererWorld,System.Boolean,OnixRuntime.Api.Rendering.GameMaterialParameters)">
            <summary>
            Helper struct for managing world UI render settings and transformation stack with automatic pop on dispose.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.WorldUIRenderSettingsPopper.Dispose">
            <summary>
            Pops the world UI render settings and transformation when disposed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererWorld.Width">
            <summary>
            Gets the width of the rendering area, considering the screen size stack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererWorld.Height">
            <summary>
            Gets the height of the rendering area, considering the screen size stack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererWorld.Size">
            <summary>
            Gets the size of the rendering area as a vector, considering the screen size stack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererWorld.IsSimulatingUi">
            <summary>
            Gets whether the UI simulation mode is active.
            You should probably NOT set this unless you know what you're doing.
            <see cref="M:OnixRuntime.Api.Rendering.RendererWorld.PushWorldUIRenderSettings(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Single)"/>
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.PushWorldUIRenderSettings(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Pushes world UI render settings for a block position and face.
            </summary>
            <param name="position">The block position.</param>
            <param name="face">The block face.</param>
            <param name="pixelsPerBlock">Pixels per block.</param>
            <param name="sizeInBlocks">Size in blocks.</param>
            <param name="extraRotation">Extra rotation in degrees.</param>
            <returns>A popper for automatic restoration.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.PushWorldUIRenderSettings(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.World.BlockFace,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,System.Single)">
            <summary>
            Pushes world UI render settings for a 3D position and face.
            </summary>
            <param name="position">The 3D position.</param>
            <param name="face">The block face.</param>
            <param name="pixelsPerBlock">Pixels per block.</param>
            <param name="sizeInBlocks">Size in blocks.</param>
            <param name="extraRotation">Extra rotation in degrees.</param>
            <returns>A popper for automatic restoration.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.RendererWorld.MeshBuilder">
            <summary>
            Gets the mesh builder for rendering. Note: You NEED to store this in a variable OR use _rawMeshBuilder.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.FlushMesh">
            <summary>
            Flushes the current mesh, rendering any pending geometry.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.NewMeshBuilderSession(OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF})">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.NewMeshBuilderSession(OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession(...)) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType,OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.NewMeshBuilderSession(System.Nullable{OnixRuntime.Api.Maths.ColorF},OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Rendering.MeshBuilderPrimitiveType)">
            <summary>
            Starts a new mesh builder session.
            Disposing the session will cause the mesh to be rendered.
            You should use this one whenever possible since it will properly handle more cases like when you push <see cref="T:OnixRuntime.Api.Maths.TransformationMatrix"/>> matrices.
            Remember to use <see cref="M:OnixRuntime.Api.Maths.TransformationMatrix.TranslateWorldPosition(OnixRuntime.Api.Maths.Vec3)"/> for when you position it in the world after your initial transformations.
            </summary>
            <param name="color"></param>
            <param name="texture">The texture that will be used when rendering.</param>
            <param name="primitiveType">The type of primitive the vertices will represent.</param>
            <returns>The new session, don't forget to dispose it!</returns>
            <example>
            <code>
            using (var mb = Onix.Render.Game.NewMeshBuilderSession()) {
                //Define the vertices for the mesh however you want
                //mb.Vertex(...)
            }
            </code>
            </example>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetMaterialParameters(OnixRuntime.Api.Rendering.GameMaterialParameters)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameters(OnixRuntime.Api.Rendering.GameMaterialParameters)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetMaterialCustom(System.String,System.Boolean)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialCustom(System.String,System.Boolean)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.GetMaterialParameters">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.GetMaterialParameters"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.GetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.GetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)">
            <inheritdoc cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)"/>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.FillRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Fills a rectangle with the specified color.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.DrawRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single)">
            <summary>
            Draws the outline of a rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.FillRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Int32)">
            <summary>
            Fills a rounded rectangle with the specified color and corner radius.
            </summary>
            <param name="position">The rectangle to fill.</param>
            <param name="color">The fill color.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.DrawRoundedRectangle(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of a rounded rectangle towards the inside only.
            </summary>
            <param name="position">The rectangle to draw.</param>
            <param name="color">The outline color.</param>
            <param name="width">The width of the outline.</param>
            <param name="cornerRadius">The radius of the corners.</param>
            <param name="iterations">The number of iterations for the rounded corners.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.DrawEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the outline of an ellipse.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The color of the outline.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="width">The width of the outline.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.FillEllipse(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.Single,System.Single,System.Int32)">
            <summary>
            Fills an ellipse with the specified color.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="color">The fill color.</param>
            <param name="radiusX">The x-radius of the ellipse.</param>
            <param name="radiusY">The y-radius of the ellipse.</param>
            <param name="iterations">The number of iterations for the ellipse.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderText(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,System.Single)">
            <summary>
            Renders text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderText(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF,System.String,OnixRuntime.Api.Rendering.TextAlignment,OnixRuntime.Api.Rendering.TextAlignment,System.Single)">
            <summary>
            Renders aligned text at the specified position.
            </summary>
            <param name="position">The position to render the text.</param>
            <param name="color">The color of the text.</param>
            <param name="text">The text to render.</param>
            <param name="alignmentX">The horizontal alignment.</param>
            <param name="alignmentY">The vertical alignment.</param>
            <param name="scale">The scale of the text.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,System.Single)">
            <summary>
            Renders a texture in the specified Region with optional opacity.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="opacity">The opacity of the texture.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders a texture in the specified Region with a color tint.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="tint">The color tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,System.Single,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders a texture in the specified Region with optional opacity and UV coordinates.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="opacity">The opacity of the texture.</param>
            <param name="uv">The UV coordinates.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderTexture(OnixRuntime.Api.Maths.Rect,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.Rect)">
            <summary>
            Renders a texture in the specified Region with a color tint and UV coordinates.
            </summary>
            <param name="region">The Region to render the texture in.</param>
            <param name="texture">The texture texture.</param>
            <param name="tint">The color tint.</param>
            <param name="uv">The UV coordinates.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Rendering.TexturePath,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified color and texture.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="color">The color to apply.</param>
            <param name="texture">The texture to use.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Maths.ColorF,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified color.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="color">The color to apply.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderMesh(OnixRuntime.Api.Rendering.GameMesh,OnixRuntime.Api.Rendering.TexturePath,System.UInt32,System.UInt32)">
            <summary>
            Renders a mesh with the specified texture.
            </summary>
            <param name="mesh">The mesh to render.</param>
            <param name="texture">The texture to use.</param>
            <param name="startOffset">The starting offset.</param>
            <param name="count">The number of elements to render.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.DrawLine(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Draws a line between two 3D points with a single color.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.DrawLine(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Draws a line between two 2D points with a single color.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.DrawLine(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Draws a line between two 3D points with different colors.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <param name="color1">The color of the first point.</param>
            <param name="color2">The color of the second point.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxOutline(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the outline of a bounding box with the specified color.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="color">The color of the bounding box.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxFill(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders a bounding box with the specified color.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="color">The color of the bounding box.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxFill(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.ColorF,PerBlockFaceFaceData{System.Boolean})">
            <summary>
            Renders a bounding box with the specified color.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="color">The color of the bounding box.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},PerBlockFaceFaceData{BlockFaceUvRotation},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified texture, uv coordinates and rotations with a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="perFaceUv">The UV coordinates of each face.</param>
            <param name="uvRotation"></param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxNormal(OnixRuntime.Api.Maths.BoundingBox,PerBlockFaceFaceData{System.Boolean},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified color and normals.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="color">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified color and normals.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="color">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},PerBlockFaceFaceData{BlockFaceUvRotation})">
            <summary>
            Renders the faces of a bounding box with the specified texture, uv coordinates and rotations without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="perFaceUv">The UV coordinates of each face.</param>
            <param name="uvRotation"></param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{BlockFaceUvRotation})">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and rotations without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="uvRotation"></param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean})">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Renders all faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{BlockFaceUvRotation},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and rotations without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="uvRotation"></param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTextured(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders all faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},PerBlockFaceFaceData{BlockFaceUvRotation},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified texture, uv coordinates and rotations with a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="perFaceUv">The UV coordinates of each face.</param>
            <param name="uvRotation"></param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{OnixRuntime.Api.Maths.Rect},PerBlockFaceFaceData{BlockFaceUvRotation})">
            <summary>
            Renders the faces of a bounding box with the specified texture, uv coordinates and rotations without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="perFaceUv">The UV coordinates of each face.</param>
            <param name="uvRotation"></param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{BlockFaceUvRotation})">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and rotations without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="uvRotation"></param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean})">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Renders all faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},PerBlockFaceFaceData{BlockFaceUvRotation},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and rotations without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="uvRotation"></param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,PerBlockFaceFaceData{System.Boolean},OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders the faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="shouldRenderFace">6 booleans to know which faces should be rendered.</param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderBoundingBoxTexturedNormal(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Rendering.TexturePath,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Renders all faces of a bounding box with the specified texture, <see cref="P:OnixRuntime.Api.Maths.Rect.FullUV"/> for its uv coordinates and <see cref="F:BlockFaceUvRotation.NoRotation"/> without a tint. This will also add normals, which may not work depending on material choice/graphics settings.
            </summary>
            <param name="box">The bounding box to render.</param>
            <param name="texture">The texture to render the bounding box with.</param>
            <param name="tint">The color of the texture tint.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.PushTransformation(OnixRuntime.Api.Maths.TransformationMatrix,System.Boolean)">
            <summary>
            Pushes a transformation matrix onto the stack and flushes the mesh.
            </summary>
            <param name="transformation">The transformation matrix to push.</param>
            <param name="multiplyPrevious">Whether to multiply with the previous transformation.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.RendererCommon.TransformationPopper"/> for automatic pop.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.PopTransformation">
            <summary>
            Pops the transformation from the stack and flushes the mesh.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderItem(System.Single,System.Single,OnixRuntime.Api.Items.ItemStack,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Renders an item at the specified position.
            </summary>
            <param name="x">The x position of the item.</param>
            <param name="y">The y position of the item.</param>
            <param name="item">The item stack to render.</param>
            <param name="renderDecorations">Whether to render decorations.</param>
            <param name="scale">The scale factor.</param>
            <param name="forceEnchantEffect">Whether to force the enchant effect.</param>
            <remarks>You can set the <see cref="P:OnixRuntime.Api.Items.ItemStack.ShowPickup"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.RenderItem(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Items.ItemStack,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Renders an item at the specified position.
            </summary>
            <param name="position">The position vector.</param>
            <param name="item">The item stack to render.</param>
            <param name="renderDecorations">Whether to render decorations.</param>
            <param name="scale">The scale factor.</param>
            <param name="forceEnchantEffect">Whether to force the enchant effect.</param>
            <remarks>You can set the <see cref="P:OnixRuntime.Api.Items.ItemStack.ShowPickup"/>.ShowPickup to false.</remarks>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetupLights(OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Sets up lighting for the specified entity.
            Make sure you have a <see cref="T:OnixRuntime.Api.Rendering.GameMaterialParameters"/> that has lighting enabled or enabling it with a <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)"/>.
            Make sure FullBright isn't enabled in the client if you're trying to see that working.
            </summary>
            <param name="entity">The entity to set up lighting for.</param>
            <param name="lightEmission">The light emission value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetupLights(OnixRuntime.Api.Maths.BoundingBox,OnixRuntime.Api.Maths.Vec3,System.Int32)">
            <summary>
            Sets up lighting for the specified bounding box and center.
            Make sure you have a <see cref="T:OnixRuntime.Api.Rendering.GameMaterialParameters"/> that has lighting enabled or enabling it with a <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)"/>.
            Make sure FullBright isn't enabled in the client if you're trying to see that working.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <param name="center">The center of the bounding box.</param>
            <param name="lightEmission">The light emission value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetupLights(OnixRuntime.Api.Maths.BoundingBox,System.Int32)">
            <summary>
            Sets up lighting for the specified bounding box.
            Make sure you have a <see cref="T:OnixRuntime.Api.Rendering.GameMaterialParameters"/> that has lighting enabled or enabling it with a <see cref="M:OnixRuntime.Api.Rendering.IGameRenderer.SetMaterialParameter(OnixRuntime.Api.Rendering.GameMaterialParameterType,System.Boolean)"/>.
            Make sure FullBright isn't enabled in the client if you're trying to see that working.
            </summary>
            <param name="boundingBox">The bounding box.</param>
            <param name="lightEmission">The light emission value.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.RendererWorld.SetDefaultState(System.Boolean)">
            <summary>
            Sets the default state of the renderer, optionally as the final state, and resets world render settings and lighting.
            </summary>
            <param name="final">Whether this is the final state.</param>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.TexturePathBase">
            <summary>
            Specifies the base location for a texture path.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.Game">
            <summary>Game root directory.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.Raw">
            <summary>Raw file path.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.Assets">
            <summary>Assets directory.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.PersistentData">
            <summary>Persistent data directory.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.TerrainAtlas">
            <summary>Terrain atlas.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.ItemAtlas">
            <summary>Item atlas.</summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePathBase.Url">
            <summary>From an url.</summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.TexturePath">
            <summary>
            Represents a path to a texture resource, supporting various base locations and plugin asset resolution.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.#ctor(System.String,OnixRuntime.Api.Rendering.TexturePathBase)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> class with the specified path and base type.
            </summary>
            <param name="path">The texture path.</param>
            <param name="baseType">The base location type.</param>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.Game(System.String)">
            <summary>
            Creates a <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> with the Game base.
            </summary>
            <param name="path">The texture path.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.Raw(System.String)">
            <summary>
            Creates a <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> with the Raw base.
            </summary>
            <param name="path">The texture path.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.Assets(System.String)">
            <summary>
            Creates a <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> with the Assets base, resolved for the calling plugin.
            </summary>
            <param name="path">The texture path.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.PersistentData(System.String)">
            <summary>
            Creates a <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> with the PersistentData base, resolved for the calling plugin.
            </summary>
            <param name="path">The texture path.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> instance.</returns>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePath.TerrainAtlas">
            <summary>
            Gets the terrain atlas texture path.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Rendering.TexturePath.ItemAtlas">
            <summary>
            Gets the item atlas texture path.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.Url(System.String)">
            <summary>
            Creates a texture path from a URL. The image will be downloaded and uploaded for you.
            In the event that the image cannot be downloaded, it will render a red square.
            You may unload the texture using <see cref="M:OnixRuntime.Api.Rendering.RendererCommon.UnloadTexture(OnixRuntime.Api.Rendering.TexturePath)"/> which will retry next time.
            What will happen if the texture is rendered before <see cref="M:OnixRuntime.Api.Rendering.RendererCommon.GetTextureStatus(OnixRuntime.Api.Rendering.TexturePath)"/> tells you <see cref="F:OnixRuntime.Api.Rendering.RendererTextureStatus.Loaded"/> can be anything from pink, missing texture.
            </summary>
            <param name="url">The url to download</param>
            <returns>The texture path for that texture to use in gfx.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.Url(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a texture path from a URL. The image will be downloaded and uploaded for you.
            In the event that the image cannot be downloaded, it will render a red square.
            You may unload the texture using <see cref="M:OnixRuntime.Api.Rendering.RendererCommon.UnloadTexture(OnixRuntime.Api.Rendering.TexturePath)"/> which will retry next time.
            What will happen if the texture is rendered before <see cref="M:OnixRuntime.Api.Rendering.RendererCommon.GetTextureStatus(OnixRuntime.Api.Rendering.TexturePath)"/> tells you <see cref="F:OnixRuntime.Api.Rendering.RendererTextureStatus.Loaded"/> can be anything from pink, missing texture.
            </summary>
            <param name="url">The url to download</param>
            <param name="headers">The headers to use when downloading the image.</param>
            <returns>The texture path for that texture to use in gfx.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TexturePath.Base">
            <summary>
            Gets the base type of this texture path.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TexturePath.Path">
            <summary>
            Gets the resolved path string for this texture path.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.GetHashCode">
            <summary>
            Returns the hash code for this texture path.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Rendering.TexturePath.ToString">
            <summary>
            Returns a string representation of the texture path.
            </summary>
            <returns>A string containing the base and path.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.TextureAtlasItem">
            <summary>
            Represents a texture in an atlas.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureAtlasItem.Name">
            <summary>
            The name of this entry in the texture atlas.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureAtlasItem.NodeIndex">
            <summary>
            The index of this item in the file parsed from the for the atlas.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureAtlasItem.TextureUv">
            <summary>
            The actual UV coordinates of the texture in the atlas.
            The first array is for the variant, like which door type for example.
            The second array is for random variants, like grass textures that are randomly rotated.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Rendering.TextureUVCoordinates">
            <summary>
            Represents UV coordinates for a texture, including its size.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureUVCoordinates.Weight">
            <summary>
            It's weight, used for sorting textures.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureUVCoordinates.Uv">
            <summary>
            The UV coordinates of the texture.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureUVCoordinates.TextureSize">
            <summary>
            The size of the texture in pixels.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureUVCoordinates.TextureSizeF">
            <summary>
            The size of the texture in pixels as a floating-point vector.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Rendering.TextureUVCoordinates.SourceTexture">
            <summary>
            The source texture path that led to these UV coordinates.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.SubPackInfo">
            <summary>
            Class representing information about a sub pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.SubPackInfo.Directory">
            <summary>
            The subdirectory of the pack that the sub pack is in.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.SubPackInfo.Name">
            <summary>
            The display name of the sub pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.SubPackInfo.MemoryTier">
            <summary>
            The memory tier of the sub pack, not sure what this changes but oh well it's there, enjoy.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.SubPackInfo.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a new SubPackInfo object, not too useful for you.
            </summary>
            <param name="directory">The directory of the sub pack.</param>
            <param name="name">The display name of the sub pack</param>
            <param name="memoryTier">The memory tier of that sub pack.</param>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackBase">
            <summary>
            The base of a pack. This is the base class for Pack and SubPack. The difference is one has a nullable manifest.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackBase.AssetLoader">
            <summary>
            The asset loader for the base pack. This is used to load files from the pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackBase.SubPacks">
            <summary>
            A list information about the sub packs in this pack.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.SubPack">
            <summary>
            A sub pack. This is a pack inside another pack. The user can choose amongst all the sub packs in a pack. It has a nullable manifest and likely will always be null.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.SubPack.Manifest">
            <summary>
            The pack manifest will likely be null for sub packs, that's why this is nullable in this version of the struct.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.Pack">
            <summary>
            A pack. This is a pack that the user can choose to load. It has a manifest and is likely a main pack. It should always have a manifest so it is non-nullable.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.Pack.Manifest">
            <summary>
            The pack manifest for this pack. This is the main manifest for the pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.Pack.IconTexture">
            <summary>
            The <see cref="T:OnixRuntime.Api.Rendering.TexturePath"/> of the pack icon. This let's you render the icon of the pack.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackAssetLoader">
            <summary>
            A class used to load files from packs.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackAssetLoader.HasDirectory(System.String)">
            <summary>
            Checks if there is a directory at this path.
            </summary>
            <param name="directoryPath">The path to check for a directory.</param>
            <returns>Returns true if the path is a valid directory.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackAssetLoader.HasFile(System.String,System.Boolean)">
            <summary>
            Checks if there is a file at this path.
            </summary>
            <param name="filePath">The path of the file to check.</param>
            <param name="trustedContentOnly">If only trusted content should be read.</param>
            <returns>Returns true if there is a file at this path, could return false if the content is not trusted and trustedContentOnly is true.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackAssetLoader.GetContentOrNull(System.String,System.Boolean)">
            <summary>
            Gets the content of the file at that path. This will return null if the file does not exist or was not trusted.
            This variant returns null when it cannot load the file that way you can check if the file was read but empty or just not found.
            </summary>
            <param name="filePath">The file path of the file to get.</param>
            <param name="trustedContentOnly">If only trusted content should be read.</param>
            <returns>Returns the content or null if it could not be read from.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackAssetLoader.GetContent(System.String,System.Boolean)">
            <summary>
            Gets the content of the file at that path. This will return null if the file does not exist or was not trusted.
            This variant returns an empty byte array when the file does not exist.
            </summary>
            <param name="filePath">The file path of the file to get.</param>
            <param name="trustedContentOnly">If only trusted content should be read.</param>
            <returns>Returns the content or null if it could not be read from.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackAssetLoader.GetPathList(System.String,System.Boolean)">
            <summary>
            Gets a list of paths in the pack. This will return an empty array if the path does not exist or is not a directory.
            Note that internally, this will ALWAYS recurse. The difference is that the output will be filtered.
            So if you plan on recursing, you should not go folder by folder and manually do it.
            </summary>
            <param name="filePath">The folder to get the files/directories in.</param>
            <param name="recurse">If it should recurse through all the directories.</param>
            <returns></returns>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackStack">
            <summary>
            A stack of resource packs. This is used to represent the order of packs.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackStack.Packs">
            <summary>
            The list of packs in this stack.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackStack.#ctor(System.Collections.Generic.IReadOnlyList{OnixRuntime.Api.ResourcePacks.PackInstance})">
            <summary>
            Creates a new pack stack, not sure why you would do that yourself but have fun.
            </summary>
            <param name="packs"></param>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackStack.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackStack.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackManager">
            <summary>
            A class used to load files from packs or get information about active packs.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.AddonStack">
            <summary>
            The addon stack. This includes just the addons.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.WorldStack">
            <summary>
            The world stack, for packs that are loaded in the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.GlobalStack">
            <summary>
            Global packs, for packs that are selected in the game's settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.TreatmentStack">
            <summary>
            The treatment stack, for packs that are loaded in remotely to fix small things or change the marketplace button, things like that.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.BaseGameStack">
            <summary>
            The base game stack, for packs that are loaded in the base game, mainly vanilla packs.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.FullStack">
            <summary>
            The combined stack for all the other stacks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.UsesGlobalStack">
            <summary>
            If the global stack is ignored or not.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManager.AllKnownResourcePacks">
            <summary>
            Gets a list of all the resource packs the client knows about.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackManager.LoadContentOrNull(OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs.
            </summary>
            <param name="path">The location of that file.</param>
            <returns>The content of the file or null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackManager.LoadContent(OnixRuntime.Api.Rendering.TexturePath)">
            <summary>
            Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs.
            </summary>
            <param name="path">The location of that file.</param>
            <returns>The content of the file or an empty byte array.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackManager.LoadContentOrNull(OnixRuntime.Api.Rendering.TexturePath,System.String[])">
            <summary>
            Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs.
            The extensions should have the dot in front of them, so ".png" not "png".
            </summary>
            <param name="path">The location of that file.</param>
            <param name="extensions">The list of extensions without the . this file could be.</param>
            <returns>The content of the file or null.</returns>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.PackManager.LoadContent(OnixRuntime.Api.Rendering.TexturePath,System.String[])">
            <summary>
            Loads the content of a file from the full stack. This will return a null byte array if the file was not found in any packs.
            The extensions should have the dot in front of them, so ".png" not "png".
            </summary>
            <param name="path">The location of that file.</param>
            <param name="extensions">The list of extensions without the . this file could be.</param>
            <returns>The content of the file or an empty byte array.</returns>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackType">
            <summary>
            Types of packs.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.Invalid">
            <summary>
            Who knows, the game sure doesn't
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.Resources">
            <summary>
            Your average texture pack.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.Behavior">
            <summary>
            Your average behavior pack.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.Cached">
            <summary>
            A pack in cache, for server packs
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.Skins">
            <summary>
            Your average skin pack.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.Addon">
            <summary>
            Not too sure what qualifies as an addon, but I only heard of that word when having both a bp and a rp in the same pack, so I guess it's that?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.WorldTemplate">
            <summary>
            A world template
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.CopyProtected">
            <summary>
            Probably marketplace packs, but not sure.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackType.PersonaPiece">
            <summary>
            Bone
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackCategory">
            <summary>
            Categories for packs, not too useful.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackCategory.Unknown">
            <summary>
            I forgor
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackCategory.Standard">
            <summary>
            Normal pack
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackCategory.Premium">
            <summary>
            Marketplace pack
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackCategory.SubPack">
            <summary>
            The pack is a pack within a main pack.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackCategory.Custom">
            <summary>
            What did you do?
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackCategory.RealmsUnknown">
            <summary>
            Me when I don't know.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackOrigin">
            <summary>
            Where the pack comes from.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.Unknown">
            <summary>
            Unknown origin. Those who know...
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.Package">
            <summary>
            Where the game's exe is installed.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.User">
            <summary>
            In the com.mojang directory.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.Dev">
            <summary>
            In one of the development subfolders of the com.mojang directory. 
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.World">
            <summary>
            In the world's data.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.Treatment">
            <summary>
            It's a treatment pack.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.PremiumTempCache">
            <summary>
            Temporary premium cache for some servers that protect their packs.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.TempCache">
            <summary>
            Temporary cache, used for packs that are not premium, but still from servers.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.PremiumCache">
            <summary>
            The premium cache folder, for marketplace packs.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.ResourcePacks.PackOrigin.RealmsUnknown">
            <summary>
            Those who know...
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackManifest">
            <summary>
            Information in the pock's manifest.json.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Path">
            <summary>
            The path to the pack's file/directory.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Uuid">
            <summary>
            The UUID of the pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Name">
            <summary>
            The name of the pack, translated if needed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.RawName">
            <summary>
            The raw name, not translated, you could just get "pack.name"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Description">
            <summary>
            The description of the pack, translated if needed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.RawDescription">
            <summary>
            The raw description, not translated, you could just get "pack.description"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Version">
            <summary>
            The pack's version.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Type">
            <summary>
            The type of pack this is.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Category">
            <summary>
            The category of the pack. This is not too useful but enjoy.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.Origin">
            <summary>
            Where the pack comes from.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.IsHidden">
            <summary>
            If the pack should be hidden or not.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackManifest.SizeInBytes">
            <summary>
            The size in bytes of the pack.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.ResourcePackBase">
            <summary>
            The base of a resource pack. This is the base class for ResourcePack and SubResourcePack. The difference is one has a manifest.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.ResourcePackBase.IsHidden">
            <summary>
            If the resource pack should be hidden in the UI.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.ResourcePackBase.HasError">
            <summary>
            If there was an error in this pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.ResourcePackBase.SubPacks">
            <summary>
            A list of sub packs in this resource pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.ResourcePackBase.SubResourcePacks">
            <summary>
            A list of sub resource packs in this resource pack.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.ResourcePacks.ResourcePackBase.GetAssetLoader(System.Int32)">
            <summary>
            Gets the pack's asset loader for the desired sub pack index. -1 is the main pack.
            </summary>
            <param name="subPackIndex">The index of the sub pack or -1.</param>
            <returns>The pack's asset loader.</returns>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.SubResourcePack">
            <summary>
            A resource pack, contains a pack and sub packs, is likely from a sub pack itself.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.SubResourcePack.Pack">
            <summary>
            The actual pack in that resource pack. As a SubPac, which means it likely won't have a manifest.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.SubResourcePack.Manifest">
            <summary>
            The pack's manifest. This is the manifest of the sub pack. It will very likely be null. Same as Pack.Manifest;
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.ResourcePack">
            <summary>
            A resource pack, contains a pack and sub packs.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.ResourcePack.Pack">
            <summary>
            The actual pack in that resource pack. As a Pack, which means it should have a manifest.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.ResourcePack.Manifest">
            <summary>
            The pack's manifest. This is the manifest of the pack itself, not the sub packs. Same as Pack.Manifest;
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.ResourcePacks.PackInstance">
            <summary>
            An instance of a pack. This could be a specific sub pack or different settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.ResourcePack">
            <summary>
            The resource pack it is an instance of.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.SubPackIndex">
            <summary>
            The sub pack index of the pack instance. This is -1 if the pack instance is not a sub pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.IsSubPack">
            <summary>
            If the pack instance is a sub pack, this will be true. If it is not a sub pack, this will be false.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.SubPackAssetLoader">
            <summary>
            The pack instance's current sub pack asset loader OR the asset loader pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.MainAssetLoader">
            <summary>
            The pack instance's main asset loader, this is the asset loader for the pack itself.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.SelectedSubPackInfo">
            <summary>
            The information of the currently selected sub pack. This will be null if the pack instance is not a sub pack.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.ResourcePacks.PackInstance.Manifest">
            <summary>
            The pack instance's pack manifest. This is the manifest of the pack itself, not the sub packs. Same as ResourcePack.Manifest;
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.ChatMessageType">
            <summary>
            Represents the various types of chat messages that can be sent to the client.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Raw">
            <summary>Raw, unformatted text.</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Chat">
            <summary>Standard chat message.</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Translate">
            <summary>Translatable message using localization keys.</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Popup">
            <summary>Popup message shown in the center of the screen.</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.JukeboxPopup">
            <summary>Jukebox popup, shown when music is playing.</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Tip">
            <summary>Tip message shown on the screen.</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.SystemMessage">
            <summary>System message (e.g., server events).</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Whisper">
            <summary>Whisper message (e.g., private messages).</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.Announcement">
            <summary>Bold announcement message (e.g., join/leave alerts).</summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatMessageType.TextObject">
            <summary>Formatted text object.</summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.ChatMessage">
            <summary>
            Represents a chat message instance that can be displayed to the user.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatMessage.Type">
            <summary>The type of chat message being displayed.</summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatMessage.ScreenTime">
            <summary>The amount of time, in seconds, the message stays visible on screen.</summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatMessage.ComputedMessage">
            <summary>The final, computed version of the message, after any formatting or localization.</summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatMessage.Message">
            <summary>The original raw message content.</summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatMessage.TTSMessage">
            <summary>The version of the message that should be read aloud by text-to-speech systems.</summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatMessage.Username">
            <summary>The name of the user associated with this message, if applicable.</summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.ChatScreen">
            <summary>
            Represents the chat screen UI and provides methods and properties to interact with chat functionality.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.ChatScreen.CompletionOption">
            <summary>
            Represents an option for chat completion, which may include text and an optional item.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatScreen.CompletionOption.Text">
            <summary>
            The display text for the completion option.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ChatScreen.CompletionOption.Item">
            <summary>
            The optional item associated with this completion option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.CompletionOption.HasItem">
            <summary>
            Indicates whether this completion option has a valid item.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.ChatScreen.CompletionOption.#ctor(System.String,OnixRuntime.Api.Items.ItemStack)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.UI.ChatScreen.CompletionOption"/> class with the specified text and item.
            </summary>
            <param name="text">The display text.</param>
            <param name="item">The optional item.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.ChatScreen.CompletionOption.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.UI.ChatScreen.CompletionOption"/> class with the specified text.
            </summary>
            <param name="text">The display text.</param>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.Text">
            <summary>
            Gets or sets the current chat message text.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.LastTabCompleteMessage">
            <summary>
            Gets the last message that was tab-completed in the chat.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.CurrentlySelectedCSharpCommand">
            <summary>
            for jquavious: this is mostly for internal use, this will be either empty or the name of a C# command returned in the getclientcommands event
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.RefreshChatMessages">
            <summary>
            Gets or sets a value indicating whether the chat messages should be refreshed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.IsKeyboardActive">
            <summary>
            Gets a value indicating whether the keyboard is currently active in the chat screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.LastTabCompleteIndex">
            <summary>
            Gets the index of the last tab-completed option.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.AutoCompleteLines">
            <summary>
            Gets the number of auto-complete lines available.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.SendMessage">
            <summary>
            Gets or sets a value indicating whether to send the current chat message.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.IntellisenseMessages">
            <summary>
            Gets or sets the list of intellisense messages shown at the bottom of the chat.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ChatScreen.CompletionOptions">
            <summary>
            Gets or sets the list of completion options shown after intellisense messages.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.ContainerScreenType">
            <summary>
            Specifies the type of container screen.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ContainerScreenType.Block">
            <summary>
            The container is associated with a block.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.ContainerScreenType.Entity">
            <summary>
            The container is associated with an entity.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.InventoryLayout">
            <summary>
            The layout of the inventory screen.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.InventoryLayout.None">
            <summary>
            Not sure when you're going to get this.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.InventoryLayout.Survival">
            <summary>
            The survival inventory layout, the one with the chest icon. It has only the inventory and nothing else.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.InventoryLayout.RecipeBook">
            <summary>
            The recipe book layout, the one with the closed book and chest icon. It has the inventory on the right and the recipe book on the left.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.InventoryLayout.Creative">
            <summary>
            The creative inventory layout, the one with the open book icon. It has the creative menu in full screen.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.UI.InventoryLayout.UnknownNotRelevantToThisScreen">
            <summary>
            This screen does not have an inventory layout that applies to it.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.ContainerScreen">
            <summary>
            Represents a UI screen for interacting with containers such as chests or inventories.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.UI.ContainerScreen"/> class.
            </summary>
            <param name="currentMemoryAddress">The memory address of the container screen.</param>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.EntityId">
            <summary>
            Gets the entity ID associated with this container, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.Entity">
            <summary>
            Gets the entity associated with this container, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.BlockPos">
            <summary>
            Gets the block position associated with this container, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.Type">
            <summary>
            Gets the type of this container screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.HoveredContainer">
            <summary>
            Gets the name of the currently hovered container.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.HoveredSlot">
            <summary>
            Gets the slot index currently hovered by the user.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.IsHoveringItem">
            <summary>
            Will be true when the player is hovering over an item, not a slot in the container screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.ContainerScreen.InventoryLayout">
            <summary>
            Which tab of the inventory is selected.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.Close">
            <summary>
            Closes the container screen.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.GetItem(System.String,System.Int32)">
            <summary>
            Gets the item in the specified container and slot.
            If it's not giving you the item you want, try using <see cref="M:OnixRuntime.Api.UI.ContainerScreen.GetVisualItem(System.String,System.Int32)"/>.
            </summary>
            <param name="containerName">The name of the container.</param>
            <param name="slot">The slot index.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Items.ItemStack"/> in the specified slot.</returns>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.GetVisualItem(System.String,System.Int32)">
            <summary>
            Gets the item in the specified container and slot.
            This gets some items that <see cref="M:OnixRuntime.Api.UI.ContainerScreen.GetItem(System.String,System.Int32)"/> is not able to get.
            </summary>
            <param name="containerName">The name of the container.</param>
            <param name="slot">The slot index.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Items.ItemStack"/> in the specified slot.</returns>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.SendFlyingItem(OnixRuntime.Api.Items.ItemStack,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Sends a flying item animation from a source to a target container and slot.
            </summary>
            <param name="stack">The item stack to animate.</param>
            <param name="sourceContainerName">The source container name.</param>
            <param name="sourceSlot">The source slot index.</param>
            <param name="targetContainerName">The target container name.</param>
            <param name="targetSlot">The target slot index.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.SendFlyingItem(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Sends a flying item animation from a source to a target container and slot, automatically retrieving the item from the source.
            </summary>
            <param name="sourceContainerName">The source container name.</param>
            <param name="sourceSlot">The source slot index.</param>
            <param name="targetContainerName">The target container name.</param>
            <param name="targetSlot">The target slot index.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.TakeAll(System.String,System.Int32)">
            <summary>
            Takes all items from the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.TakeHalf(System.String,System.Int32)">
            <summary>
            Takes half of the items from the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.PlaceAll(System.String,System.Int32)">
            <summary>
            Places all items into the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.PlaceOne(System.String,System.Int32)">
            <summary>
            Places one item into the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.DropAll(System.String,System.Int32)">
            <summary>
            Drops all items from the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.DropOne(System.String,System.Int32)">
            <summary>
            Drops one item from the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.AutoPlace(System.String,System.Int32,System.Int32)">
            <summary>
            Automatically places a specified quantity of items into the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <param name="quantity">The quantity to place.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.UI.ContainerScreen.AutoPlace(System.String,System.Int32)">
            <summary>
            Automatically places as many items as possible into the specified slot in the container.
            </summary>
            <param name="containerName">The container name.</param>
            <param name="slot">The slot index.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="T:OnixRuntime.Api.UI.GameTitleTimes">
            <summary>
            Represents the timing information for game titles, including fade in, duration, and fade out.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameTitleTimes.FadeIn">
            <summary>
            Gets the fade-in duration for the title.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameTitleTimes.Duration">
            <summary>
            Gets the duration the title is displayed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameTitleTimes.FadeOut">
            <summary>
            Gets the fade-out duration for the title.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.GameGuiInfo">
            <summary>
            Provides information and control over the game GUI, including screen, mouse, and chat.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.UI.GameGuiInfo"/> class.
            </summary>
            <param name="currentMemoryAddress">The memory address of the game GUI info.</param>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.ScreenName">
            <summary>
            Gets the name of the current screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.ScreenSize">
            <summary>
            Gets the size of the screen in GUI coordinates.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.RawScreenSize">
            <summary>
            Gets the raw size of the screen in pixels.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.RawMousePosition">
            <summary>
            Gets the raw mouse position in pixels.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.MousePosition">
            <summary>
            Gets the mouse position in GUI coordinates.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.RootUiElement">
            <summary>
            Gets the current screen's root UI element. This does not work outside a world as of right now.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.GuiScale">
            <summary>
            Gets or sets the GUI scale factor.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.GuiScaleInverse">
            <summary>
            Gets the inverse of the GUI scale factor.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.TitleTimes">
            <summary>
            Gets or sets the timing information for game titles.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.SetTitleText(System.String,OnixRuntime.Api.Events.Session.GameTitleType)">
            <summary>
            Sets the title text with the specified type.
            </summary>
            <param name="text">The text to display.</param>
            <param name="type">The type of title.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.SetTitleText(System.String)">
            <summary>
            Sets the main title text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.SetSubTitleText(System.String)">
            <summary>
            Sets the subtitle text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.SetActionbarText(System.String)">
            <summary>
            Sets the actionbar text.
            </summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.ClearTitle">
            <summary>
            Clears the title text.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.ClearChatMessages">
            <summary>
            WARNING: This function will invalidate all existing ChatMessage[] you retrieved, make sure to get a new one after calling this
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.RemoveChatMessage(System.Int32)">
            <summary>
            WARNING: This function will invalidate all existing ChatMessage[] you retrieved, make sure to get a new one after calling this
            </summary>
            <param name="index">The 0 based index of the message to remove</param>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.ChatMessages">
            <summary>
            Gets the array of chat messages currently displayed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.ScreenSafeArea">
            <summary>
            Gets the rectangle representing the safe area of the screen, this uses the game's safe area setting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameGuiInfo.MouseGrabbed">
            <summary>
            True when the mouse moves around the camera in the world. There is no cursor visible.
            False when in a UI screen, the cursor is visible and the mouse moves the cursor, not the in game camera.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.CloseCurrentScreen">
            <summary>
            Closes the current screen, this will not any important screens, so you can abuse this and not worry about it.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameGuiInfo.ScheduleScreenRelayout">
            <summary>
            Schedules the screen relayout, this will force positions of every element to be updated again.
            Useful when you change the position of game ui elements and want to restore it.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.UI.GameUIElement">
            <summary>
            Represent a UI element in the game, which you just lost... lost?
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.Name">
            <summary>
            The name of the UI element.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.Position">
            <summary>
            The position relative to the parent element.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.RawPosition">
            <summary>
            The position relative to the current screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.Size">
            <summary>
            The size of the UI element.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.MinSize">
            <summary>
            The minimum size of the UI element.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.MaxSize">
            <summary>
            The maximum size of the UI element.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.Rect">
            <summary>
            The position and size of the ui element relative to its parent.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.RawRect">
            <summary>
            The position and size of the ui element relative to the current screen.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.JsonProperties">
            <summary>
            Arbitrary properties the game can decide to set.
            If you do set these you might just crash the game, I'm not too sure how well that works.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.Parent">
            <summary>
            The parent element of this element.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.UI.GameUIElement.Children">
            <summary>
            All the sub-elements of this element.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.UI.GameUIElement.FindChildRecursive(System.String)">
            <summary>
            Finds a child element by name recursively (aka it checks every children's children's children's children's children's children's children's children's children's children's children's children children's children's children children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's children's childr...
            </summary>
            <param name="name">The name of the element to find</param>
            <returns></returns>
        </member>
        <member name="T:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder">
            <summary>
            Builder for creating version translation layer lookup tables.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data">
            <summary>
            Represents a key-version pair for translation.
            </summary>
            <param name="key">The key to be translated.</param>
            <param name="version">The version associated with the key.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data.#ctor(System.String,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Represents a key-version pair for translation.
            </summary>
            <param name="key">The key to be translated.</param>
            <param name="version">The version associated with the key.</param>
        </member>
        <member name="F:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data.Key">
            <summary>
            The key to be translated.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data.Version">
            <summary>
            The version associated with the key.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data.ToString">
            <summary>
            Returns a string representation of the Data struct.
            </summary>
            <returns>A string containing the key and version.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.DataBuilder">
            <summary>
            Builder for constructing a list of Data entries.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.DataBuilder.Add(System.String,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Adds a key-version pair to the builder.
            </summary>
            <param name="key">The key to add.</param>
            <param name="version">The version associated with the key.</param>
            <returns>The DataBuilder instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.DataBuilder.Build">
            <summary>
            Builds and returns the list of Data entries.
            </summary>
            <returns>The list of Data entries.</returns>
        </member>
        <member name="F:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Values">
            <summary>
            The collection of translation data sets.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Add(System.Collections.Generic.List{OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Data})">
            <summary>
            Adds a list of Data entries to the translation layer.
            </summary>
            <param name="data">The list of Data entries to add.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Add(OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.DataBuilder)">
            <summary>
            Adds a DataBuilder's entries to the translation layer.
            </summary>
            <param name="data">The DataBuilder containing entries to add.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.Translate(System.String,OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Translates a key from the current version to the target version.
            </summary>
            <param name="key">The key to translate.</param>
            <param name="currentVersion">The current version.</param>
            <param name="targetVersion">The target version.</param>
            <returns>The translated key, or the original key if no translation is found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookupBuilder.ToLookup(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Creates a lookup table for translating keys between versions.
            </summary>
            <param name="currentVersion">The current version.</param>
            <param name="targetVersion">The target version.</param>
            <returns>A VersionTranslationLayerLookup for key translation.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookup">
            <summary>
            Provides lookup functionality for version translation layers.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookup.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the VersionTranslationLayerLookup class.
            </summary>
            <param name="lookup">The dictionary containing key translations.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookup.Add(System.String,System.String)">
            <summary>
            Adds a key-value translation to the lookup.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to associate with the key.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.ClientTranslationLayers.VersionTranslationLayerLookup.Translate(System.String)">
            <summary>
            Translates a key using the lookup table.
            </summary>
            <param name="key">The key to translate.</param>
            <returns>The translated key, or the original key if no translation exists.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Utils.Clipboard">
            <summary>
            Provides methods for interacting with the system clipboard.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.Clipboard.InitializeOle">
            <summary>
            Initializes OLE for the current thread. Call this before using clipboard functions if needed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.Clipboard.SetText(System.String)">
            <summary>
            Sets the specified text to the system clipboard.
            </summary>
            <param name="text">The text to set on the clipboard.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.Clipboard.GetText">
            <summary>
            Retrieves text from the system clipboard.
            </summary>
            <returns>The text currently stored on the clipboard, or an empty string if unavailable.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.Clipboard.SetFile(System.String)">
            <summary>
            Sets the specified file path to the system clipboard.
            </summary>
            <param name="path">The file path to set on the clipboard.</param>
        </member>
        <member name="T:OnixRuntime.Api.Utils.MemoryHelpers">
            <summary>
            Provides utility functions for memory manipulation and scanning.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ScanSignature(System.String)">
            <summary>
            Scans memory within a specified address range for a given signature pattern.
            
            Signature Format:
            - The signature is a string of space-separated hexadecimal bytes, without `0x`.
            - Wildcards can be represented by `?` or `??`.
              Example: "48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??"
            
            Signature Modifiers (optional):
            You can append one or more modifiers to the signature to alter how the final address is resolved:
            - `iN`: Selects the N-th match result (0-based index). Example: `i2` selects the third match.
            - `oN`: Reads a 4-byte offset starting N bytes after the match (useful for instructions like CALL/LEA).
            - `nN`: Treats the result as a pointer and reads the value at `result + N`.
            - `pN`: Adds N to the final result. Example: `p4` adds 4 to the result.
            
            If no matching signature is found, <see cref="F:System.IntPtr.Zero"/> is returned.
            </summary>
            <param name="signature">The signature pattern and optional modifiers to search for.</param>
            <returns>The resolved address from the matched signature, or <see cref="F:System.IntPtr.Zero"/> if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the signature is empty or cannot be parsed.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ScanSignature(System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Scans memory within a specified address range for a given signature pattern.
            
            Signature Format:
            - The signature is a string of space-separated hexadecimal bytes, without `0x`.
            - Wildcards can be represented by `?` or `??`.
              Example: "48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??"
            
            Signature Modifiers (optional):
            You can append one or more modifiers to the signature to alter how the final address is resolved:
            - `iN`: Selects the N-th match result (0-based index). Example: `i2` selects the third match.
            - `oN`: Reads a 4-byte offset starting N bytes after the match (useful for instructions like CALL/LEA).
            - `nN`: Treats the result as a pointer and reads the value at `result + N`.
            - `pN`: Adds N to the final result. Example: `p4` adds 4 to the result.
            
            If no matching signature is found, <see cref="F:System.IntPtr.Zero"/> is returned.
            </summary>
            <param name="signature">The signature pattern and optional modifiers to search for.</param>
            <param name="startAddress">Start address of the memory range to scan.</param>
            <param name="endAddress">End address of the memory range to scan.</param>
            <returns>The resolved address from the matched signature, or <see cref="F:System.IntPtr.Zero"/> if not found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the signature is empty or cannot be parsed.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="T:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature">
            <summary>
            Represents a signature pattern tied to a specific version of the game.
            
            This class is used to associate a signature with the version where it first became valid.
            When scanning, the appropriate signature is selected based on the current version context.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.#ctor(OnixRuntime.Api.Utils.PluginSemVersion,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature"/> using a strongly typed version.
            </summary>
            <param name="version">The version when this signature became valid.</param>
            <param name="signature">The signature pattern string.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature"/> using a version string.
            </summary>
            <param name="version">The version string (will be parsed into <see cref="T:OnixRuntime.Api.Utils.PluginSemVersion"/>).</param>
            <param name="signature">The signature pattern string.</param>
        </member>
        <member name="P:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.Signature">
            <summary>
            Gets the signature pattern associated with this version.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.Version">
            <summary>
            Gets the version this signature is tied to.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature.CompareTo(OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature)">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ScanSignature(System.Collections.Generic.IEnumerable{OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature})">
            <summary>
            Scans memory within a specified address range for a versioned signature pattern.
            
            This function uses a list of signatures associated with the game version in which they started working.
            - Signatures apply from their specified version *up to but not including* the next newer version.
            - For game versions *earlier* than any specified, the first (oldest) signature is used.
            - For game versions *later* than any specified, the last (newest) signature is used.
            
            Signature Format:
            - Signatures are hexadecimal byte patterns without `0x`, using `?` or `??` as wildcards.
              Example: "48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??"
            
            Signature Modifiers (optional):
            You can append modifiers to customize how the final address is derived from the match:
            - `iN`: Selects the N-th match result (0-based index). Example: `i2` selects the third match.
            - `oN`: Reads a 4-byte offset starting N bytes after the matched signature. Useful for calls or LEA.
            - `nN`: Treats the result as a pointer and reads the value at `result + N`.
            - `pN`: Adds N to the final result. Example: `p4` adds 4 to the result.
            
            If no matching signature is found, <see cref="F:System.IntPtr.Zero"/> is returned.
            </summary>
            <param name="signatures">A list of versioned signatures to search for.</param>
            <returns>The resolved address from the matched signature, or <see cref="F:System.IntPtr.Zero"/> if none is found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when no valid signatures are provided.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ScanSignature(System.Collections.Generic.IEnumerable{OnixRuntime.Api.Utils.MemoryHelpers.VersionedSignature},System.IntPtr,System.IntPtr)">
            <summary>
            Scans memory within a specified address range for a versioned signature pattern.
            
            This function uses a list of signatures associated with the game version in which they started working.
            - Signatures apply from their specified version *up to but not including* the next newer version.
            - For game versions *earlier* than any specified, the first (oldest) signature is used.
            - For game versions *later* than any specified, the last (newest) signature is used.
            
            Signature Format:
            - Signatures are hexadecimal byte patterns without `0x`, using `?` or `??` as wildcards.
              Example: "48 89 54 24 ?? 48 89 4C 24 ?? 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 ??"
            
            Signature Modifiers (optional):
            You can append modifiers to customize how the final address is derived from the match:
            - `iN`: Selects the N-th match result (0-based index). Example: `i2` selects the third match.
            - `oN`: Reads a 4-byte offset starting N bytes after the matched signature. Useful for calls or LEA.
            - `nN`: Treats the result as a pointer and reads the value at `result + N`.
            - `pN`: Adds N to the final result. Example: `p4` adds 4 to the result.
            
            If no matching signature is found, <see cref="F:System.IntPtr.Zero"/> is returned.
            </summary>
            <param name="signatures">A list of versioned signatures to search for.</param>
            <param name="startAddress">Start address of the memory range to scan.</param>
            <param name="endAddress">End address of the memory range to scan.</param>
            <returns>The resolved address from the matched signature, or <see cref="F:System.IntPtr.Zero"/> if none is found.</returns>
            <exception cref="T:System.ArgumentException">Thrown when no valid signatures are provided.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.GetAddress(OnixRuntime.Api.Internal.MemoryAddressContainer)">
            <summary>
            Gets the memory address of the specified <see cref="T:OnixRuntime.Api.Internal.MemoryAddressContainer"/> which most game object let you obtain.
            </summary>
            <param name="addressContainer">The object to get the address of.</param>
            <returns>The memory address of the object.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.GetAddress(OnixRuntime.Api.Items.ItemStack)">
            <summary>
            Gets the memory address of the specified <see cref="T:OnixRuntime.Api.Items.ItemStack"/> which most game object let you obtain.
            </summary>
            <param name="addressContainer">The object to get the address of.</param>
            <returns>The memory address of the object.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.Read``1(System.IntPtr)">
            <summary>
            Reads a structure of type T from the specified memory address.
            </summary>
            <typeparam name="T">The type of structure to read.</typeparam>
            <param name="address">The memory address to read from.</param>
            <returns>The structure read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.Read``1(System.IntPtr,System.Boolean)">
            <summary>
            Reads a structure of type T from the specified memory address.
            </summary>
            <typeparam name="T">The type of structure to read.</typeparam>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The structure read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.Write``1(System.IntPtr,``0)">
            <summary>
            Writes a structure of type T to the specified memory address. Assumes memory is already writable.
            </summary>
            <typeparam name="T">The type of structure to write.</typeparam>
            <param name="address">The memory address to write to.</param>
            <param name="value">The structure to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.Write``1(System.IntPtr,``0,System.Boolean)">
            <summary>
            Writes a structure of type T to the specified memory address.
            </summary>
            <typeparam name="T">The type of structure to write.</typeparam>
            <param name="address">The memory address to write to.</param>
            <param name="value">The structure to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadByte(System.IntPtr)">
            <summary>
            Reads a byte from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The byte read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadByte(System.IntPtr,System.Boolean)">
            <summary>
            Reads a byte from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The byte read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteByte(System.IntPtr,System.Byte)">
            <summary>
            Writes a byte to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The byte value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteByte(System.IntPtr,System.Byte,System.Boolean)">
            <summary>
            Writes a byte to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The byte value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadSByte(System.IntPtr)">
            <summary>
            Reads a signed byte (sbyte) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The signed byte read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadSByte(System.IntPtr,System.Boolean)">
            <summary>
            Reads a signed byte (sbyte) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The signed byte read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteSByte(System.IntPtr,System.SByte)">
            <summary>
            Writes a signed byte (sbyte) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The signed byte value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteSByte(System.IntPtr,System.SByte,System.Boolean)">
            <summary>
            Writes a signed byte (sbyte) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The signed byte value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadInt16(System.IntPtr)">
            <summary>
            Reads a 16-bit signed integer (short) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The 16-bit signed integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadInt16(System.IntPtr,System.Boolean)">
            <summary>
            Reads a 16-bit signed integer (short) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The 16-bit signed integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteInt16(System.IntPtr,System.Int16)">
            <summary>
            Writes a 16-bit signed integer (short) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 16-bit signed integer value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteInt16(System.IntPtr,System.Int16,System.Boolean)">
            <summary>
            Writes a 16-bit signed integer (short) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 16-bit signed integer value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadUInt16(System.IntPtr)">
            <summary>
            Reads a 16-bit unsigned integer (ushort) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The 16-bit unsigned integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadUInt16(System.IntPtr,System.Boolean)">
            <summary>
            Reads a 16-bit unsigned integer (ushort) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The 16-bit unsigned integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteUInt16(System.IntPtr,System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer (ushort) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 16-bit unsigned integer value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteUInt16(System.IntPtr,System.UInt16,System.Boolean)">
            <summary>
            Writes a 16-bit unsigned integer (ushort) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 16-bit unsigned integer value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadInt32(System.IntPtr)">
            <summary>
            Reads a 32-bit signed integer (int) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The 32-bit signed integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadInt32(System.IntPtr,System.Boolean)">
            <summary>
            Reads a 32-bit signed integer (int) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The 32-bit signed integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteInt32(System.IntPtr,System.Int32)">
            <summary>
            Writes a 32-bit signed integer (int) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 32-bit signed integer value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteInt32(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes a 32-bit signed integer (int) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 32-bit signed integer value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadUInt32(System.IntPtr)">
            <summary>
            Reads a 32-bit unsigned integer (uint) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The 32-bit unsigned integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadUInt32(System.IntPtr,System.Boolean)">
            <summary>
            Reads a 32-bit unsigned integer (uint) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The 32-bit unsigned integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteUInt32(System.IntPtr,System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer (uint) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 32-bit unsigned integer value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteUInt32(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Writes a 32-bit unsigned integer (uint) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 32-bit unsigned integer value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadInt64(System.IntPtr)">
            <summary>
            Reads a 64-bit signed integer (long) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The 64-bit signed integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadInt64(System.IntPtr,System.Boolean)">
            <summary>
            Reads a 64-bit signed integer (long) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The 64-bit signed integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteInt64(System.IntPtr,System.Int64)">
            <summary>
            Writes a 64-bit signed integer (long) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 64-bit signed integer value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteInt64(System.IntPtr,System.Int64,System.Boolean)">
            <summary>
            Writes a 64-bit signed integer (long) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 64-bit signed integer value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadUInt64(System.IntPtr)">
            <summary>
            Reads a 64-bit unsigned integer (ulong) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The 64-bit unsigned integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadUInt64(System.IntPtr,System.Boolean)">
            <summary>
            Reads a 64-bit unsigned integer (ulong) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The 64-bit unsigned integer read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteUInt64(System.IntPtr,System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer (ulong) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 64-bit unsigned integer value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteUInt64(System.IntPtr,System.UInt64,System.Boolean)">
            <summary>
            Writes a 64-bit unsigned integer (ulong) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The 64-bit unsigned integer value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadIntPtr(System.IntPtr)">
            <summary>
            Reads a platform-dependent sized integer (IntPtr) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The IntPtr value read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadIntPtr(System.IntPtr,System.Boolean)">
            <summary>
            Reads a platform-dependent sized integer (IntPtr) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The IntPtr value read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteIntPtr(System.IntPtr,System.IntPtr)">
            <summary>
            Writes a platform-dependent sized integer (IntPtr) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The IntPtr value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteIntPtr(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Writes a platform-dependent sized integer (IntPtr) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The IntPtr value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadFloat(System.IntPtr)">
            <summary>
            Reads a single-precision floating-point number (float) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The float value read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadFloat(System.IntPtr,System.Boolean)">
            <summary>
            Reads a single-precision floating-point number (float) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The float value read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteFloat(System.IntPtr,System.Single)">
            <summary>
            Writes a single-precision floating-point number (float) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The float value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteFloat(System.IntPtr,System.Single,System.Boolean)">
            <summary>
            Writes a single-precision floating-point number (float) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The float value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadDouble(System.IntPtr)">
            <summary>
            Reads a double-precision floating-point number (double) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The double value read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadDouble(System.IntPtr,System.Boolean)">
            <summary>
            Reads a double-precision floating-point number (double) from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The double value read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteDouble(System.IntPtr,System.Double)">
            <summary>
            Writes a double-precision floating-point number (double) to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The double value to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteDouble(System.IntPtr,System.Double,System.Boolean)">
            <summary>
            Writes a double-precision floating-point number (double) to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The double value to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadBoolean(System.IntPtr)">
            <summary>
            Reads a boolean value from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <returns>The boolean value read from memory (non-zero is true).</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadBoolean(System.IntPtr,System.Boolean)">
            <summary>
            Reads a boolean value from the specified memory address.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>The boolean value read from memory (non-zero is true).</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteBoolean(System.IntPtr,System.Boolean)">
            <summary>
            Writes a boolean value to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The boolean value to write (true as 1, false as 0).</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteBoolean(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Writes a boolean value to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="value">The boolean value to write (true as 1, false as 0).</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadBytes(System.IntPtr,System.Int32)">
            <summary>
            Reads a specified number of bytes from the memory address into a new byte array.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>A new byte array containing the data read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadBytes(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Reads a specified number of bytes from the memory address into a new byte array.
            </summary>
            <param name="address">The memory address to read from.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>A new byte array containing the data read from memory.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteBytes(System.IntPtr,System.Byte[])">
            <summary>
            Writes a byte array to the specified memory address. Assumes memory is already writable.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="data">The byte array to write.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteBytes(System.IntPtr,System.Byte[],System.Boolean)">
            <summary>
            Writes a byte array to the specified memory address.
            </summary>
            <param name="address">The memory address to write to.</param>
            <param name="data">The byte array to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadArray``1(System.IntPtr,System.Int32)">
            <summary>
            Reads an array of structures of type T from the specified memory address.
            </summary>
            <typeparam name="T">The type of structure to read.</typeparam>
            <param name="address">The memory address to read from.</param>
            <param name="count">The number of structures to read.</param>
            <returns>A new array of T containing the structures read from memory.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If count is negative.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.ReadArray``1(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Reads an array of structures of type T from the specified memory address.
            </summary>
            <typeparam name="T">The type of structure to read.</typeparam>
            <param name="address">The memory address to read from.</param>
            <param name="count">The number of structures to read.</param>
            <param name="isReadOnly">Whether the memory is read-only and protection needs to be temporarily changed.</param>
            <returns>A new array of T containing the structures read from memory.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If count is negative.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteArray``1(System.IntPtr,``0[])">
            <summary>
            Writes an array of structures of type T to the specified memory address. Assumes memory is already writable.
            </summary>
            <typeparam name="T">The type of structure to write.</typeparam>
            <param name="address">The memory address to write to.</param>
            <param name="values">The array of T to write.</param>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.WriteArray``1(System.IntPtr,``0[],System.Boolean)">
            <summary>
            Writes an array of structures of type T to the specified memory address.
            </summary>
            <typeparam name="T">The type of structure to write.</typeparam>
            <param name="address">The memory address to write to.</param>
            <param name="values">The array of T to write.</param>
            <param name="isReadOnly">Whether the memory is potentially read-only and protection needs to be temporarily changed to allow writing.</param>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when you are not trusted.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.MemoryHelpers.CreateEntityFromPtr(System.IntPtr)">
            <summary>
            Creates a new entity from its memory address.
            </summary>
            <param name="entityPointer">The pointer to the entity.</param>
            <returns>A new entity out of that or a crash if you were wrong in thinking that was a valid entity address.</returns>
        </member>
        <member name="T:OnixRuntime.Api.Utils.PluginSemVersion">
            <summary>
            Represents a semantic version for plugins, supporting comparison and parsing.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.PluginSemVersion.Major">
            <summary>
            Gets the major version component.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.PluginSemVersion.Minor">
            <summary>
            Gets the minor version component.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.PluginSemVersion.Patch">
            <summary>
            Gets the patch version component.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.PluginSemVersion"/> class with the specified major, minor, and patch values.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="patch">The patch version.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.PluginSemVersion"/> class from a version string.
            </summary>
            <param name="versionText">The version string in the format 'major.minor.patch'.</param>
            <exception cref="T:System.FormatException">Thrown when the version string is not in the correct format.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.FromGameVersionInteger(System.Int32)">
            <summary>
            Creates a <see cref="T:OnixRuntime.Api.Utils.PluginSemVersion"/> from a game version integer.
            </summary>
            <param name="gameVersion">The integer representing the game version.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.PluginSemVersion"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.op_GreaterThan(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Determines if one version is greater than another.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>True if <paramref name="a"/> is greater than <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Utils.PluginSemVersion.GameVersionInteger">
            <summary>
            Gets the integer representation of the version for game versioning.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.op_LessThan(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Determines if one version is less than another.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>True if <paramref name="a"/> is less than <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.op_GreaterThanOrEqual(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Determines if one version is greater than or equal to another.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>True if <paramref name="a"/> is greater than or equal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.op_LessThanOrEqual(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Determines if one version is less than or equal to another.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>True if <paramref name="a"/> is less than or equal to <paramref name="b"/>; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.op_Equality(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Determines if two versions are equal.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>True if the versions are equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.op_Inequality(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Determines if two versions are not equal.
            </summary>
            <param name="a">The first version.</param>
            <param name="b">The second version.</param>
            <returns>True if the versions are not equal; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.ToString">
            <summary>
            Returns the string representation of the version.
            </summary>
            <returns>A string in the format 'major.minor.patch'.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.PluginSemVersion.CompareTo(System.Object)">
            <summary>
            Compares the current instance to another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>An integer indicating the relative order.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the object is not a <see cref="T:OnixRuntime.Api.Utils.PluginSemVersion"/>.</exception>
        </member>
        <member name="T:OnixRuntime.Api.Utils.RawImageData">
            <summary>
            Represents raw image data and provides methods for manipulating and saving images.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Utils.RawImageData.ResizeFilter">
            <summary>
            Specifies the filter to use when resizing an image.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.Default">
            <summary>
            Use API default (e.g., Catmull-Rom or Mitchell)
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.Box">
            <summary>
            Box filter (trapezoidal average)
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.Bilinear">
            <summary>
            Bilinear filtering (triangle filter)
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.CubicBSpline">
            <summary>
            Smooth cubic B-spline
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.Cubic">
            <summary>
            Interpolating cubic spline (Catmull-Rom)
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.Mitchell">
            <summary>
            Mitchell-Netrevalli (B=1/3, C=1/3)
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ResizeFilter.Nearest">
            <summary>
            Nearest-neighbor (point sampling)
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat">
            <summary>
            Specifies the format to use when saving an image.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat.Png">
            <summary>
            PNG image format.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat.Jpg">
            <summary>
            JPEG image format.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.RawImageData.Data">
            <summary>
            Gets the raw image data in RGBA8 format.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.RawImageData.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.RawImageData.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.RawImageData.IsEmpty">
            <summary>
            Gets a value indicating whether the image is empty.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.Utils.RawImageData.Empty">
            <summary>
            Gets an empty <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> class with the specified width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> class from raw RGBA8 data.
            </summary>
            <param name="rawDataRGBA8">The raw RGBA8 image data.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> class from encoded image data.
            </summary>
            <param name="encodedImageData">The encoded image data (e.g., PNG or JPEG bytes).</param>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> class from an image file path.
            </summary>
            <param name="path">The file path to the image.</param>
            <exception cref="T:System.IO.InvalidDataException">When the image cannot be parsed.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.GetRawPixel(System.Int32,System.Int32)">
            <summary>
            Gets the raw pixel value at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>The raw pixel value as a 32-bit unsigned integer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the coordinates are out of bounds.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the data array is null.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.GetRawPixelOpacity(System.Int32,System.Int32)">
            <summary>
            Gets the raw pixel opacity value at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>The raw pixel value as a 32-bit unsigned integer.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the coordinates are out of bounds.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the data array is null.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SetRawPixel(System.Int32,System.Int32,System.UInt32)">
            <summary>
            Sets the raw pixel value at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="color">The color value as a 32-bit unsigned integer.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the coordinates are out of bounds.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the data array is null.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SetRawPixelOpacity(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the raw pixel opacity value at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="opacity">The color value as a 32-bit unsigned integer.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the coordinates are out of bounds.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when the data array is null.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color at the specified coordinates as a <see cref="T:OnixRuntime.Api.Maths.ColorF"/>.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>The color at the specified coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SetPixel(System.Int32,System.Int32,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Sets the color at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.GetSaveBytes(OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat,System.Int32,System.Int32)">
            <summary>
            Gets the bytes for saving the image in the specified format.
            </summary>
            <param name="format">The image save format.</param>
            <param name="quality">The quality for JPEG format (default 100).</param>
            <param name="compressionLevel">The compression level for PNG format (default 5).</param>
            <returns>The image bytes in the specified format.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Save(System.String,OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat,System.Int32,System.Int32)">
            <summary>
            Saves the image to the specified file path.
            </summary>
            <param name="path">The file path to save the image.</param>
            <param name="format">The image save format.</param>
            <param name="quality">The quality for JPEG format (default 100).</param>
            <param name="compressionLevel">The compression level for PNG format (default 5).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Save(System.IO.Stream,OnixRuntime.Api.Utils.RawImageData.ImageSaveFormat,System.Int32,System.Int32)">
            <summary>
            Saves the image to the specified stream.
            </summary>
            <param name="stream">The stream to save the image to.</param>
            <param name="format">The image save format.</param>
            <param name="quality">The quality for JPEG format (default 100).</param>
            <param name="compressionLevel">The compression level for PNG format (default 5).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.GetSaveBytesPng(System.Int32)">
            <summary>
            Gets the PNG bytes for saving the image.
            </summary>
            <param name="compressionLevel">The compression level for PNG format (default 5).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SavePng(System.String,System.Int32)">
            <summary>
            Saves the image as PNG to the specified file path.
            </summary>
            <param name="path">The file path to save the PNG image.</param>
            <param name="compressionLevel">The compression level for PNG format (default 5).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SavePng(System.IO.Stream,System.Int32)">
            <summary>
            Saves the image as PNG to the specified stream.
            </summary>
            <param name="stream">The stream to save the PNG image to.</param>
            <param name="compressionLevel">The compression level for PNG format (default 5).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.GetSaveBytesJpg(System.Int32)">
            <summary>
            Gets the JPEG bytes for saving the image.
            </summary>
            <param name="quality">The quality for JPEG format (default 100).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SaveJpg(System.String,System.Int32)">
            <summary>
            Saves the image as JPEG to the specified file path.
            </summary>
            <param name="path">The file path to save the JPEG image.</param>
            <param name="quality">The quality for JPEG format (default 100).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SaveJpg(System.IO.Stream,System.Int32)">
            <summary>
            Saves the image as JPEG to the specified stream.
            </summary>
            <param name="stream">The stream to save the JPEG image to.</param>
            <param name="quality">The quality for JPEG format (default 100).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Load(System.Byte[])">
            <summary>
            Loads a <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> from the specified byte array.
            </summary>
            <param name="bytes">The image bytes.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance.</returns>
            <exception cref="T:System.IO.InvalidDataException">When the image cannot be parsed.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Load(System.String)">
            <summary>
            Loads a <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> from the specified file path.
            </summary>
            <param name="path">The file path to the image.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance.</returns>
            <exception cref="T:System.IO.InvalidDataException">When the image cannot be parsed.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Load(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> from the specified stream.
            </summary>
            <param name="stream">The stream containing the image data.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance.</returns>
            <exception cref="T:System.IO.InvalidDataException">When the image cannot be parsed.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Sample(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I,System.Action{OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2I})">
            <summary>
            Samples the image in the specified rectangular region, invoking a callback for each pixel.
            </summary>
            <param name="startPoint">The top-left corner of the region to sample (inclusive).</param>
            <param name="endPoint">The bottom-right corner of the region to sample (exclusive).</param>
            <param name="callback">The callback to invoke for each pixel, receiving the image and the current position.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Sample(System.Action{OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2I})">
            <summary>
            Samples the entire image, invoking a callback for each pixel.
            </summary>
            <param name="callback">The callback to invoke for each pixel, receiving the image and the current position.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SampleAsync(OnixRuntime.Api.Maths.Vec2I,OnixRuntime.Api.Maths.Vec2I,System.Action{OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2I})">
            <summary>
            Asynchronously samples the image in the specified rectangular region, invoking a callback for each pixel.
            </summary>
            <param name="startPoint">The top-left corner of the region to sample (inclusive).</param>
            <param name="endPoint">The bottom-right corner of the region to sample (exclusive).</param>
            <param name="callback">The callback to invoke for each pixel, receiving the image and the current position.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.SampleAsync(System.Action{OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2I})">
            <summary>
            Asynchronously samples the entire image, invoking a callback for each pixel.
            </summary>
            <param name="callback">The callback to invoke for each pixel, receiving the image and the current position.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Resized(System.Int32,System.Int32,OnixRuntime.Api.Utils.RawImageData.ResizeFilter)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> with the specified width and height, resizing the content.
            Default filter is Cubic for upsample and mitchell for downsample.
            </summary>
            <param name="width">The new width to resize to.</param>
            <param name="height">The new height to resize to.</param>
            <param name="filter">How it should be resized.</param>
            <returns>The new image.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> with the specified width and height.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>A new <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.CreateRandomGradient(System.Int32,System.Int32,System.Random)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> with a random four-way color gradient.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="rand">An optional <see cref="T:System.Random"/> instance for generating random colors. If null, a new instance will be created.</param>
            <returns>
            A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance filled with a smooth gradient between four randomly chosen corner colors.
            </returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.CreateFourWayGradient(System.Int32,System.Int32,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF,OnixRuntime.Api.Maths.ColorF)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> with a four-way color gradient between the specified corner colors.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="topLeft">The color at the top-left corner.</param>
            <param name="topRight">The color at the top-right corner.</param>
            <param name="bottomLeft">The color at the bottom-left corner.</param>
            <param name="bottomRight">The color at the bottom-right corner.</param>
            <returns>
            A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> instance filled with a smooth gradient between the four specified corner colors.
            </returns>
        </member>
        <member name="T:OnixRuntime.Api.Utils.RawImageData.ImageCorner">
            <summary>
            Represents one of the corners of an image.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ImageCorner.TopLeft">
            <summary>
            The top left corner of the image.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ImageCorner.TopRight">
            <summary>
            The top right corner of the image.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ImageCorner.BottomLeft">
            <summary>
            The bottom left corner of the image.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.Utils.RawImageData.ImageCorner.BottomRight">
            <summary>
            The bottom right corner of the image.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.RoundImageCorner(System.Single,OnixRuntime.Api.Utils.RawImageData.ImageCorner)">
            <summary>
            Rounds the opacity of a single image corner to create a rounded-corner effect.
            </summary>
            <param name="radius">The radius of the rounded corner in pixels.</param>
            <param name="corner">The corner to round (TopLeft, TopRight, BottomLeft, BottomRight).</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.RawImageData.RoundImageCorners(System.Single)">
            <summary>
            Rounds the opacity of all four corners of the image to create a rounded-corner effect.
            </summary>
            <param name="radius">The radius of the rounded corners in pixels.</param>
        </member>
        <member name="T:OnixRuntime.Api.Utils.SvgDocument">
            <summary>
            Represents an SVG document and provides methods for rendering, styling, and querying its geometry.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.Utils.SvgDocument"/> class from SVG content.
            When the SVG cannot be parsed, <see cref="T:System.IO.InvalidDataException"/> is thrown your way.
            </summary>
            <param name="svgContent">The SVG content as a string.</param>
            <exception cref="T:System.IO.InvalidDataException">When the SVG cannot be parsed.</exception>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.GetArea">
            <summary>
            Gets the bounding area of the SVG document's content.
            </summary>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the area of the SVG.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.GetArea(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Gets the transformed bounding area of the SVG document using the specified scale, position, and pre-scale position.
            </summary>
            <param name="scale">The scale to apply.</param>
            <param name="position">The position to apply after scaling.</param>
            <param name="preScalePosition">The position to apply before scaling.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the transformed area.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.GetArea(OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Gets the transformed bounding area of the SVG document's content using the specified scale and position.
            </summary>
            <param name="scale">The scale to apply.</param>
            <param name="position">The position to apply after scaling.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Maths.Rect"/> representing the transformed area.</returns>
        </member>
        <member name="P:OnixRuntime.Api.Utils.SvgDocument.Size">
            <summary>
            The size of the SVG document, which is it's width= and height= fields.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.ApplyStyleSheet(System.String)">
            <summary>
            Applies a CSS stylesheet to the SVG document.
            </summary>
            <param name="cssContent">The CSS stylesheet content as a string.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.RenderTo(OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Renders the SVG document to the specified image using the given scale, position, and pre-scale position.
            </summary>
            <param name="image">The target <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> to render into.</param>
            <param name="scale">The scale to apply.</param>
            <param name="position">The position to apply after scaling.</param>
            <param name="preScalePosition">The position to apply before scaling.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.RenderTo(OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Renders the SVG document to the specified image using the given scale and position.
            </summary>
            <param name="image">The target <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> to render into.</param>
            <param name="scale">The scale to apply.</param>
            <param name="position">The position to apply after scaling.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.RenderTo(OnixRuntime.Api.Utils.RawImageData,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Renders the SVG document to the specified image using the given scale and position.
            </summary>
            <param name="image">The target <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> to render into.</param>
            <param name="scale">The scale to apply.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.RenderTo(OnixRuntime.Api.Utils.RawImageData,System.Boolean)">
            <summary>
            Renders the SVG document to the specified image using default scale and position.
            </summary>
            <param name="image">The target <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> to render into.</param>
            <param name="scaleToFit">If true, it will scale the SVG to the image.</param>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.Render(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Renders the SVG document to a new image with the specified width and height, using default scale and position.
            </summary>
            <param name="width">The width of the output image.</param>
            <param name="height">The height of the output image.</param>
            <param name="scaleToFit">If true, it will scale the SVG to the image.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> containing the rendered SVG.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.Render(System.Int32,System.Int32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Renders the SVG document to a new image with the specified width, height, scale, and position.
            </summary>
            <param name="width">The width of the output image.</param>
            <param name="height">The height of the output image.</param>
            <param name="scale">The scale to apply.</param>
            <param name="position">The position to apply after scaling.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> containing the rendered SVG.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.Render(System.Int32,System.Int32,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Renders the SVG document to a new image with the specified width, height, scale, and position.
            </summary>
            <param name="width">The width of the output image.</param>
            <param name="height">The height of the output image.</param>
            <param name="scale">The scale to apply.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> containing the rendered SVG.</returns>
        </member>
        <member name="M:OnixRuntime.Api.Utils.SvgDocument.Render(System.Int32,System.Int32,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2,OnixRuntime.Api.Maths.Vec2)">
            <summary>
            Renders the SVG document to a new image with the specified width, height, scale, position, and pre-scale position.
            </summary>
            <param name="width">The width of the output image.</param>
            <param name="height">The height of the output image.</param>
            <param name="scale">The scale to apply.</param>
            <param name="position">The position to apply after scaling.</param>
            <param name="preScalePosition">The position to apply before scaling.</param>
            <returns>A <see cref="T:OnixRuntime.Api.Utils.RawImageData"/> containing the rendered SVG.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.Biome">
            <summary>
            Represents a biome in the world, providing access to its properties such as temperature, humidity, and densities.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.Name">
            <summary>
            Gets the name of the biome. (e.gh. plains)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.Namespace">
            <summary>
            Gets the namespace associated with the current biome. (e.g. minecraft)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.NameFull">
            <summary>
            Gets the full name of the biome associated with the current memory address. (e.g. minecraft:plains)
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.Id">
            <summary>
            Gets the unique identifier of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.Temperature">
            <summary>
            Gets the temperature of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.Humidity">
            <summary>
            Gets the humidity of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.AshDensity">
            <summary>
            Gets the ash density of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.WhiteAshDensity">
            <summary>
            Gets the white ash density of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.BlueSporesDensity">
            <summary>
            Gets the blue spores density of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.RedSporesDensity">
            <summary>
            Gets the red spores density of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.SnowAccumulation">
            <summary>
            Gets the snow accumulation value of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.FoliageSnow">
            <summary>
            Gets the foliage snow value of the biome.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Biome.FoliageColor">
            <summary>
            Gets the foliage color of the biome.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Biome.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.Biome"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the biome.</param>
        </member>
        <member name="T:OnixRuntime.Api.World.CreativeItemCategory">
            <summary>
            Specifies the creative item category for a block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.Block">
            <summary>
            Represents a block in the world, providing access to its properties, states, and permutations.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.Data">
            <summary>
            Gets the block data value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.Id">
            <summary>
            This id might not be reliable across versions/servers.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.RuntimeId">
            <summary>
            This id can change between worlds/servers/versions/etc.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.Name">
            <summary>
            Gets the name of the block. e.g. "bedrock"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.DescriptionIdentifier">
            <summary>
            Gets the description identifier of the block. e.g. "tile.bedrock"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.Namespace">
            <summary>
            Gets the namespace of the block. e.g. "minecraft"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.NameFull">
            <summary>
            Gets the full name of the block. e.g. "minecraft:bedrock"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.CreativeCategory">
            <summary>
            Gets the creative category of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.IsSolid">
            <summary>
            Gets a value indicating whether the block is solid.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.VisualBoundingBox">
            <summary>
            Gets the visual bounding box of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.State">
            <summary>
            Gets the state of the block as an <see cref="T:OnixRuntime.Api.NBT.ObjectTag"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.Permutations">
            <summary>
            Gets the permutations of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.NextPermutation">
            <summary>
            Gets the next permutation of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.PreviousPermutation">
            <summary>
            Gets the previous permutation of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.Graphics">
            <summary>
            The graphics of the block, helps you map textures in the <see cref="F:OnixRuntime.Api.Rendering.TexturePath.TerrainAtlas"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.LegacyDataLookup">
            <summary>
            Gets the legacy data lookup dictionary for the block.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.LookupLegacyData(System.Int32)">
            <summary>
            Looks up a block by legacy data value.
            </summary>
            <param name="data">The legacy data value.</param>
            <returns>The corresponding <see cref="T:OnixRuntime.Api.World.Block"/>, or null if not found.</returns>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.DefaultState">
            <summary>
            Gets the default state of the block.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Block.RawStates">
            <summary>
            Gets the available block states.
            You should not rely on those values other than the names.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.GetStateValue(System.String)">
            <summary>
            Gets a block state by name.
            </summary>
            <param name="name">The name of the state.</param>
            <returns>The value of that state or -1 if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.GetStateValue(System.Int32)">
            <summary>
            Gets a block state by ID.
            </summary>
            <param name="id">The ID of the state.</param>
            <returns>The value of that state or -1 if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.GetStateValue(OnixRuntime.Api.World.VanillaBlockStateType)">
            <summary>
            Gets a block state by ID.
            </summary>
            <param name="id">The ID of the state.</param>
            <returns>The value of that state or -1 if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.IsAir">
            <summary>
            Determines whether the block is air.
            </summary>
            <returns>True if the block is air; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.IsRequestPlaceholder">
            <summary>
            Determines whether the block is a request placeholder.
            </summary>
            <returns>True if the block is a request placeholder; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.Block"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the block.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Block.ToString">
            <summary>
            Returns a string representation of the block.
            </summary>
            <returns>A string containing the full name and ID of the block.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.BlockEntity">
            <summary>
            Represents a block entity in the world, providing access to its block, position, bounding box, and container.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockEntity.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.BlockEntity"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the block entity.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockEntity.TickCount">
            <summary>
            Gets the tick count for this block entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockEntity.Block">
            <summary>
            Gets the block associated with this block entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockEntity.Position">
            <summary>
            Gets the position of the block entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockEntity.BoundingBox">
            <summary>
            Gets the bounding box of the block entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockEntity.Container">
            <summary>
            Might not be up to date on the client, the server doesn't have to send the container content or updates to it.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockEntity.SaveToNbt">
            <summary>
            Saves the block entity to an NBT tag.
            </summary>
            <returns>The <see cref="T:OnixRuntime.Api.NBT.ObjectTag"/> representing the block entity's NBT data.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.BlockRegistry">
            <summary>
            Provides access to the block registry, allowing retrieval of blocks by name, state, runtime ID, or index.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockRegistry.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.BlockRegistry"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the block registry.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockRegistry.RuntimeBlocks">
            <summary>
            Gets the collection of all runtime blocks in the registry.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockRegistry.GetBlock(System.String,System.Int32)">
            <summary>
            Gets a block by its name and optional data value.
            </summary>
            <param name="name">The name of the block.</param>
            <param name="data">The data value of the block (default is 0).</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/>, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockRegistry.GetBlock(OnixRuntime.Api.NBT.ObjectTag)">
            <summary>
            Gets a block by its NBT state.
            </summary>
            <param name="state">The NBT state of the block.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/>, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockRegistry.GetBlockFromRuntimeId(System.UInt32)">
            <summary>
            Gets a block by its runtime ID.
            </summary>
            <param name="runtimeId">The runtime ID of the block.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/>, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockRegistry.GetBlockAtIndex(System.Int32)">
            <summary>
            Gets a block at the specified index in the registry.
            </summary>
            <param name="index">The index of the block.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/> at the specified index.</returns>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockRegistry.BlockCount">
            <summary>
            Gets the total number of blocks in the registry.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.VanillaBlockStateType">
            <summary>
            Represents the various block state types in the game but in an enum for convenience.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.BlockState">
            <summary>
            Represents a block state, providing access to its properties and NBT conversion.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockState.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.BlockState"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the block state.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.VariationCount">
            <summary>
            Gets the number of variations for this block state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.StartBit">
            <summary>
            Gets the start bit for this block state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.BitCount">
            <summary>
            Gets the number of bits used by this block state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.Mask">
            <summary>
            Gets the mask value for this block state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.IsInitialized">
            <summary>
            Gets a value indicating whether this block state is initialized.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.Name">
            <summary>
            Gets the name of the block state.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.BlockState.StateId">
            <summary>
            Gets the state ID of the block state.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.BlockState.ToNbt(System.Int32)">
            <summary>
            Converts the block state to an NBT tag for the specified value.
            </summary>
            <param name="value">The value to convert to NBT.</param>
            <returns>The <see cref="T:OnixRuntime.Api.NBT.ObjectTag"/> representing the block state as NBT.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.DimensionWeather">
            <summary>
            Represents the weather state of a dimension, including rain, lightning, and fog levels.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.CurrentTick">
            <summary>
            The current tick of the weather system.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.OldRainLevel">
            <summary>
            The previous rain level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.RainLevel">
            <summary>
            The current rain level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.TargetRainLevel">
            <summary>
            The target rain level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.OldLightningLevel">
            <summary>
            The previous lightning level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.LightningLevel">
            <summary>
            The current lightning level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.TargetLightningLevel">
            <summary>
            The target lightning level.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionWeather.FogLevel">
            <summary>
            The fog level.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.DimensionWeather.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.DimensionWeather"/> struct with default values.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.DimensionType">
            <summary>
            Specifies the type of dimension.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionType.Overworld">
            <summary>
            The Overworld.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionType.Nether">
             <summary>
            The Nether in Minecraft is a hostile, infernal alternate dimension distinct from the Overworld and the End. It is accessible only through portals constructed from obsidian blocks, which, when ignited, shimmer with a purple, swirling energy that bridges the two realms. Upon stepping through, players are transported into a place that is immediately alien, dangerous, and richly atmospheric, designed to evoke dread, peril, and mystery.
            Visually, the Nether is defined by its hellish color palette—deep reds, fiery oranges, smoldering blacks, and ominous purples. The air itself seems heavy and oppressive, filled with embers drifting lazily across the screen, constantly reminding the player that this is a world of fire and decay. The terrain is largely composed of Netherrack, a porous, blood-red stone that burns eternally once set aflame, providing the Nether with its signature infernal aesthetic. Scattered among the Netherrack are dangerous hazards such as lava oceans, massive pools that stretch endlessly, glowing orange seas of molten death. Lava flows here are faster and more lethal than in the Overworld, making careful movement essential to survival.
            The Nether has its own distinct biomes, each contributing to its diversity of danger and atmosphere. The Nether Wastes form the baseline environment, barren and monotonous stretches of Netherrack and lava lakes populated by hostile mobs such as Zombie Piglins, Ghasts, and Magma Cubes. The Crimson Forests erupt in haunting red hues, dominated by colossal crimson fungi, twisting vines, and dense vegetation, where the air itself feels thick and hostile. Here, piglins and hoglins roam—one intelligent, bartering and aggressive, the other brutish, charging, and dangerous. In stark contrast, the Warped Forests shimmer with a haunting teal-green glow, their warped fungi and vegetation forming one of the few relatively safe havens in the Nether. Endermen stalk here, tall and menacing, their otherworldly presence emphasizing the forest’s unsettling tranquility. Then there are the Basalt Deltas, chaotic volcanic regions of jagged basalt pillars and clouds of ash particles that hang perpetually in the air, populated by magma cubes that leap and divide endlessly. Finally, Soul Sand Valleys open into vast desolate expanses of blue flame and bone blocks, their atmosphere eerily silent but frequently pierced by the echoing cries of Ghasts, creating one of the most haunting landscapes in the game.
            The Nether is not merely aesthetic—it is filled with structures that carry gameplay and lore significance. Nether Fortresses are vast, labyrinthine structures built from dark nether bricks, populated by wither skeletons, blazes, and hidden treasures. These fortresses are essential for progression, as they contain blaze spawners and nether wart, two crucial ingredients for brewing potions and ultimately reaching the End. More recently introduced are the Bastion Remnants, imposing strongholds of blackstone where piglins and piglin brutes guard hordes of treasure. Their broken, ruinous architecture suggests a fallen civilization, hinting at deeper lore within Minecraft’s universe. Bastions reward the brave with loot ranging from gold blocks and enchanted gear to the rare and precious Pigstep music disc and Netherite-related materials.
            Speaking of Netherite, the Nether is home to one of the rarest and most coveted resources in the game: Ancient Debris. Hidden deep within its crust, Ancient Debris can be smelted into Netherite scraps, which, when combined with gold, produce Netherite ingots—the material required to forge the strongest weapons and armor in the game. Mining for this resource often means braving the dangers of lava-filled caverns, explosive strip-mining, or carefully planned bed detonations, reinforcing the idea that ultimate power in Minecraft demands braving ultimate peril.
            The Nether also has unique mechanics that distinguish it from other dimensions. Beds explode violently when attempted to be used, dealing massive damage and setting the area ablaze. Water cannot be placed, instantly evaporating upon contact, which forces players to rethink survival strategies that are second nature in the Overworld. Movement is also affected: distances in the Nether correspond to an 8:1 scale compared to the Overworld, making Nether travel an essential mechanic for fast transportation across vast stretches of the main world. Fire is more persistent, lava flows faster, and survival requires constant awareness of surroundings.
            The atmosphere of the Nether is oppressive and unnerving. Its soundscape is filled with echoing growls, eerie ambient noises, and the ever-present roar of fire and lava. Ghasts scream mournfully across lava seas, and the piglins’ guttural snorts emphasize the hostile nature of the realm. The fog is tinted with ominous shades depending on the biome, reducing visibility and adding to the sense of claustrophobic danger. The Nether feels timeless, a place where no natural day-night cycle exists—only the eternal flicker of firelight and the dull glow of molten rock.
            Despite its hostility, the Nether is central to progression and creativity in Minecraft. It provides ingredients for potions, access to quartz for redstone contraptions, glowstone for lighting, blackstone as a cobblestone substitute, and unique flora like warped stems and crimson wood for building aesthetics. Its hostile mobs—Piglins, Blazes, Wither Skeletons, Magma Cubes, and Ghasts—each drop unique items vital for gameplay. The Nether, therefore, represents both danger and opportunity, a place of high stakes and high rewards.
            Philosophically and thematically, the Nether can be seen as a manifestation of chaos, destruction, and raw elemental power. It represents Minecraft's take on a "hell" dimension without overt religious symbolism: a place of eternal flame, death, and decay, but also one of hidden riches and pathways to greater challenges. Its placement as the intermediary dimension—between the tranquil, living Overworld and the void-like finality of the End—cements its role as a crucible for testing a player's survival skills, resourcefulness, and bravery.
             </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.DimensionType.End">
            The End in Minecraft is the final frontier, the ultimate dimension that players reach at the culmination of their survival journey. It is a bleak, otherworldly realm of desolation, mystery, and finality, accessed only through the End Portal, which lies buried deep within a stronghold hidden in the Overworld. The very act of entering the End feels climactic: a ritual of finding Eyes of Ender, restoring a ruined portal frame, and stepping into the shimmering black void to face the game's greatest challenge.
            Atmosphere and Landscape
            Immediately upon arrival, the End exudes alien emptiness. Unlike the vibrant, colorful Overworld or the fiery, chaotic Nether, the End is defined by stark simplicity and haunting minimalism. The skies are eternally black, speckled faintly with static purple void patterns. The entire dimension floats suspended in a void of nothingness, a cosmic abyss with no sun, no stars, and no time. There is no day-night cycle here—only an eternal, unchanging stillness, which evokes a sense of finality and isolation.
            The End's terrain is composed primarily of End Stone, a pale yellow, almost sickly material with a cracked, cobbled texture. This ground stretches outward in large islands floating in the abyss. The central island is the primary arena of the Ender Dragon fight, a massive barren platform dotted with tall obsidian pillars. Beyond this lies the Outer End, accessible by gateways that spawn after the dragon's defeat, where vast archipelagos of floating islands stretch into the void. The void itself is an infinite nothingness; falling into it results in certain death, stripping the player of all belongings.
            The emptiness of the End is deliberate. Its barren landscapes and subdued color palette create a mood of unease, alien detachment, and an almost oppressive silence. Unlike the Nether's chaos, the End conveys a cold, cosmic emptiness, as if it were the edge of existence itself.
            The Ender Dragon and the Boss Battle
            At the heart of the End lies its central purpose: the Ender Dragon, Minecraft's original and iconic final boss. The dragon is a massive, winged beast with jet-black scales, glowing purple eyes, and a serpentine flight pattern. It soars above the central island, circling menacingly and occasionally diving at the player.
            Surrounding the arena are tall obsidian pillars topped with End Crystals, glowing constructs of glass and fire that heal the dragon when it is wounded. Players must carefully scale or destroy these crystals, often while being attacked by the dragon itself or swarmed by Endermen. The crystals create a dynamic challenge: without destroying them, the dragon is essentially immortal, forcing players to balance offense and defense.
            The battle itself is unlike anything else in Minecraft. The dragon breathes destructive purple fireballs, performs swooping melee attacks, and unleashes a lingering breath attack that poisons and corrodes the environment. Defeating it requires preparation, coordination, and persistence, making it the climactic trial of survival gameplay. Upon death, the dragon explodes in a dramatic shower of purple light and sound, leaving behind massive amounts of experience orbs and, most importantly, the Dragon Egg, a rare and symbolic trophy.
            Endermen and Inhabitants
            The End is home to its iconic denizens: Endermen. Tall, black, angular humanoids with glowing purple eyes, they embody the uncanny, their design both minimalist and unsettling. Endermen are neutral until provoked, triggered by direct eye contact or aggression. Once enraged, they emit a distorted shriek and teleport rapidly, striking from unexpected angles. Their teleportation creates chaos in combat, especially during the dragon battle, where dozens may spawn on the island simultaneously.
            Endermen pick up and place blocks, subtly altering the landscape, which adds to their strange, alien aura. In the Outer End, they are even more populous, often covering the islands in swarms, making travel treacherous.
            The Outer End: Exploration Beyond the Battle
            Defeating the dragon opens up a new chapter of exploration: the Outer End Islands. These faraway lands are accessible only through End Gateways, tiny floating portals encased in bedrock that appear after the dragon's death. Players use Ender Pearls or Elytra flight to enter them, discovering an entirely new environment.
            The Outer End expands the aesthetic of the End while introducing rare and valuable resources. Its islands are covered in the same End Stone, but here grow the bizarre and alien Chorus Plants, tall, branching flora that look like coral or crystal formations. Breaking them yields Chorus Fruit, which, when eaten, teleports the player randomly within a short range. Cooking it produces Popped Chorus Fruit, an ingredient essential for crafting End Rods (a light source) and Purpur Blocks, a distinct purple building material unique to the End.
            End Cities and Elytra
            Scattered across the Outer End are End Cities, towering structures built of purpur blocks and end stone bricks. These structures rise like alien skyscrapers, decorated with stair-like spires and branching towers. Within them dwell Shulkers, hostile box-like creatures that camouflage against the walls until they open to fire homing projectiles. Shulker bullets inflict the Levitation effect, causing players to float helplessly into the air, often leading to fall damage upon expiration.
            Loot within End Cities is among the most valuable in Minecraft: enchanted diamond gear, emeralds, and sometimes gold or iron. But the true prize lies in End Ships, floating structures often found near cities. Within the ship lies the Elytra, a pair of wings that grants players the power of flight. Elytra fundamentally changes gameplay, opening up new ways of exploration, combat, and travel. End Ships also contain brewing stands with potions and the coveted Dragon Head, another rare trophy.
            Mechanics and Themes
            The End enforces unique gameplay rules. Beds explode violently when placed, similar to the Nether, preventing players from resetting spawn points. Respawn is only possible with a special Respawn Anchor in the Nether, meaning death in the End usually returns the player to their last Overworld spawn.
            Philosophically, the End represents closure and transcendence. It is the final destination of a player's journey: first they master the Overworld, then conquer the Nether's chaos, and finally ascend into the void to face ultimate challenge and reward. Its themes of alien desolation, emptiness, and existential isolation are reflected in its design. Where the Nether is chaos and destruction, the End is silence and finality. The dragon represents the final trial, and the Elytra symbolizes liberation—an ascension beyond survival into freedom.
            Symbolism
            The End may be seen as the edge of the universe, a liminal space between existence and nothingness. Its bleak terrain and sparse inhabitants evoke a cosmic wasteland, yet it is also the source of ultimate rewards—flight, end-game gear, and strange resources unseen anywhere else. Thematically, it mirrors the hero's journey: overcoming the darkest trial to emerge transformed, stronger, and freer.
        </member>
        <member name="T:OnixRuntime.Api.World.Dimension">
            <summary>
            Represents a dimension in the world, providing access to its type, name, world, blocks, chunks, and weather.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.Id">
            <summary>
            Gets the type of the dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.Name">
            <summary>
            Gets the name of the dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.World">
            <summary>
            Gets the runtime world associated with this dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.Region">
            <summary>
            Gets the world blocks for this dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.WorldChunks">
            <summary>
            Gets the world chunks for this dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.Weather">
            <summary>
            Gets the current weather state for this dimension.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Dimension.NormalizedTime">
            <summary>
            Gets the normalized time in the dimension from 0-1. There are 24000 ticks in a day.
            Here are some numbers using the time set command.
            midnight is 0
            sunrise is 0.241
            day is 0.328
            noon is 0.5
            sunset is 0.716
            night is 0.76
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Dimension.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.Dimension"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the dimension.</param>
        </member>
        <member name="T:OnixRuntime.Api.World.OverworldDimension">
            <summary>
            Represents the Overworld dimension.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.OverworldDimension.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.OverworldDimension"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the dimension.</param>
        </member>
        <member name="T:OnixRuntime.Api.World.NetherDimension">
            <summary>
            Represents the Nether dimension.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.NetherDimension.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.NetherDimension"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the dimension.</param>
        </member>
        <member name="T:OnixRuntime.Api.World.EndDimension">
            <summary>
            Represents the End dimension.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.EndDimension.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.EndDimension"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the dimension.</param>
        </member>
        <member name="T:OnixRuntime.Api.World.BlockFace">
            <summary>
            Specifies the face of a block that was hit by a raycast.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.RaycastResultType">
            <summary>
            Specifies the type of result returned by a raycast operation.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.RaycastResult">
            <summary>
            Represents the result of a raycast operation, including hit type, position, face, and entity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Type">
            <summary>
            Gets or sets the type of the raycast result.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Direction">
            <summary>
            Gets or sets the direction of the raycast.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Origin">
            <summary>
            Gets or sets the origin of the raycast.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Face">
            <summary>
            Gets or sets the face of the block that was hit.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.BlockPosition">
            <summary>
            Gets or sets the block position that was hit.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.HitPosition">
            <summary>
            Gets or sets the hit position in the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Entity">
            <summary>
            Gets or sets the entity that was hit by the raycast, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Mob">
            <summary>
            Gets the mob that was hit by the raycast, if any.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RaycastResult.Player">
            <summary>
            Gets the player that was hit by the raycast, if any.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.RaycastResult.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.RaycastResult"/> class from a pointer.
            </summary>
            <param name="ptr">The pointer to the raycast result.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.RaycastResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.RaycastResult"/> class.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.RaycastResult.Clone">
            <summary>
            Creates a deep copy of this <see cref="T:OnixRuntime.Api.World.RaycastResult"/>.
            </summary>
            <returns>A new <see cref="T:OnixRuntime.Api.World.RaycastResult"/> with the same values.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.RaycastResult.ToString">
            <summary>
            Returns a string representation of the raycast result.
            </summary>
            <returns>A string describing the raycast result.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.Difficulty">
            <summary>
            Specifies the difficulty level of the world.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Difficulty.Peaceful">
            <summary>
            Peaceful, no hunger, hostiles mobs do not spawn, neutral mobs don't fight back.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Difficulty.Easy">
            <summary>
            The easy difficulty of the game.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Difficulty.Normal">
            <summary>
            The normal difficulty of the game.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Difficulty.Hard">
            <summary>
            The hard difficulty of the game. (which reminds me, you just lost the game.)
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.RuntimeWorld">
            <summary>
            Represents a runtime world, providing access to world properties, players, entities, registries, and utility methods.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.Name">
            <summary>
            Gets the name of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.ProtocolVersion">
            <summary>
            Gets the protocol version of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.CurrentTick">
            <summary>
            Gets the current tick of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.CurrentTime">
            <summary>
            Gets the current time of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.ServerTickRange">
            <summary>
            Gets the server tick range.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.NetherScale">
            <summary>
            Gets the nether scale value.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.Difficulty">
            <summary>
            Gets the difficulty of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.FlatWorldOptions">
            <summary>
            The json string of the flat world options used to create this world, right now it is not serialized or deserialized, it is just a string with the default
            but if they ever decide to implement it properly then it could be more useful
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.CommandsEnabled">
            <summary>
            Gets a value indicating whether commands are enabled in the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.IsHardcore">
            <summary>
            Gets a value indicating whether this world is in hardcore.
            Note that you can set this freely on server, to set it on the client you need trust, which, if you can set it from the server, you should be trusted.
            This will do default to false on versions without hardcore mode and setting will do nothing.
            </summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">If on the client and not trusted</exception>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.IsClientSide">
            <summary>
            Indicates whether this world instance is client-side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.SpawnPosition">
            <summary>
            Gets the spawn position of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.Seed">
            <summary>
            Gets the world seed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.DefaultGameMode">
            <summary>
            Gets the default game type for the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.ItemRegistry">
            <summary>
            Gets the item registry for the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.BlockRegistry">
            <summary>
            Gets the block registry for the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.ServerConnectedPlayers">
            <summary>
            Gets the server connected players in the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.WorldIdentifier">
            <summary>
            This is not necessarily unique, in vanilla it is the name of the world folder, servers can send anything, on realms it generally just says "world"
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.Scoreboard">
            <summary>
            Gets the scoreboard for the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.Players">
            <summary>Gets all the players in the world. Requires trust on the client side.</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.ServerPlayers">
            <summary>Gets all the server players in the world.</summary>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.Entities">
            <summary>Gets all entities including players in the world. Requires trust on the client side.</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="P:OnixRuntime.Api.World.RuntimeWorld.EntitiesWithoutPlayers">
            <summary>Gets all entities excluding players in the world. Requires trust on the client side.</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.World.RuntimeWorld.GetEntityByUniqueId(System.UInt64)">
            <summary>Gets the entity with the specified unique id. Requires trust on the client side.</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.World.RuntimeWorld.GetEntityByRuntimeId(System.UInt64)">
            <summary>Gets the entity with the specified runtime id. Requires trust on the client side.</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.World.RuntimeWorld.GetPlayerByXuid(System.String)">
            <summary>Gets the player with the specified xuid. Requires trust on the client side.</summary>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.World.RuntimeWorld.GetServerPlayerByXuid(System.String)">
            <summary>Gets the server player with the specified xuid.</summary>
        </member>
        <member name="M:OnixRuntime.Api.World.RuntimeWorld.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.RuntimeWorld"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the runtime world.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.RuntimeWorld.IsSlimeChunk(OnixRuntime.Api.Maths.ChunkPos)">
            <summary>
            Determines whether the specified chunk position is a slime chunk.
            </summary>
            <param name="pos">The chunk position to check.</param>
            <returns>True if the chunk is a slime chunk; otherwise, false.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation">
            <summary>
            Specifies the operation to perform on a scoreboard score.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.Set">
            <summary>
            Sets the score.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.Add">
            <summary>
            Adds to the score.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.Subtract">
            <summary>
            Subtracts from the score.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.Min">
            <summary>
            Gets the minimum between the value and the score.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation.Max">
            <summary>
            Gets the maximum between the value and the score.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.Scoreboard">
            <summary>
            Represents a scoreboard, providing access to objectives, display objectives, and score manipulation methods.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.Scoreboards.Scoreboard"/> class.
            </summary>
            <param name="currentMemoryAddress">The memory address of the scoreboard.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.Scoreboard.Objectives">
            <summary>
            Gets the objectives in the scoreboard.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.Scoreboard.DisplayObjectives">
            <summary>
            Gets the display objectives in the scoreboard.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetFakePlayerIdentity(System.String)">
            <summary>
            Gets the identity for a fake player by name.
            </summary>
            <param name="name">The name of the fake player.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity"/> for the fake player, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetEntityIdentity(System.UInt64)">
            <summary>
            Gets the identity for an entity by unique ID.
            </summary>
            <param name="entityUniqueId">The unique ID of the entity.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity"/> for the entity, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetPlayerIdentity(System.UInt64)">
            <summary>
            Gets the identity for a player by unique ID.
            </summary>
            <param name="playerUniqueId">The unique ID of the player.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity"/> for the player, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetEntityIdentity(OnixRuntime.Api.Entities.Entity)">
            <summary>
            Gets the identity for an entity or player.
            </summary>
            <param name="entityOrPlayer">The entity or player.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity"/> for the entity or player, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetObjective(System.String)">
            <summary>
            Gets a scoreboard objective by name.
            </summary>
            <param name="name">The name of the objective.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective"/>, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetDisplayObjective(System.String)">
            <summary>
            Gets a display objective by position.
            </summary>
            <param name="position">The display position (e.g., sidebar, list, belowname).</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective"/>, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetDisplayObjective(OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition)">
            <summary>
            Gets a display objective by position enum.
            </summary>
            <param name="position">The display position as an enum.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective"/>, or null if not found.</returns>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.Scoreboard.SidebarObjective">
            <summary>
            Gets the sidebar display objective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.Scoreboard.ListObjective">
            <summary>
            Gets the list display objective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.Scoreboard.BelowNameObjective">
            <summary>
            Gets the belowname display objective.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearDisplayObjective(System.String)">
            <summary>
            Clears the display objective at the specified position.
            </summary>
            <param name="position">The display position.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearDisplayObjective(OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition)">
            <summary>
            Clears the display objective at the specified position enum.
            </summary>
            <param name="position">The display position as an enum.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetDisplayObjective(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder)">
            <summary>
            Sets the display objective at the specified position.
            </summary>
            <param name="objective">The objective to display.</param>
            <param name="position">The display position.</param>
            <param name="sortOrder">The sort order for the objective.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetDisplayObjective(System.String,System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder)">
            <summary>
            Sets the display objective by objective name and position.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="position">The display position.</param>
            <param name="sortOrder">The sort order for the objective.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetDisplayObjective(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition,OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder)">
            <summary>
            Sets the display objective by objective name and position enum.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="position">The display position as an enum.</param>
            <param name="sortOrder">The sort order for the objective.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetDisplayObjective(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition,OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder)">
            <summary>
            Sets the display objective by objective and position enum.
            </summary>
            <param name="objective">The objective to display.</param>
            <param name="position">The display position as an enum.</param>
            <param name="sortOrder">The sort order for the objective.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity)">
            <summary>
            Gets the score for the specified objective and identity.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <returns>The score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetScore(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity)">
            <summary>
            Gets the score for the specified objective name and identity.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <returns>The score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetScore(System.String,System.String)">
            <summary>
            Gets the score for the specified objective name and fake player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <returns>The score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String)">
            <summary>
            Gets the score for the specified objective and fake player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <returns>The score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.Entities.Entity)">
            <summary>
            Gets the score for the specified objective and entity or player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <returns>The score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.GetScore(System.String,OnixRuntime.Api.Entities.Entity)">
            <summary>
            Gets the score for the specified objective name and entity or player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <returns>The score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ModifyScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation,System.Int32)">
            <summary>
            Modifies the score for the specified objective and identity using the given operation and value.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="operation">The score operation.</param>
            <param name="value">The value to use in the operation.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ModifyScore(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation,System.Int32)">
            <summary>
            Modifies the score for the specified objective name and identity.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="operation">The score operation.</param>
            <param name="value">The value to use in the operation.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ModifyScore(System.String,System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation,System.Int32)">
            <summary>
            Modifies the score for the specified objective name and fake player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="operation">The score operation.</param>
            <param name="value">The value to use in the operation.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ModifyScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation,System.Int32)">
            <summary>
            Modifies the score for the specified objective and fake player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="operation">The score operation.</param>
            <param name="value">The value to use in the operation.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ModifyScore(System.String,OnixRuntime.Api.Entities.Entity,OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation,System.Int32)">
            <summary>
            Modifies the score for the specified objective name and entity or player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="operation">The score operation.</param>
            <param name="value">The value to use in the operation.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ModifyScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.Entities.Entity,OnixRuntime.Api.World.Scoreboards.ScoreboardScoreOperation,System.Int32)">
            <summary>
            Modifies the score for the specified objective and entity or player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="operation">The score operation.</param>
            <param name="value">The value to use in the operation.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.AddScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,System.Int32)">
            <summary>
            Adds to the score for the specified objective and identity.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="value">The value to add.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.AddScore(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,System.Int32)">
            <summary>
            Adds to the score for the specified objective name and identity.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="value">The value to add.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.AddScore(System.String,System.String,System.Int32)">
            <summary>
            Adds to the score for the specified objective name and fake player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="value">The value to add.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.AddScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String,System.Int32)">
            <summary>
            Adds to the score for the specified objective and fake player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="value">The value to add.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.AddScore(System.String,OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Adds to the score for the specified objective name and entity or player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="value">The value to add.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.AddScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Adds to the score for the specified objective and entity or player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="value">The value to add.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SubtractScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,System.Int32)">
            <summary>
            Subtracts from the score for the specified objective and identity.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="value">The value to subtract.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SubtractScore(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,System.Int32)">
            <summary>
            Subtracts from the score for the specified objective name and identity.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="value">The value to subtract.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SubtractScore(System.String,System.String,System.Int32)">
            <summary>
            Subtracts from the score for the specified objective name and fake player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="value">The value to subtract.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SubtractScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String,System.Int32)">
            <summary>
            Subtracts from the score for the specified objective and fake player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="value">The value to subtract.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SubtractScore(System.String,OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Subtracts from the score for the specified objective name and entity or player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="value">The value to subtract.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SubtractScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Subtracts from the score for the specified objective and entity or player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="value">The value to subtract.</param>
            <returns>The resulting score, or null if not found or invalid.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,System.Int32)">
            <summary>
            Sets the score for the specified objective and identity.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetScore(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity,System.Int32)">
            <summary>
            Sets the score for the specified objective name and identity.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="identity">The scoreboard identity.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetScore(System.String,System.String,System.Int32)">
            <summary>
            Sets the score for the specified objective name and fake player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String,System.Int32)">
            <summary>
            Sets the score for the specified objective and fake player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="fakePlayer">The fake player name.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetScore(System.String,OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Sets the score for the specified objective name and entity or player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.SetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.Entities.Entity,System.Int32)">
            <summary>
            Sets the score for the specified objective and entity or player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity)">
            <summary>
            Clears the score for the specified objective and identity.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="identity">The scoreboard identity.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearScore(System.String,OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity)">
            <summary>
            Clears the score for the specified objective name and identity.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="identity">The scoreboard identity.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearScore(System.String,System.String)">
            <summary>
            Clears the score for the specified objective name and fake player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="fakePlayer">The fake player name.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,System.String)">
            <summary>
            Clears the score for the specified objective and fake player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="fakePlayer">The fake player name.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearScore(System.String,OnixRuntime.Api.Entities.Entity)">
            <summary>
            Clears the score for the specified objective name and entity or player.
            </summary>
            <param name="objectiveName">The name of the objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.Scoreboard.ClearScore(OnixRuntime.Api.World.Scoreboards.ScoreboardObjective,OnixRuntime.Api.Entities.Entity)">
            <summary>
            Clears the score for the specified objective and entity or player.
            </summary>
            <param name="objective">The scoreboard objective.</param>
            <param name="entityOrPlayer">The entity or player.</param>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity">
            <summary>
            Represents a scoreboard identity, which can be a player, entity, or fake player (just a name).
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType">
            <summary>
            Represents the type of identity this is, such as Player, Entity, or FakePlayer (just a name).
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType.Invalid">
            <summary>
            Invalid identity type.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType.Player">
            <summary>
            Player identity type.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType.Entity">
            <summary>
            Entity identity type.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IdentityType.FakePlayer">
            <summary>
            Fake player identity type.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.Type">
            <summary>
            Gets the type of the identity.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.FakePlayerName">
            <summary>
            Gets the fake player name if this identity is a fake player; otherwise, null.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.EntityUniqueId">
            <summary>
            Gets the unique ID if this identity is an entity or player; otherwise, null.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.PlayerUniqueId">
            <summary>
            Gets the player unique ID if this identity is an entity or player; otherwise, null.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IsEntityOrPlayer">
            <summary>
            Gets a value indicating whether this identity is an entity or player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.IsHiddenFakePlayer">
            <summary>
            Gets a value indicating whether this identity is a hidden fake player.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.ScoreboardId">
            <summary>
            Gets the scoreboard ID for this identity.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.GetEntity(OnixRuntime.Api.World.RuntimeWorld)">
            <summary>
            Gets the entity associated with this identity from the specified world.
            </summary>
            <param name="world">The runtime world.</param>
            <returns>The entity, or null if not found or not an entity/player.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.GetPlayer(OnixRuntime.Api.World.RuntimeWorld)">
            <summary>
            Gets the player associated with this identity from the specified world.
            </summary>
            <param name="world">The runtime world.</param>
            <returns>The player, or null if not found or not a player.</returns>
            <exception cref="T:OnixRuntime.Api.Errors.InsufficientTrustException">Thrown when the user lacks the trust level necessary for this.</exception>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.GetServerPlayer(OnixRuntime.Api.World.RuntimeWorld)">
            <summary>
            Gets the server player associated with this identity from the specified world.
            </summary>
            <param name="world">The runtime world.</param>
            <returns>The server player, or null if not found or not a server player.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.GetDisplayName(OnixRuntime.Api.World.RuntimeWorld,System.Boolean)">
            <summary>
            Gets the display name for this identity in the specified world.
            </summary>
            <param name="world">The runtime world.</param>
            <param name="includeEntityNametag">By default it just puts the entity id with no effort.</param>
            <returns>The display name for the identity.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveRenderType">
            <summary>
            Specifies the render type for a scoreboard objective.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveRenderType.Integer">
            <summary>
            Integer render type.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveRenderType.Hearts">
            <summary>
            Hearts render type.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective">
            <summary>
            Represents a scoreboard objective, providing access to its properties and scores.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective"/> class.
            </summary>
            <param name="currentMemoryAddress">The memory address of the scoreboard objective.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.Scores">
            <summary>
            Gets the scores for this objective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.Name">
            <summary>
            Gets the name of the objective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.DisplayName">
            <summary>
            Gets the display name of the objective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.IsReadOnly">
            <summary>
            Gets a value indicating whether the objective is read-only.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.CriteriaName">
            <summary>
            Gets the criteria name for the objective.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.RenderType">
            <summary>
            Gets the render type for the objective.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.GetScore(OnixRuntime.Api.World.Scoreboards.ScoreboardIdentity)">
            <summary>
            Gets the score for the specified identity.
            </summary>
            <param name="identity">The scoreboard identity.</param>
            <returns>The score for the identity, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardObjective.ToString">
            <summary>
            Returns a string representation of the scoreboard objective.
            </summary>
            <returns>A string containing the name and display name.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder">
            <summary>
            Specifies the sort order for a scoreboard objective.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder.Ascending">
            <summary>
            Ascending sort order.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder.Descending">
            <summary>
            Descending sort order.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition">
            <summary>
            Specifies the display position for a scoreboard objective.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition.Sidebar">
            <summary>
            Sidebar display position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition.List">
            <summary>
            List display position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjectivePosition.BelowName">
            <summary>
            BelowName display position.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective">
            <summary>
            Represents a display objective in the scoreboard, providing access to sort order and ordered scores.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective"/> class.
            </summary>
            <param name="currentMemoryAddress">The memory address of the display objective.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective.SortOrder">
            <summary>
            Gets the sort order for the display objective.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective.GetOrderedScores">
            <summary>
            Gets the ordered scores for the display objective using the default sort order.
            </summary>
            <returns>A list of key-value pairs of scoreboard identities and their scores, ordered by the sort order.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.Scoreboards.ScoreboardDisplayObjective.GetOrderedScores(OnixRuntime.Api.World.Scoreboards.ScoreboardObjectiveSortOrder)">
            <summary>
            Gets the ordered scores for the display objective using the specified sort order.
            </summary>
            <param name="overridenSortOrder">The sort order to use.</param>
            <returns>A list of key-value pairs of scoreboard identities and their scores, ordered by the specified sort order.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.BrightnessLevels">
            <summary>
            Represents the brightness levels at a block position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.BrightnessLevels.SkyLight">
            <summary>
            Value between 0 and 15 representing how much sun/skylight is hitting the block.
            Note: This value will not adapt with time of day.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.BrightnessLevels.BlockLight">
            <summary>
            Value between 0 and 15 representing how much block light (things like torches) is hitting the block.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.BiomeTintColors">
            <summary>
            Represents the biome tint colors at a block position.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.BiomeTintColors.WaterColor">
            <summary>
            The water color for the biome.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.BiomeTintColors.GrassColor">
            <summary>
            The grass color for the biome.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldBlocks">
            <summary>
            Provides access to world blocks, including block retrieval, setting, biome, lighting, collisions, and raycasting.
            You only need to dispose of this when you create your own. Note that you should probably create it on the thread you plan on using it on.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldBlocks.BlockUpdateType">
            <summary>
            Specifies the type of block update to perform.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldBlocks.Dimension">
            <summary>
            Gets the dimension associated with these world blocks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldBlocks.World">
            <summary>
            Gets the runtime world associated with these world blocks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldBlocks.MinHeight">
            <summary>
            Gets the minimum height of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldBlocks.MaxHeight">
            <summary>
            Gets the maximum height of the world.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldBlocks.IsClientSide">
            <summary>
            Tells you if this instance is for the client side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldBlocks.WorldChunks">
            <summary>
            Going this path could lead to instabilities and crashes.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> class with the specified memory address.
            </summary>
            <param name="currentMemoryAddress">The memory address of the world blocks.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBlock(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Gets the block at the specified world position.
            </summary>
            <param name="worldPosition">The world position of the block.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/> at the specified position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the block at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/> at the specified coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBlockEntity(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Gets the block entity at the specified world position.
            </summary>
            <param name="worldPosition">The world position of the block entity.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.BlockEntity"/> at the specified position, or null if none exists.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBlockEntity(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the block entity at the specified coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.BlockEntity"/> at the specified coordinates, or null if none exists.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.SetBlock(OnixRuntime.Api.Maths.BlockPos,OnixRuntime.Api.World.Block,OnixRuntime.Api.World.WorldBlocks.BlockUpdateType)">
            <summary>
            Sets the block at the specified world position.
            </summary>
            <param name="worldPosition">The world position to set the block at.</param>
            <param name="block">The block to set.</param>
            <param name="updateType">The type of block update to perform.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBiome(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Gets the biome at the specified world position.
            </summary>
            <param name="worldPosition">The world position to get the biome from.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Biome"/> at the specified position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetChunk(OnixRuntime.Api.Maths.ChunkPos,System.Boolean)">
            <summary>
            Accessing chunk data could be unstable and lead to crashes if the chunk were to unload before you finish using it.
            </summary>
            <param name="chunkPosition">The position of the chunk to get.</param>
            <param name="mustBeLoaded">If the chunk has to be fully loaded and ready to obtain it.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.WorldChunk"/> at the specified position, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBrightness(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Gets the brightness levels at the specified world position.
            </summary>
            <param name="worldPosition">The world position to get brightness from.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.BrightnessLevels"/> at the specified position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetBiomeTintedColors(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Gets the biome tint colors at the specified world position.
            </summary>
            <param name="worldPosition">The world position to get biome tint colors from.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.BiomeTintColors"/> at the specified position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetMapColor(OnixRuntime.Api.Maths.BlockPos)">
            <summary>
            Gets the map color at the specified world position.
            </summary>
            <param name="worldPosition">The world position to get the map color from.</param>
            <returns>The <see cref="T:OnixRuntime.Api.Maths.ColorF"/> representing the map color at the specified position.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.Raycast(OnixRuntime.Api.Maths.Vec3,OnixRuntime.Api.Maths.Vec3,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Performs a raycast in the world.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="target">The target of the ray.</param>
            <param name="solidBlocksOnly">Whether to only hit solid blocks.</param>
            <param name="hitLiquid">Whether to hit liquid blocks.</param>
            <param name="fullBlocksOnly">Whether to only hit full blocks.</param>
            <param name="ignoreBorderBlocks">Whether to ignore border blocks.</param>
            <param name="maxDistance">The maximum distance for the raycast.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.RaycastResult"/> of the raycast.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetCollisions(OnixRuntime.Api.Maths.BoundingBox,System.Boolean)">
            <summary>
            Gets the collision bounding boxes in the specified area.
            The positions returned are in world coordinates.
            </summary>
            <param name="areaToCheck">The area to check for collisions.</param>
            <param name="includeUnloadedChunks">Whether to include unloaded chunks.</param>
            <returns>An array of <see cref="T:OnixRuntime.Api.Maths.BoundingBox"/> representing the collisions.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.GetCollisions(OnixRuntime.Api.Maths.BlockPos,System.Boolean)">
            <summary>
            Gets the collision bounding boxes at the specified block position.
            The positions returned are in world coordinates.
            </summary>
            <param name="position">The block position to check for collisions.</param>
            <param name="includeUnloadedChunks">Whether to include unloaded chunks.</param>
            <returns>An array of <see cref="T:OnixRuntime.Api.Maths.BoundingBox"/> representing the collisions.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.CreateFromDimension(OnixRuntime.Api.World.Dimension,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of world <see cref="T:OnixRuntime.Api.World.WorldBlocks"/>.
            You should call this on the thread you plan on using it on.
            Which might make this method difficult to utilize since you can't access a lot of those objects if not in the main thread.
            Anything regarding this method or using its result might be unstable if you don't use it exactly how the game approves.
            You should keep the default parameters for most cases, don't forget to <see cref="M:OnixRuntime.Api.World.WorldBlocks.Dispose"/> it when you are done using it.
            MAKE SURE TO PUT try-catches around your code if you do this in a new threads, uncaught exceptions will crash the whole game.
            </summary>
            <param name="dimension">The dimension to gather the information about.</param>
            <param name="isPublic">If this source should announce itself for other event listeners.</param>
            <param name="allowUnpopulatedChunks">If chunks that aren't populated allowed.</param>
            <param name="allowClientTickingChanges">If changes made by the client, maybe as a prediction are accepted. Or maybe you cant make changes on client ticks, not sure.</param>
            <returns>The new world blocks, or null if it failed to make one.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.CreateFromWorldChunks(OnixRuntime.Api.World.WorldChunks,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of world <see cref="T:OnixRuntime.Api.World.WorldBlocks"/>.
            You should call this on the thread you plan on using it on.
            Which might make this method difficult to utilize since you can't access a lot of those objects if not in the main thread.
            Anything regarding this method or using its result might be unstable if you don't use it exactly how the game approves.
            You should keep the default parameters for most cases, don't forget to <see cref="M:OnixRuntime.Api.World.WorldBlocks.Dispose"/> it when you are done using it.
            MAKE SURE TO PUT try-catches around your code if you do this in a new threads, uncaught exceptions will crash the whole game.
            </summary>
            <param name="chunks">The world chunks to gather the information about.</param>
            <param name="isPublic">If this source should announce itself for other event listeners.</param>
            <param name="allowUnpopulatedChunks">If chunks that aren't populated allowed.</param>
            <param name="allowClientTickingChanges">If changes made by the client, maybe as a prediction are accepted. Or maybe you cant make changes on client ticks, not sure.</param>
            <returns>The new world blocks, or null if it failed to make one.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.CreateFromOther(OnixRuntime.Api.World.WorldBlocks,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of world <see cref="T:OnixRuntime.Api.World.WorldBlocks"/>.
            You should call this on the thread you plan on using it on.
            Which might make this method difficult to utilize since you can't access a lot of those objects if not in the main thread.
            Anything regarding this method or using its result might be unstable if you don't use it exactly how the game approves.
            You should keep the default parameters for most cases, don't forget to <see cref="M:OnixRuntime.Api.World.WorldBlocks.Dispose"/> it when you are done using it.
            MAKE SURE TO PUT try-catches around your code if you do this in a new threads, uncaught exceptions will crash the whole game.
            </summary>
            <param name="region">The other <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> to gather the information about.</param>
            <param name="isPublic">If this source should announce itself for other event listeners.</param>
            <param name="allowUnpopulatedChunks">If chunks that aren't populated allowed.</param>
            <param name="allowClientTickingChanges">If changes made by the client, maybe as a prediction are accepted. Or maybe you cant make changes on client ticks, not sure.</param>
            <returns>The new world blocks, or null if it failed to make one.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.CreateForClient(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of world <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> for the client.
            You should call this on the thread you plan on using it on.
            Anything regarding this method or using its result might be unstable if you don't use it exactly how the game approves.
            You should keep the default parameters for most cases, don't forget to <see cref="M:OnixRuntime.Api.World.WorldBlocks.Dispose"/> it when you are done using it.
            MAKE SURE TO PUT try-catches around your code if you do this in a new threads, uncaught exceptions will crash the whole game.
            </summary>
            <param name="isPublic">If this source should announce itself for other event listeners.</param>
            <param name="allowUnpopulatedChunks">If chunks that aren't populated allowed.</param>
            <param name="allowClientTickingChanges">If changes made by the client, maybe as a prediction are accepted. Or maybe you cant make changes on client ticks, not sure.</param>
            <returns>The new world blocks, or null if it failed to make one.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.CreateForServer(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of world <see cref="T:OnixRuntime.Api.World.WorldBlocks"/> for the server.
            You should call this on the thread you plan on using it on.
            Anything regarding this method or using its result might be unstable if you don't use it exactly how the game approves.
            You should keep the default parameters for most cases, don't forget to <see cref="M:OnixRuntime.Api.World.WorldBlocks.Dispose"/> it when you are done using it.
            MAKE SURE TO PUT try-catches around your code if you do this in a new threads, uncaught exceptions will crash the whole game.
            </summary>
            <param name="isPublic">If this source should announce itself for other event listeners.</param>
            <param name="allowUnpopulatedChunks">If chunks that aren't populated allowed.</param>
            <param name="allowClientTickingChanges">If changes made by the client, maybe as a prediction are accepted. Or maybe you cant make changes on client ticks, not sure.</param>
            <returns>The new world blocks, or null if it failed to make one.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.Finalize">
            <summary>
            Disposes the Worldblocks instance if it has been made by the user.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldBlocks.Dispose">
            <summary>
            Disposes of the instance, releasing any unmanaged resources.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldChunk">
            <summary>
            Represents a chunk in the world, providing access to its properties, state, and block data.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldChunk.ChunkState">
            <summary>
            Specifies the state of a chunk.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.Unloaded">
            <summary>
            When the chunk is not loaded.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.Generating">
            <summary>
            When the chunk is being generated.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.Generated">
            <summary>
            When the chunk has been generated.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.PostProcessing">
            <summary>
            When the chunk is being post-processed.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.PostProcessed">
            <summary>
            When the chunk has been post-processed.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.CheckingForReplacementData">
            <summary>
            When the chunk is checking for replacement data.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.NeedsLighting">
            <summary>
            When the chunk needs lighting.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.Lighting">
            <summary>
            When the chunk is being lit.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.LightingFinished">
            <summary>
            When the chunk has been lit.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.ChunkState.Loaded">
            <summary>
            When the chunk is fully loaded.
            </summary>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldChunk.FoundBlock">
            <summary>
            Represents a block found in the chunk using FindBlock.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.FoundBlock.Position">
            <summary>
            The position of the block in the world.
            </summary>
        </member>
        <member name="F:OnixRuntime.Api.World.WorldChunk.FoundBlock.Data">
            <summary>
            The block's data value, what <see cref="T:OnixRuntime.Api.World.Block"/>.Data would give you.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.FoundBlock.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.FoundBlock.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.FoundBlock.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.IsClientSide">
            <summary>
            Indicates whether this chunk is on the client side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.Dimension">
            <summary>
            Gets the dimension associated with this chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.World">
            <summary>
            Gets the runtime world associated with this chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.Position">
            <summary>
            Gets the chunk position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.WorldPosMax">
            <summary>
            Gets the maximum world position of the chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.WorldPosMin">
            <summary>
            Gets the minimum world position of the chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.LoadState">
            <summary>
            Gets the current load state of the chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.LastTick">
            <summary>
            Gets the last tick value for the chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.MinHeight">
            <summary>
            Gets the minimum height of the chunk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunk.MaxHeight">
            <summary>
            Gets the maximum height of the chunk.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.WorldChunk"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the chunk.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.GetRainHeightAt(System.Int32,System.Int32)">
            <summary>
            Gets the rain height at the specified relative coordinates in the chunk.
            </summary>
            <param name="relativeX">The relative X coordinate in the chunk.</param>
            <param name="relativeZ">The relative Z coordinate in the chunk.</param>
            <returns>The rain height at the specified coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.GetHeightAt(System.Int32,System.Int32)">
            <summary>
            Gets the height at the specified relative coordinates in the chunk.
            </summary>
            <param name="relativeX">The relative X coordinate in the chunk.</param>
            <param name="relativeZ">The relative Z coordinate in the chunk.</param>
            <returns>The height at the specified coordinates.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the block at the specified coordinates within the chunk.
            </summary>
            <param name="inChunkX">The X coordinate within the chunk.</param>
            <param name="inChunkY">The Y coordinate within the chunk.</param>
            <param name="inChunkZ">The Z coordinate within the chunk.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.Block"/> at the specified coordinates, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunk.FindBlocks(OnixRuntime.Api.World.Block,System.Boolean)">
            <summary>
            Finds every position/instances of that block in the chunk.
            </summary>
            <param name="block">The block to search for.</param>
            <param name="discriminateState">True if only that state/data of the block will be considered the same blocks, false if any state/data of that block is fine.</param>
            <returns>The list of blocks it found. This has the Data and it's position.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldChunks">
            <summary>
            Represents a collection of world chunks, providing access to chunk positions, dimension, world, and chunk retrieval.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunks.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.WorldChunks"/> class with the specified pointer.
            </summary>
            <param name="ptr">The pointer to the world chunks.</param>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunks.IsClientSide">
            <summary>
            Indicates whether this instance is on the client side.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunks.ChunkPositions">
            <summary>
            Note that this may contain chunks that are no longer valid or not loaded.
            You should use GetChunk to get only valid/loaded chunks or the IEnumerable
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunks.AllChunks">
            <summary>
            Gets an enumerator that iterates through all world chunks.
            INCLUDING NON LOADED CHUNKS. Either check and know what you're doing or use <see cref="P:OnixRuntime.Api.World.WorldChunks.LoadedChunks"/>
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunks.LoadedChunks">
            <summary>
            Gets an enumerator that iterates through all loaded world chunks.
            Note that you can iterate the <see cref="T:OnixRuntime.Api.World.WorldChunks"/> and get the same result.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunks.Dimension">
            <summary>
            Gets the dimension associated with these world chunks.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunks.World">
            <summary>
            Gets the runtime world associated with these world chunks.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunks.GetChunk(OnixRuntime.Api.Maths.ChunkPos,System.Boolean)">
            <summary>
            Gets the chunk at the specified position.
            </summary>
            <param name="pos">The chunk position.</param>
            <param name="requireLoaded">Whether to require the chunk to be loaded.</param>
            <returns>The <see cref="T:OnixRuntime.Api.World.WorldChunk"/> at the specified position, or null if not found or not loaded.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunks.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the loaded world chunks.
            </summary>
            <returns>An enumerator for the loaded world chunks.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunks.GetEnumerator(System.Boolean)">
            <summary>
            Returns an enumerator that iterates through the world chunks, optionally requiring them to be loaded.
            </summary>
            <param name="requireLoaded">Whether to require the chunk to be loaded.</param>
            <returns>An enumerator for the world chunks.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunks.FindBlocks(OnixRuntime.Api.World.Block,System.Boolean)">
            <summary>
            Finds every position/instances of that block in every loaded chunks.
            </summary>
            <param name="block">The block to search for.</param>
            <param name="discriminateState">True if only that state/data of the block will be considered the same blocks, false if any state/data of that block is fine.</param>
            <returns>The list of blocks it found. This has the Data and it's position.</returns>
        </member>
        <member name="T:OnixRuntime.Api.World.WorldChunksIterator">
            <summary>
            Enumerates the world chunks in a <see cref="T:OnixRuntime.Api.World.WorldChunks"/> collection.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunksIterator.#ctor(OnixRuntime.Api.World.WorldChunks,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Api.World.WorldChunksIterator"/> class.
            </summary>
            <param name="chunks">The world chunks collection.</param>
            <param name="requireLoaded">Whether to require the chunk to be loaded.</param>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunksIterator.MoveNext">
            <summary>
            Moves to the next chunk in the enumeration.
            </summary>
            <returns>True if the enumerator was successfully advanced to the next chunk; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunksIterator.Reset">
            <summary>
            Resets the enumerator to its initial position.
            </summary>
        </member>
        <member name="P:OnixRuntime.Api.World.WorldChunksIterator.Current">
            <summary>
            Gets the current chunk being enumerated.
            </summary>
        </member>
        <member name="M:OnixRuntime.Api.World.WorldChunksIterator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OnixRuntime.Extensions.TimeSpanExtensions">
            <summary>
            Provides extension methods for converting between TimeSpan and game ticks.
            </summary>
        </member>
        <member name="M:OnixRuntime.Extensions.TimeSpanExtensions.FromGameTicks(System.Int32)">
            <summary>
            Converts the specified number of game ticks to a TimeSpan.
            </summary>
            <param name="ticks">The number of game ticks (20 ticks per second).</param>
            <returns>A TimeSpan representing the specified number of game ticks.</returns>
        </member>
        <member name="M:OnixRuntime.Extensions.TimeSpanExtensions.ToGameTicks(System.TimeSpan)">
            <summary>
            Converts a TimeSpan to the equivalent number of game ticks.
            </summary>
            <param name="timeSpan">The TimeSpan to convert.</param>
            <returns>The number of game ticks (20 ticks per second) represented by the TimeSpan.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginBase">
            <summary>
            Base class for Onix plugins, providing access to plugin manifest, asset paths, persistent data, and lifecycle events.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginBase.CurrentPluginManifest">
            <summary>
            Gets the manifest for the current plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginBase.PluginAssetsPath">
            <summary>
            Gets the path to the plugin's assets folder.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginBase.PluginPersistentDataPath">
            <summary>
            Gets the path to the plugin's persistent data folder.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginBase.DisablingShouldUnloadPlugin">
            <summary>
            If true, disabling your plugin will unload it fully then load it back.
            This is useful for plugins that don't want to handle cleaning up their state when disabled.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginBase.PluginEjectionCancellationToken">
            <summary>
            Gets the cancellation token used for plugin ejection.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginBase.PluginDisplayModule">
            <summary>
            Gets the display module for the plugin, used to show the plugin's main settings.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginBase.SaveManager">
            <summary>
            Gets the save manager, allowing you to save data to config, get config name or track <see cref="T:OnixRuntime.Api.OnixClient.OnixModule"/>s or <see cref="T:OnixRuntime.Api.OnixClient.OnixSetting"/>s.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.#ctor(OnixRuntime.Plugin.OnixPluginInitInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.OnixPluginBase"/> class with the specified initialization info.
            </summary>
            <param name="info">The initialization info for the plugin.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.WaitForDebuggerToBeAttached(System.Nullable{System.TimeSpan})">
            <summary>
            Waits for a debugger to be present, call this from your constructor to not freeze a game thread unnecessarily.
            </summary>
            <param name="timeout">How long to wait, defaults to 30 seconds.</param>
            <returns>True if the debugger was attached within the timeout; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.OnUnloaded">
            <summary>
            Called when the plugin is unloaded. Override to implement custom unload logic.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.OnLoaded">
            <summary>
            Called when the plugin is loaded. Override to implement custom load logic.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.OnEnabled">
            <summary>
            Called when the plugin is enabled. Override to implement custom enable logic.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.OnDisabled">
            <summary>
            Called when the plugin is disabled. Override to implement custom enable logic.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.RaiseUnloadEvent">
            <summary>
            Raises the unload event and calls <see cref="M:OnixRuntime.Plugin.OnixPluginBase.OnUnloaded"/>.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginBase.RaiseLoadEvent(System.Boolean)">
            <summary>
            Raises the load event and calls <see cref="M:OnixRuntime.Plugin.OnixPluginBase.OnLoaded"/>.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginInitInfo">
            <summary>
            Contains initialization information for an Onix plugin, including manifest, asset paths, persistent data, cancellation, and bound DLLs.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.Manifest">
            <summary>
            Gets the manifest for the plugin.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.AssetsFolderPath">
            <summary>
            Gets the path to the plugin's assets folder.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.PluginDataFolderPath">
            <summary>
            Gets the path to the plugin's persistent data folder.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.CancellationToken">
            <summary>
            Gets the cancellation token for plugin ejection.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.BoundDllNamesToPath">
            <summary>
            Gets the dictionary mapping bound DLL names to their paths.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.DisplayModule">
            <summary>
            The display module for the plugin, used to show the plugin's main settings.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInitInfo.SaveManager">
            <summary>
            The save manager for this mod, providing generic config save events.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginInstaller">
            <summary>
            Handles installing, uninstalling, packaging and managing plugins asynchronously.
            Provides methods to start operations and track progress via TaskProgressReport.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.OfficialRepositoryUrl">
            <summary>
            The endpoint url for the official plugin repository.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.RemoteSourceUrls">
            <summary>
            A list of URLs representing remote sources for retrieving data or resources.
            <see cref="M:OnixRuntime.Plugin.OnixPluginInstaller.GetCuratedRemoteSourceUrls"/> is the preferred way to get the list of urls to use. this will be for editing only.
            Remember to call <see cref="M:OnixRuntime.Plugin.OnixPluginInstaller.SaveRemoteSourceUrls"/> when you modify this list.
            </summary>
            <remarks>This list is initialized with the official repository URL by default. Additional URLs
            can be added to specify alternative or supplementary remote sources.</remarks>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.GetCuratedRemoteSourceUrls">
            <summary>
            Gets a curated list of remote source URLs, ensuring the official repository URL is first and making sure the format is consistent.
            This gives you url without a / so you can do $"{url}/plugins/uuid" without worrying about double //.
            </summary>
            <returns>The list of endpoint urls.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.SaveRemoteSourceUrls">
            <summary>
            Saves the runtime config which saves the list of source urls.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport">
            <summary>
            Represents progress and status for a long-running plugin operation.
            </summary>
            <param name="cancellationToken">Cancellation token used to cancel the associated task.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.#ctor(System.Threading.CancellationToken)">
            <summary>
            Represents progress and status for a long-running plugin operation.
            </summary>
            <param name="cancellationToken">Cancellation token used to cancel the associated task.</param>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Percent">
            <summary>
            Progress percentage (0 to 100).
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Status">
            <summary>
            Human-readable status message describing the current step.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Task">
            <summary>
            The underlying Task representing the asynchronous operation.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Lock">
            <summary>
            Lock object used to synchronize updates to the report.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.SetStatus(System.String)">
            <summary>
            Set the status message.
            </summary>
            <param name="status">The new status text.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.SetPercent(System.Single)">
            <summary>
            Set the progress percentage.
            </summary>
            <param name="percent">Progress percentage (0 to 100).</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.SetStatusAndPercent(System.String,System.Single)">
            <summary>
            Set both status and progress percentage in a single synchronized update.
            </summary>
            <param name="status">The new status text.</param>
            <param name="percent">Progress percentage (0 to 100).</param>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Failed">
            <summary>
            True when the underlying task has faulted or been canceled.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Canceled">
            <summary>
            True when the operation has been canceled or the cancellation token was signaled.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.Completed">
            <summary>
            True when the underlying task has completed.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.ErrorMessage">
            <summary>
            Provides the error message if the underlying task faulted.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport.CancellationToken">
            <summary>
            Cancellation token associated with this progress report.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.Tasks">
            <summary>
            Active tasks keyed by an identifier.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.TaskList">
            <summary>
            Snapshot list of current task reports.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstaller.PluginsFolder">
            <summary>
            Root folder where plugins and related data are stored.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.UnloadPlugin(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Start unloading the plugin identified by <paramref name="pluginUuid"/> and return a TaskProgressReport to track the operation.
            </summary>
            <param name="pluginUuid">UUID of the plugin to unload.</param>
            <param name="uuid">Optional id used to track this task in the Tasks dictionary.</param>
            <param name="cancellationToken">Token to cancel the unload operation.</param>
            <returns>TaskProgressReport that contains progress and the underlying Task.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.UninstallPlugin(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Start uninstalling the plugin and optionally keep user data.
            </summary>
            <param name="pluginUuid">UUID of the plugin to uninstall.</param>
            <param name="keepData">True to preserve plugin user data/configs; false to remove them.</param>
            <param name="cancellationToken">Token to cancel the uninstall operation.</param>
            <returns>TaskProgressReport to monitor the uninstall process.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromGithub(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Start installing the latest release from a GitHub repository URL. The report can be used to follow progress.
            </summary>
            <param name="repositoryUrl">Public GitHub repository URL (e.g. https://github.com/owner/repo).</param>
            <param name="uuid">Optional id used to track this task in the Tasks dictionary.</param>
            <param name="cancellationToken">Token to cancel the installation.</param>
            <returns>TaskProgressReport tracking the download and install steps.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromUrl(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Start downloading and installing a plugin from a direct URL.
            This url must point directly to a .onixplugin or .zip file.
            </summary>
            <param name="url">Direct download URL of the plugin (.onixplugin or .zip).</param>
            <param name="uuid">Optional id used to track this task in the Tasks dictionary.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>TaskProgressReport for monitoring download and install.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromUuid(System.String,System.Threading.CancellationToken)">
            <summary>
            Install a plugin by its known UUID from the source URLs.
            </summary>
            <param name="uuid">UUID of the plugin to install.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>TaskProgressReport to track installation progress.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromRemoteManifest(OnixRuntime.Plugin.RemotePluginManifest,System.Threading.CancellationToken)">
            <summary>
            Install a plugin by its remote manifest from the source URLs.
            </summary>
            <param name="uuid">UUID of the plugin to install.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>TaskProgressReport to track installation progress.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromFileInternal(System.String,OnixRuntime.Plugin.OnixPluginInstaller.TaskProgressReport)">
            <summary>
            Install a plugin from a local file.
            </summary>
            <param name="filePath">Path to the plugin file.</param>
            <param name="report">Progress report for the installation.</param>
            <returns>Task representing the asynchronous operation.</returns>
            <exception cref="T:System.IO.FileNotFoundException">When the file for the plugin wasn't found.</exception>
            <exception cref="T:System.Exception">When the plugin file is empty or invalid.</exception>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Install a plugin from a local file.
            </summary>
            <param name="filePath">Path to the plugin file.</param>
            <param name="uuid">Optional id used to track this task in the Tasks dictionary.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>TaskProgressReport to monitor file read and installation.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.InstallPluginFromBytes(System.Byte[],System.String,System.Threading.CancellationToken)">
            <summary>
            Start installing a plugin from raw bytes.
            </summary>
            <param name="pluginData">Byte array containing the plugin archive.</param>
            <param name="uuid">Optional id used to track this task in the Tasks dictionary.</param>
            <param name="cancellationToken">Token to cancel the operation.</param>
            <returns>TaskProgressReport to monitor the installation.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstaller.PackagePlugin(System.String,System.Threading.CancellationToken)">
            <summary>
            Package a plugin folder into a zip and return a TaskProgressReport to monitor the packaging process.
            </summary>
            <param name="pluginUuid">UUID of the plugin to package.</param>
            <param name="cancellationToken">Token to cancel the packaging operation.</param>
            <returns>TaskProgressReport exposing progress and the resulting package Task.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginState">
            <summary>
            Represents the various states a plugin can be in.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.NotInstalled">
            <summary>
            When the plugin is not installed.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Unloaded">
            <summary>
            When the plugin is not loaded, but it is installed.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Unloading">
            <summary>
            When the plugin is being unloaded.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Loading">
            <summary>
            When the plugin is in the loading process.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Enabled">
            <summary>
            When the plugin is Loaded and Enabled.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Enabling">
            <summary>
            When the plugin is Loaded and enabling itself.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Disabling">
            <summary>
            When the plugin is Loaded but on its way to being disabled.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginState.Disabled">
            <summary>
            Loaded but disabled.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginStateExtensions">
            <summary>
            Extensions to add some convenience methods to the <see cref="T:OnixRuntime.Plugin.PluginState"/>.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginStateExtensions.IsBetweenStates(OnixRuntime.Plugin.PluginState)">
            <summary>
            Checks if the plugin state is between loading and unloading states and not done on a specific state.
            </summary>
            <param name="state">The state to check.</param>
        </member>
        <member name="T:OnixRuntime.Plugin.IOnixPlugin">
            <summary>
            A basic onix plugin interface to interact with other plugins.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.PluginFolder">
            <summary>
            The plugin's directory path.
            OnixClient/Plugins/plugins/uuid_of_plugin
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.PluginFolderName">
            <summary>
            This is the name of just the directory, to get the uuid you should use the <see cref="P:OnixRuntime.Plugin.IOnixPlugin.Manifest"/>'s <see cref="P:OnixRuntime.Plugin.PluginManifest.Uuid"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.PluginSettingsDirectory">
            <summary>
            This is the path to the plugin's settings directory within the OnixClient/Plugins/configs folder.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.PluginPersistentDataDirectory">
            <summary>
            This is the path to the plugin's persistent data directory within the OnixClient/Plugins/configs/uuid/data folder.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.AssetsDirectory">
            <summary>
            The path to the plugin's assets folder, which is OnixClient/Plugins/plugins/uuid_of_plugin/assets.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.Manifest">
            <summary>
            The plugin's manifest.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.Settings">
            <summary>
            The settings of the plugin like if it should get loaded or if it's enabled.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.CompatibleWithRuntime">
            <summary>
            If the plugin is compatible with the current runtime.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.CompatibleWithGameVersion">
            <summary>
            If the plugin is compatible with the current game version.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.DisplayModule">
            <summary>
            The display module of the plugin.
            This is used to have the settings of the plugin in the OnixClient plugin settings menu.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.IsBusy">
            <summary>
            When the plugin is busy, it cannot be enabled/disabled or unloaded.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.IsLoaded">
            <summary>
            If the plugin is loaded.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.Uuid">
            <summary>
            The plugin's UUID.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.IOnixPlugin.PluginState">
            <summary>
            The current state of the plugin.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.IOnixPlugin.EnablePlugin">
            <summary>
            Tries to enable the plugin. This will be false when it fails. You can check <see cref="P:OnixRuntime.Plugin.IOnixPlugin.IsBusy"/> and <see cref="P:OnixRuntime.Plugin.IOnixPlugin.IsLoaded"/>
            </summary>
            <returns>True when the plugin will be enabled.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.IOnixPlugin.DisablePlugin">
            <summary>
            Tries to disable the plugin. This will be false when it fails. You can check <see cref="P:OnixRuntime.Plugin.IOnixPlugin.IsBusy"/> and <see cref="P:OnixRuntime.Plugin.IOnixPlugin.IsLoaded"/>
            </summary>
            <returns>True when the plugin will be enabled.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.IOnixPlugin.StartUnloadPlugin(System.Boolean)">
            <summary>
            Will unload the plugin. <see cref="P:OnixRuntime.Plugin.IOnixPlugin.IsLoaded"/>
            When it's a one-off, the plugin will still load the next time.
            If it's not then it will set the plugin to not load next time.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.IOnixPlugin.StartLoadPlugin(OnixRuntime.Plugin.PluginLoadMode)">
            <summary>
            Will try to load the plugin. <see cref="P:OnixRuntime.Plugin.IOnixPlugin.IsLoaded"/>
            If you don't force it, it will use the user setting to know if it should be loaded or not.
            </summary>
            <param name="mode">The mode to load the plugin in, defaults to <see cref="F:OnixRuntime.Plugin.PluginLoadMode.ForceLoad"/>.</param>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginAssemblyLoaderContext">
            <summary>
            Handles loading plugin assemblies and unmanaged DLLs for Onix plugins.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginAssemblyLoaderContext.#ctor(System.Boolean,System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.OnixPluginAssemblyLoaderContext"/> class.
            </summary>
            <param name="isCollectible">Whether the context is collectible.</param>
            <param name="basePath">The base path for plugin assemblies.</param>
            <param name="runtimeAssembly">The runtime assembly reference.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginAssemblyLoaderContext.Load(System.Reflection.AssemblyName)">
            <summary>
            Loads a managed assembly by name.
            </summary>
            <param name="assemblyName">The name of the assembly to load.</param>
            <returns>The loaded assembly, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginAssemblyLoaderContext.LoadUnmanagedDll(System.String)">
            <summary>
            Loads an unmanaged DLL by name.
            </summary>
            <param name="unmanagedDllName">The name of the unmanaged DLL to load.</param>
            <returns>A pointer to the loaded DLL, or IntPtr.Zero if not found.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginInstance">
            <summary>
            Represents an instance of a loaded Onix plugin, including its manifest, settings, assembly, and loader context.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.Manifest">
            <summary>
            Gets the manifest for the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.PluginsFolder">
            <summary>
            Gets the plugins folder path.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.PluginFolder">
            <summary>
            Gets the plugin folder path.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.PluginFolderName">
            <summary>
            Gets the plugin folder name (UUID).
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.PluginSettingsDirectory">
            <summary>
            Gets the plugin settings directory path.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.PluginPersistentDataDirectory">
            <summary>
            Gets the plugin persistent data directory path.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.AssetsDirectory">
            <summary>
            Gets the assets folder path for the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.AssemblyLoadContext">
            <summary>
            Gets the assembly load context for the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.PluginAssembly">
            <summary>
            Gets the plugin assembly.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.Plugin">
            <summary>
            Gets the plugin instance.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.IsAwaitingUnload">
            <summary>
            Indicates whether the plugin is awaiting unload.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.HasPluginLoadBeenCalled">
            <summary>
            Indicates whether the plugin load method has been called.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.HasPluginEnabledBeenCalled">
            <summary>
            Indicates whether the plugin enable method has been called.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.DisablingShouldUnloadPlugin">
            <summary>
            Whether the plugin's disabling process should include ejecting.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.IsPluginTrusted">
            <summary>
            Indicates whether the plugin is trusted.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginInstance.EjectionCancelToken">
            <summary>
            Gets the cancellation token source for plugin ejection.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginInstance.Settings">
            <summary>
            Gets or sets the plugin settings.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstance.SaveSettings(System.Boolean)">
            <summary>
            Saves the plugin settings to disk.
            </summary>
            <param name="includePluginSpecificSettings">If settings specific to the plugin should be saved or just the generic ones.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstance.LoadPluginSettings(System.String)">
            <summary>
            Loads plugin settings from disk for the specified plugin folder name.
            </summary>
            <param name="pluginFolderName">The plugin folder name (UUID).</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginSettings"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstance.#ctor(System.String,OnixRuntime.Plugin.PluginSettings,OnixRuntime.Plugin.PluginManifest,System.Int32,System.Int32,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.OnixPluginInstance"/> class.
            </summary>
            <param name="pluginFolder">The plugin folder path.</param>
            <param name="pluginSettings">The plugin settings.</param>
            <param name="manifest">The plugin manifest or null.</param>
            <param name="minRuntimeVersion">The minimum supported runtime version.</param>
            <param name="maxRuntimeVersion">The maximum supported runtime version.</param>
            <param name="cancellationTokenSource">The cancellation token source for plugin ejection.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstance.FinishInitializingPlugin">
            <summary>
            Finishes initializing the plugin by creating its instance from the loaded assembly.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginInstance.UnloadPlugin">
            <summary>
            Unloads the plugin and releases resources.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginProjectGenerator">
            <summary>
            Provides functionality to generate Onix plugin project templates as downloadable zip files.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers">
            <summary>
            Holds identifiers for a generated project, such as GUIDs and UUIDs.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers.Name">
            <summary>
            The project name.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers.ProjectGuid">
            <summary>
            The project GUID.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers.SolutionGuid">
            <summary>
            The solution GUID.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers.VisualStudioProjectIdentifier">
            <summary>
            The Visual Studio project identifier.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers.PluginUUID">
            <summary>
            The plugin UUID.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers"/> class.
            </summary>
            <param name="name">The project name.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GetSolutionFileContent(OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers)">
            <summary>
            Generates the content for a Visual Studio solution file for the project.
            </summary>
            <param name="identifiers">The project identifiers.</param>
            <returns>The solution file content as a string.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GetProjectFileContent(OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers)">
            <summary>
            Generates the content for a .csproj project file for the project.
            </summary>
            <param name="identifiers">The project identifiers.</param>
            <returns>The project file content as a string.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GetProjectEntryPointContent(OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers)">
            <summary>
            Generates the content for the main entry point .cs file for the project.
            </summary>
            <param name="identifiers">The project identifiers.</param>
            <returns>The entry point file content as a string.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GetProjectEntryPointConfigContent(OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers)">
            <summary>
            Generates the content for the main entry point's config .cs file for the project.
            </summary>
            <param name="identifiers">The project identifiers.</param>
            <returns>The entry point file content as a string.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GetProjectManifestContent(OnixRuntime.Plugin.OnixPluginProjectGenerator.ProjectIdentifiers)">
            <summary>
            Generates the content for the manifest.json file for the project.
            </summary>
            <param name="identifiers">The project identifiers.</param>
            <returns>The manifest file content as a string.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.CreateEntryAndWrite(System.IO.Compression.ZipArchive,System.String,System.String)">
            <summary>
            Creates a new entry in the zip archive and writes the specified content to it.
            </summary>
            <param name="archive">The zip archive.</param>
            <param name="entryName">The name of the entry to create.</param>
            <param name="entryValue">The content to write to the entry.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GenerateProject(System.String)">
            <summary>
            Generates a zip file containing a new Onix plugin project template.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>The zip file as a byte array.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GenerateProjectDownloadUrl(System.String)">
            <summary>
            Generates a data URL for downloading a new Onix plugin project template zip file.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>The data URL for downloading the zip file.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginProjectGenerator.GetDownloadUrlForBytes(System.Byte[])">
            <summary>
            Converts a byte array to a data URL for downloading as a zip file.
            </summary>
            <param name="data">The byte array to convert.</param>
            <returns>The data URL for downloading the zip file.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginSaveManager">
            <summary>
            Class responsible for saving and loading onix module data in plugins.
            This is for the default setting system, you can go the manual route of course.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.OnixPluginSaveManager.CurrentConfigName">
            <summary>
            This is the name of the current plugin config.
            Using this, you can respect different configs.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginSaveManager.OnConfigLoadDelegate">
            <summary>
            Delegate for handling configuration load events.
            This is going to be what you gave in <see cref="E:OnixRuntime.Plugin.OnixPluginSaveManager.ConfigSaved"/>.
            </summary>
            <param name="config">The configuration data.</param>
        </member>
        <member name="T:OnixRuntime.Plugin.OnixPluginSaveManager.OnConfigSaveDelegate">
            <summary>
            Delegate for handling configuration save events.
            Return a JSON representation of what you need to save, it will be given back in <see cref="E:OnixRuntime.Plugin.OnixPluginSaveManager.ConfigLoaded"/> 
            </summary>
            <returns>The configuration data to save.</returns>
        </member>
        <member name="E:OnixRuntime.Plugin.OnixPluginSaveManager.ConfigLoaded">
            <summary>
            Event triggered when the configuration data is loaded.
            This can happen from any thread.
            Note: Adding a delegate will automatically call it if data is available, so no need to handle that case yourself.
            </summary>
        </member>
        <member name="E:OnixRuntime.Plugin.OnixPluginSaveManager.ConfigSaved">
            <summary>
            Event triggered when the configuration data is saved.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginSaveManager.Merge(System.Text.Json.Nodes.JsonObject,System.Text.Json.Nodes.JsonObject)">
            <summary>
            Merges two JsonObjects recursively. If a key exists in both objects, the value from the source object will overwrite the value in the target object.
            </summary>
            <param name="target">What receives the new information.</param>
            <param name="source">The source of new information.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginSaveManager.TrackModule(OnixRuntime.Api.OnixClient.OnixModule)">
            <summary>
            Tracks the given module if it's not already tracked.
            This means next save or load, the module's save and load methods will be called.
            Calling this will also try to load the module from the last save.
            </summary>
            <param name="module">The instance to track and try load settings for.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginSaveManager.TrackSetting(OnixRuntime.Api.OnixClient.OnixSetting,System.Boolean,System.String)">
            <summary>
            Tracks the given setting if it's not already tracked.
            Tracked settings will have their values saved and restored with the module's configuration.
            </summary>
            <param name="setting">The setting to track.</param>
            <param name="addParentModuleNameAsPrefix">
            Whether the parent module name should be added as a prefix to the setting key when saving.
            </param>
            <param name="prefix">
            An optional custom prefix to apply to the setting key, useful for grouping or namespacing.
            </param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginSaveManager.UntrackModule(OnixRuntime.Api.OnixClient.OnixModule)">
            <summary>
            Stops tracking the given module if it was previously tracked.
            This prevents its settings from being saved or restored during future operations.
            </summary>
            <param name="module">The module instance to stop tracking.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginSaveManager.UntrackSetting(OnixRuntime.Api.OnixClient.OnixSetting)">
            <summary>
            Stops tracking the given setting if it was previously tracked.
            This setting will no longer be saved or restored.
            </summary>
            <param name="setting">The setting to stop tracking.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.OnixPluginSaveManager.UntrackAll">
            <summary>
            Stops tracking all modules and settings.
            This effectively resets tracking, preventing any saves or loads from affecting previously tracked items.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginHotReloadHandler">
            <summary>
            Handles hot reloading of plugins by monitoring plugin directories and managing plugin load/unload events.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.PluginHotReloadHandler"/> class.
            </summary>
            <param name="pluginsFolder">The path to the plugins folder to monitor.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.QueuePluginUnload(System.String)">
            <summary>
            Queues a plugin for unloading.
            </summary>
            <param name="pluginName">The name or path of the plugin to unload.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.QueuePluginLoad(System.String)">
            <summary>
            Queues a plugin for loading.
            </summary>
            <param name="pluginName">The name or path of the plugin to load.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.QueuePluginReload(System.String)">
            <summary>
            Queues a plugin for reloading (unload and then load).
            </summary>
            <param name="pluginName">The name or path of the plugin to reload.</param>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginHotReloadHandler.UnloadPluginDelegate">
            <summary>
            Delegate for plugin unload events.
            </summary>
            <param name="pluginName">The name or path of the plugin to unload.</param>
        </member>
        <member name="E:OnixRuntime.Plugin.PluginHotReloadHandler.OnUnloadPlugin">
            <summary>
            Event triggered when a plugin should be unloaded.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginHotReloadHandler.LoadPluginDelegate">
            <summary>
            Delegate for plugin load events.
            </summary>
            <param name="pluginName">The name or path of the plugin to load.</param>
        </member>
        <member name="E:OnixRuntime.Plugin.PluginHotReloadHandler.OnLoadPlugin">
            <summary>
            Event triggered when a plugin should be loaded.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.GetPluginFlagPath(System.String)">
            <summary>
            Gets the path to the plugin's flag file used for change detection.
            </summary>
            <param name="plugin">The plugin directory or name.</param>
            <returns>The path to the CompletePluginFlag.txt file.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.GetPluginChangeTime(System.String)">
            <summary>
            Gets the last change time of the plugin's flag file.
            </summary>
            <param name="plugin">The plugin directory or name.</param>
            <returns>The last write time of the flag file, or DateTime.MinValue if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.GetPreviousPluginCreationTime(System.String)">
            <summary>
            Gets the previously recorded creation time for the plugin.
            </summary>
            <param name="plugin">The plugin directory or name.</param>
            <returns>The previously recorded creation time, or DateTime.MinValue if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.TickPluginHotReload">
            <summary>
            Main loop for monitoring plugin directories and handling hot reload logic.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginHotReloadHandler.EjectRuntime">
            <summary>
            Cancels the hot reload thread and waits for it to exit.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginManager">
            <summary>
            Manages the loading, unloading, and lifecycle of Onix plugins, including hot reloading and event invocation.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManager.PluginDirectory">
            <summary>
            Gets the directory where plugins are stored.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManager.Plugins">
            <summary>
            Gets the list of currently loaded plugins.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginManager.PluginsLock">
            <summary>
            Reader Writer Lock to utilize for the plugins list.
            Not using this might cause race conditions leading to crashes or memory corruption.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManager.UnloadedButAvailablePlugins">
            <summary>
            Gets the list of plugins that are available but not loaded.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManager.PluginAssemblies">
            <summary>
            Gets the mapping of assemblies to their plugin instances.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManager.PluginAssembliesLock">
            <summary>
            Gets the lock for thread-safe access to plugin assemblies.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.TryLoadPlugin(System.String,OnixRuntime.Plugin.PluginLoadMode)">
            <summary>
            Attempts to load a plugin from the specified path.
            </summary>
            <param name="path">The path to the plugin folder.</param>
            <param name="mode">The mode for loading the plugin.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.TryLoadPluginBackground(System.String,OnixRuntime.Plugin.PluginLoadMode)">
            <summary>
            Loads a plugin in a background thread.
            </summary>
            <param name="path">The path to the plugin folder.</param>
            <param name="mode">The mode for loading the plugin.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.LoadPlugins(OnixRuntime.Api.Logger,System.String)">
            <summary>
            Loads all plugins from the specified folder and sets up hot reload handling.
            </summary>
            <param name="logger">The logger to use for plugin events.</param>
            <param name="pluginsFolder">The folder containing plugins.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.GetPluginFor(System.Reflection.Assembly)">
            <summary>
            Gets the plugin instance for the specified assembly.
            </summary>
            <param name="assembly">The assembly to look up.</param>
            <returns>The <see cref="T:OnixRuntime.Plugin.OnixPluginInstance"/> for the assembly, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.GetPluginFromCallStack">
            <summary>
            Gets the plugin instance from the current call stack.
            </summary>
            <returns>The <see cref="T:OnixRuntime.Plugin.OnixPluginInstance"/> for the calling assembly, or null if not found.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.ShouldCallEventFunction(System.Delegate,OnixRuntime.Plugin.OnixPluginInstance@,System.Boolean)">
            <summary>
            Determines if an event function should be called for a plugin.
            </summary>
            <param name="function">The delegate function.</param>
            <param name="pluginInstance">The plugin instance, if found.</param>
            <param name="ignoreUnload">Whether to ignore the unload state.</param>
            <returns>True if the event function should be called; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.GetDelegatesForEventInvocations(System.Delegate[],System.Boolean)">
            <summary>
            Gets delegates for event invocations, indicating if the plugin is trusted.
            </summary>
            <param name="functions">The array of delegate functions.</param>
            <param name="ignoreUnload">Whether to ignore the unload state.</param>
            <returns>An enumerable of delegates and their trust status.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.EjectSinglePlugin(System.String,System.Boolean,System.Boolean)">
            <summary>
            Ejects (unloads) a single plugin by folder name.
            </summary>
            <param name="pluginFolderName">The folder name of the plugin.</param>
            <param name="reportErrors">Whether to report errors if the plugin cannot be ejected.</param>
            <param name="oneOff">Whether this is a one-off ejection, true means it will not change its shouldLoad setting.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.RaisePluginUnloadFor(OnixRuntime.Plugin.OnixPluginInstance)">
            <summary>
            Raises the unload event for a plugin and performs cleanup.
            </summary>
            <param name="plugin">The plugin instance.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.EjectSinglePlugin(OnixRuntime.Plugin.OnixPluginInstance,System.Boolean,System.Boolean)">
            <summary>
            Ejects (unloads) a single plugin instance.
            </summary>
            <param name="plugin">The plugin instance to eject.</param>
            <param name="keepBusy">Whether to keep the plugin in a busy state.</param>
            <param name="oneOff">Whether this is a one-off ejection, true means it will not change its shouldLoad setting.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.HandleRuntimeUnload">
            <summary>
            Handles unloading all plugins and cleaning up resources during runtime unload.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.OnTickEvent">
            <summary>
            Handles the tick event, calling load events for plugins as needed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.OnRenderEvent">
            <summary>
            Handles the render event, calling load events for plugins as needed.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.EjectRuntime">
            <summary>
            Ejects (unloads) the entire runtime and all plugins.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManager.IsTypeFromPluginUuid(System.Type,System.String)">
            <summary>
            Determines if a type is from a plugin with the specified UUID.
            </summary>
            <param name="type">The type to check.</param>
            <param name="uuid">The plugin UUID.</param>
            <returns>True if the type is from the plugin; otherwise, false.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.SupportedVersionRange">
            <summary>
            Represents a range of supported versions, either a single version or a range of versions.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.SupportedVersionRange.#ctor(OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Creates a new range with only one version being supported.
            </summary>
            <param name="version">The version that is supported.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.SupportedVersionRange.#ctor(OnixRuntime.Api.Utils.PluginSemVersion,OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Creates new supported version range, inclusively.
            </summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version</param>
        </member>
        <member name="M:OnixRuntime.Plugin.SupportedVersionRange.#ctor(System.String)">
            <summary>
            Parses a version range from a string.
            This will throw an exception if the string is not in the correct format.
            You can have a single version or a range.
            Single version: "1.16.40"
            Range: "1.16.40-1.16.221"
            </summary>
            <param name="range">The range string to parse.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.SupportedVersionRange.IsSupported(OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Checks if a specific version is supported by this range.
            </summary>
            <param name="version">The version to check.</param>
            <returns>true if the version is supported; otherwise, false.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.SupportedVersionRange.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginManifest">
            <summary>
            Represents the manifest for an Onix plugin, including metadata such as UUID, name, author, description, versions, and target assembly.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.Uuid">
            <summary>
            Gets or sets the UUID of the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.Name">
            <summary>
            Gets or sets the name of the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.Author">
            <summary>
            Gets or sets the author of the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.Description">
            <summary>
            Gets or sets the description of the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.PluginVersion">
            <summary>
            Gets or sets the plugin version.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.GameVersion">
            <summary>
            Gets or sets the game version this plugin targets.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.RuntimeVersion">
            <summary>
            Gets or sets the runtime version required by this plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.TargetAssemblyName">
            <summary>
            Gets or sets the target assembly name for this plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.HasToggleKey">
            <summary>
            Whether this plugin has a toggle key handled automatically or not.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.IsPluginManagerUi">
            <summary>
            Whether this plugin is a plugin manager UI plugin or not.
            This is used to find a suitable UI and enable/update it automatically.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.SupportedGameVersionRanges">
            <summary>
            The supported game version range of the plugin.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginManifest.Categories">
            <summary>
            Categories this plugin falls into.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.LoadManifest(System.IO.Stream)">
            <summary>
            Loads a plugin manifest from a stream.
            </summary>
            <param name="stream">The stream containing the manifest JSON.</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginManifest"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.LoadManifest(System.String)">
            <summary>
            Loads a plugin manifest from a JSON string.
            </summary>
            <param name="json">The JSON string containing the manifest.</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginManifest"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.LoadManifestFromFile(System.String)">
            <summary>
            Loads a plugin manifest from a file.
            </summary>
            <param name="path">The path to the manifest file.</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginManifest"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.#ctor(OnixRuntime.Plugin.PluginManifestJson)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.PluginManifest"/> class from a manifest JSON object.
            </summary>
            <param name="manifest">The manifest JSON object.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.SupportsGameVersion(OnixRuntime.Api.Utils.PluginSemVersion)">
            <summary>
            Checks if the plugin supports a specific game version.
            </summary>
            <param name="version">The version to check against.</param>
            <returns></returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.UuidChecklRegex">
            <remarks>
            Pattern:<br/>
            <code>^[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}$</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 8 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 12 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginManifest.CheckUUID(System.String)">
            <summary>
            Checks if the given string is a valid UUID.
            </summary>
            <param name="uuid">The UUID string to check.</param>
            <returns>True if the string is a valid UUID; otherwise, false.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.RemotePluginManifest">
            <summary>
            A <see cref="T:OnixRuntime.Plugin.PluginManifest"/> that includes the original remote source URL
            the manifest was retrieved from.
            </summary>
            <remarks>
            Use this type when a manifest is loaded from an external endpoint so the
            source can be recorded alongside the parsed manifest data.
            </remarks>
        </member>
        <member name="P:OnixRuntime.Plugin.RemotePluginManifest.SourceUrl">
            <summary>
            Gets the URL of the remote source from which this manifest was obtained.
            This lets you know where it came from if you want to know more about the plugin, making sure you get it from the same place.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.RemotePluginManifest.#ctor(OnixRuntime.Plugin.PluginManifestJson,System.String)">
            <summary>
            Creates a new <see cref="T:OnixRuntime.Plugin.RemotePluginManifest"/> initialized from the
            provided <paramref name="manifest"/> data and <paramref name="sourceUrl"/>.
            </summary>
            <param name="manifest">The parsed manifest data to wrap.</param>
            <param name="sourceUrl">The remote URL where the manifest was retrieved.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.RemotePluginManifest.LoadManifest(System.String,System.String)">
            <summary>
            Loads a plugin manifest from a JSON string.
            </summary>
            <param name="json">The JSON string containing the manifest.</param>
            <param name="sourceUrl">The remote URL where the manifest was retrieved.</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginManifest"/>.</returns>
        </member>
        <member name="T:OnixRuntime.Plugin.RuntimeManifest">
            <summary>
            Represents the runtime manifest, including runtime version information.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.RuntimeManifest.RuntimeVersion">
            <summary>
            Gets or sets the runtime version.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.RuntimeManifest.MinimumRuntimeVersion">
            <summary>
            Gets or sets the minimum runtime version supported.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.RuntimeManifest.IsCompatibleWithRuntime(System.Int32)">
            <summary>
            Determines whether the specified runtime version is compatible with the current runtime constraints.
            </summary>
            <param name="desiredRuntimeVersion">The runtime version to check for compatibility.</param>
            <returns><see langword="true"/> if the specified runtime version is greater than or equal to the minimum runtime
            version  and less than or equal to the current runtime version; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:OnixRuntime.Plugin.RuntimeManifest.Current">
            <summary>
            Gets the current runtime manifest instance.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.RuntimeManifest.RuntimeUuid">
            <summary>
            The uuid used by the runtime.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.RuntimeManifest.LoadManifest(System.String)">
            <summary>
            Loads the runtime manifest from a JSON string.
            </summary>
            <param name="json">The JSON string containing the runtime manifest.</param>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginSettings">
            <summary>
            Represents plugin settings, including whether the plugin is enabled and should load.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginSettings.Enabled">
            <summary>
            Gets or sets whether the plugin is enabled.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginSettings.ShouldLoad">
            <summary>
            Gets or sets whether the plugin should load.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginSettings.RawConfigurationData">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.PluginSettings"/> class.
            </summary>
            <summary>
            Gets or sets the raw configuration data for the plugin.
            You should probably avoid touching that one, see <see cref="M:OnixRuntime.Plugin.PluginSettings.GetConfigurationDataJson"/> and <see cref="M:OnixRuntime.Plugin.PluginSettings.SetConfigurationDataJson(System.String)"/>.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PluginSettings.SaveManager">
            <summary>
            Gets or sets the save manager for the plugin's settings.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.GetConfigurationDataJson">
            <summary>
            Gets the configuration data as a JSON string.
            </summary>
            <returns>The configuration data as a json string.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.SetConfigurationDataJson(System.String)">
            <summary>
            Sets the configuration data from a JSON string.
            </summary>
            <param name="json">The json string containing the json data.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.PluginSettings"/> class.
            You should probably not do that though.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.#ctor(OnixRuntime.Plugin.PluginSettingsJson)">
            <summary>
            Initializes a new instance of the <see cref="T:OnixRuntime.Plugin.PluginSettings"/> class from a settings JSON object.
            </summary>
            <param name="json">The settings JSON object.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.LoadSettings(System.String)">
            <summary>
            Loads plugin settings from a JSON string.
            </summary>
            <param name="json">The JSON string containing the settings.</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginSettings"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.TryCreateSaveManager">
            <summary>
            Tries to create the save manager for the plugin's settings, which will also load the plugin's settings file.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.LoadSettings(System.IO.Stream)">
            <summary>
            Loads plugin settings from a stream.
            </summary>
            <param name="stream">The stream containing the settings JSON.</param>
            <returns>The loaded <see cref="T:OnixRuntime.Plugin.PluginSettings"/>.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.SaveSettings(System.Boolean)">
            <summary>
            Serializes the plugin settings to a JSON string.
            </summary>
            <param name="includePluginSpecificSettings">Should it also save plugin specific settings or just generic ones.</param>
            <returns>The JSON string representing the settings.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PluginSettings.SaveSettings(System.IO.Stream,System.Boolean)">
            <summary>
            Serializes the plugin settings and writes them to a stream.
            </summary>
            <param name="stream">The stream to write the settings to.</param>
            <param name="includePluginSpecificSettings">Should it also save plugin specific settings or just generic ones.</param>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginManifestJson">
            <summary>
            Internal class representing the JSON structure of a plugin manifest.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginSettingsJson">
            <summary>
            Internal class representing the JSON structure of plugin settings.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PluginLoadMode">
            <summary>
            Specifies the various modes for loading plugins.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginLoadMode.LeaveAsIs">
            <summary>
            Leaves the plugin as it is, without loading / unloading it. 
            Meaning it will do the action but not save it to its settings.
            If you load a plugin with this mode, the next time it will not load.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginLoadMode.ForceLoad">
            <summary>
            Forces the plugin to load.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginLoadMode.ForceLoadAndEnable">
            <summary>
            Forces the plugin to load and enables it.
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PluginLoadMode.ForceLoadAndDisable">
            <summary>
            Forces the plugin to load and have it be disabled.
            </summary>
        </member>
        <member name="T:OnixRuntime.Plugin.PublicPluginManager">
            <summary>
            Wrapper allowing you to access public plugin data.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PublicPluginManager.PluginDirectory">
            <summary>
            Gets the directory where plugins are stored.
            OnixClient/Plugins/plugins
            </summary>
        </member>
        <member name="F:OnixRuntime.Plugin.PublicPluginManager.PluginsLock">
            <summary>
            When you want to access plugins, you can use this lock.
            Note that by default <see cref="M:OnixRuntime.Plugin.PublicPluginManager.GetPlugins(System.Boolean)"/> will lock the lock for you in reader mode.
            </summary>
        </member>
        <member name="P:OnixRuntime.Plugin.PublicPluginManager.PluginInstaller">
            <summary>
            Gets the plugin manager instance so you can manage plugins.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.IsPluginBusy(System.String)">
            <summary>
            Gets if that plugin is currently busy or not.
            </summary>
            <param name="uuid">The uuid of the plugin.</param>
            <returns>true when that plugin is busy.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.GetDelegatesForEventInvocations(System.Delegate[])">
            <summary>
            Gets delegates for event invocations. When you are having a public event available to other plugins, you can use this so trust is respected and not overshared.
            </summary>
            <param name="functions">The array of delegate functions.</param>
            <returns>An enumerable of delegates and their trust status.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.GetPlugins(System.Boolean)">
            <summary>
            Gets every plugin that is loaded or unloaded but available.
            This will by default lock the lock for reading, if you want to avoid locking the lock or have already locked it, set lockPluginsLock to false.
            </summary>
            <param name="lockPluginsLock">Defaults to true, set to false if you wish to lock the lock yourself.</param>
            <returns>The plugins as an IEnumerable.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.GetPluginByUuid(System.String,System.Boolean)">
            <summary>
            This tries to get the plugin by its uuid.
            When you store an instance of a plugin, you should store the uuid instead of the instance itself and call this method.
            When loading/unloading enabling/disabling plugins, the instance may be different or disappear for some time before coming back.
            This ensures you're always interacting with a plugin as optimally as possible.
            </summary>
            <param name="uuid">The uuid to look for.</param>
            <param name="lockPluginsLock">Defaults to true, set to false if you wish to lock the lock yourself.</param>
            <returns>The plugin or null.</returns>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.SetAndLoadConfig(System.String)">
            <summary>
            Sets the configuration name and reloads all plugins.
            </summary>
            <param name="configName">The name of the config.</param>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.SaveRelevantPlugins">
            <summary>
            Saves all relevant plugins. Which means they are loaded. Unloaded plugins don't have any code running, or options shown to the user that need saving.
            Unloading, enabling and disabling a plugin saves the plugin and the options.
            </summary>
        </member>
        <member name="M:OnixRuntime.Plugin.PublicPluginManager.SaveRelevantPluginsInTheBackground">
            <summary>
            Saves all relevant plugins in the background. Which means they are loaded. Unloaded plugins don't have any code running, or options shown to the user that need saving.
            Unloading, enabling and disabling a plugin saves the plugin and the options.
            </summary>
        </member>
        <member name="T:OnixRuntime.Runtime.Commands.CSharpCommandHandler">
            <summary>
            Handles C# command execution for the Onix runtime, including plugin creation, reloading, and log level management.
            </summary>
        </member>
        <member name="M:OnixRuntime.Runtime.Commands.CSharpCommandHandler.CSharpCommandExecuted(System.String)">
            <summary>
            Handles execution of a C# command with the provided argument string.
            </summary>
            <param name="argsString">The argument string passed to the command handler.</param>
        </member>
        <member name="T:OnixRuntime.Runtime.OnixRuntimeConfig">
            <summary>
            Represents the configuration for the Onix runtime, including log levels and persistence.
            </summary>
        </member>
        <member name="P:OnixRuntime.Runtime.OnixRuntimeConfig.ChatLogLevel">
            <summary>
            Gets or sets the chat log level.
            </summary>
        </member>
        <member name="P:OnixRuntime.Runtime.OnixRuntimeConfig.FileLogLevel">
            <summary>
            Gets or sets the file log level.
            </summary>
        </member>
        <member name="P:OnixRuntime.Runtime.OnixRuntimeConfig.PluginManagerUuid">
            <summary>
            The UUID of the current plugin manager UI plugin.
            </summary>
        </member>
        <member name="F:OnixRuntime.Runtime.OnixRuntimeConfig.RemotePluginSourceUrls">
            <summary>
            The list of remote URLs for plugin sources.
            </summary>
        </member>
        <member name="M:OnixRuntime.Runtime.OnixRuntimeConfig.Load">
            <summary>
            Loads the runtime configuration from disk, or creates a new one if not found.
            </summary>
        </member>
        <member name="M:OnixRuntime.Runtime.OnixRuntimeConfig.Save">
            <summary>
            Saves the current runtime configuration to disk.
            </summary>
        </member>
        <member name="P:OnixRuntime.Runtime.OnixRuntimeConfig.Instance">
            <summary>
            Gets the current instance of the runtime configuration, loading it if necessary.
            </summary>
        </member>
        <member name="T:PerBlockFaceFaceData`1">
            <summary>
            A wrapper for an array of 6 types together depending on the block face.
            </summary>
            <typeparam name="T">The type that is per face.</typeparam>
        </member>
        <member name="F:PerBlockFaceFaceData`1.Array">
            <summary>
            The underlying array of values for each face.
            </summary>
        </member>
        <member name="M:PerBlockFaceFaceData`1.#ctor(`0)">
            <summary>
            Sets a value for all faces to the same value.
            </summary>
            <param name="allFaces">The value to set every face to.</param>
        </member>
        <member name="M:PerBlockFaceFaceData`1.#ctor(`0[])">
            <summary>
            Sets the faces to the values in the array. You must have an array of length 6, otherwise it will throw an exception.
            </summary>
            <param name="allFaces">The value to set the faces to.</param>
            <exception cref="T:System.ArgumentException">Thrown when the array was not of length 6.</exception>
        </member>
        <member name="M:PerBlockFaceFaceData`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Sets an individual value for each face. The order is North, South, East, West, Top, Bottom.
            </summary>
            <param name="north">The value for the north face.</param>
            <param name="south">The value for the south face.</param>
            <param name="east">The value for the east face.</param>
            <param name="west">The value for the west face.</param>
            <param name="top">The value for the top face.</param>
            <param name="bottom">The value for the bottom face.</param>
        </member>
        <member name="P:PerBlockFaceFaceData`1.Item(OnixRuntime.Api.World.BlockFace)">
            <summary>
            Indexes a face by its block face enum index.
            </summary>
            <param name="face">The face to get/set the value of.</param>
            <returns>The value of that face.</returns>
        </member>
        <member name="P:PerBlockFaceFaceData`1.Item(System.Int32)">
            <summary>
            Indexes a face by its index. There are no more than 6 faces.
            </summary>
            <param name="index">The face to get/set the value of.</param>
            <returns>The value of that face.</returns>
        </member>
        <member name="T:BlockFaceUvRotation">
            <summary>
            Specifies the rotation to apply to the UV coordinates of a face.
            </summary>
        </member>
        <member name="F:BlockFaceUvRotation.NoRotation">
            <summary>
            No rotation is applied to the UV coordinates.
            </summary>
        </member>
        <member name="F:BlockFaceUvRotation.Rotate90">
            <summary>
            Rotates the UV coordinates by 90 degrees.
            </summary>
        </member>
        <member name="F:BlockFaceUvRotation.Rotate180">
            <summary>
            Rotates the UV coordinates by 180 degrees.
            </summary>
        </member>
        <member name="F:BlockFaceUvRotation.Rotate270">
            <summary>
            Rotates the UV coordinates by 270 degrees.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UuidChecklRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UuidChecklRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UuidChecklRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
